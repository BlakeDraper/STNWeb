!function(){"use strict";{var STNControllers=(angular.module("SettingsControllers",["ngInputModified","ui.validate","angular.filter","xeditable","checklist-model","ngFileUpload"]),angular.module("STNControllers",[]));angular.module("ModalControllers",[])}STNControllers.constant("RegExp",{PASSWORD:/^(((?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[A-Z])(?=.*[!@@?#$%^&_:;-]))|((?=.*[a-z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))|((?=.*[A-Z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))).{8,}$/})}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.directive("print",["$compile",function($compile){return{restrict:"AEC",link:function(scope,el,attrs){attrs.nopopup?el.bind("click",function(){window.print()}):el.bind("click",function(){for(var html=document.getElementById(attrs.print),links=document.getElementsByTagName("link"),stylesheets="",i=0;i<links.length;i++)stylesheets+=links[i].outerHTML;var printarea=window.open("","","");printarea.document.write("<html><head><title></title>"),printarea.document.write(stylesheets),printarea.document.write("<style>label {font-weight: 600;} *{font-size: medium;}</style></head><body>"),printarea.document.write("<h2>Short Term Network Modeling</h2>"),printarea.document.write(html.innerHTML),printarea.document.write("</body></html>"),printarea.print(),printarea.close()})}}}]),STNControllers.directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter)}),event.preventDefault())})}}),STNControllers.directive("numericOnly",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){var transformedInput=inputValue?inputValue.replace(/[^\d.-]/g,""):null;return transformedInput!=inputValue&&(modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}}}),STNControllers.directive("datepickerPopup",function(){return{restrict:"EAC",require:"ngModel",link:function(scope,element,attr,controller){controller.$formatters.shift()}}}),STNControllers.directive("focus",function(){return function(scope,element,attributes){element[0].focus()}}),STNControllers.directive("backButton",function(){return{restrict:"A",link:function(scope,element,attrs){function goBack(){history.back(),scope.$apply()}element.bind("click",goBack)}}}),STNControllers.directive("passwordValidate",["RegExp",function(regex){return{require:"ngModel",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$apply(function(){return regex.PASSWORD.test(viewValue.target.value)?(ctrl.$setValidity("passwordValidate",!0),viewValue):void ctrl.$setValidity("passwordValidate",!1)})})}}}]),STNControllers.directive("sameAs",function($parse){return{require:"ngModel",restrict:"A",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$watch(function(){return $parse(attrs.sameAs)(scope)===ctrl.$modelValue},function(currentValue){ctrl.$setValidity("passwordMismatch",currentValue)})})}}}),STNControllers.directive("elastic",["$timeout",function($timeout){return{restrict:"A",link:function($scope,element){$scope.initialHeight=$scope.initialHeight||element[0].style.height;var resize=function(){element[0].style.height=$scope.initialHeight,element[0].style.height=""+element[0].scrollHeight+"px"};element.on("input change",resize),$timeout(resize,0)}}}]),STNControllers.directive("myInputMask",function(){return{restrict:"AC",link:function(scope,el,attrs){el.inputmask(scope.$eval(attrs.myInputMask)),el.on("change",function(){scope.$eval(attrs.ngModel+"='"+el.val()+"'")})}}}),STNControllers.directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var model=$parse(attrs.fileModel),modelSetter=model.assign;element.bind("change",function(){scope.$apply(function(){modelSetter(scope,element[0].files[0])})})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteSearchCtrl",["$scope","$cookies","$rootScope","$location","stateList","sensorTypes","networkNames","SITE",function($scope,$cookies,$rootScope,$location,stateList,sensorTypes,networkNames,SITE){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Site Search",$rootScope.activeMenu="sites",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$scope.states=stateList,$scope.senTypes=sensorTypes,$scope.netNames=networkNames,$scope.Chosen={},$scope.chosenStates=[],$scope.siteResponse=!1,$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.searchSites=function(){$(".page-loading").removeClass("hidden");var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[];var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;SITE.getAll({Event:evID,State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){$scope.siteList=response,$scope.siteResponse=!0,$(".page-loading").addClass("hidden")},function(errorResponse){$(".page-loading").removeClass("hidden"),alert("Error: "+errorResponse.statusText)})},$scope.stateClick=function(data){if(data.selected===!0&&$scope.chosenStates.push(data.STATE_ABBREV),data.selected===!1){var ind=$scope.chosenStates.indexOf(data.STATE_ABBREV);ind>=0&&$scope.chosenStates.splice(ind,1)}},$scope.clearFilters=function(){$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.Chosen={},$scope.chosenStates=[],angular.forEach($scope.states,function(st){st.selected=!1})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("siteModalCtrl",["$scope","$cookies","$q","$location","$state","$http","$timeout","$uibModal","$uibModalInstance","$filter","allDropDownParts","thisSiteStuff","SITE","SITE_HOUSING","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","LANDOWNER_CONTACT",function($scope,$cookies,$q,$location,$state,$http,$timeout,$uibModal,$uibModalInstance,$filter,allDropDownParts,thisSiteStuff,SITE,SITE_HOUSING,MEMBER,INSTRUMENT,INSTRUMENT_STATUS,LANDOWNER_CONTACT){$scope.HorizontalDatumList=allDropDownParts[0],$scope.HorCollMethodList=allDropDownParts[1],$scope.StateList=allDropDownParts[2],$scope.AllCountyList=allDropDownParts[3],$scope.stateCountyList=[],$scope.allHousingTypeList=allDropDownParts[4],$scope.DepPriorityList=allDropDownParts[5],$scope.NetNameList=allDropDownParts[6],$scope.NetTypeList=allDropDownParts[7],$scope.ProposedSens=allDropDownParts[8],$scope.SensorDeployment=allDropDownParts[9],$scope.houseDirty=!1,$scope.netNameDirty=!1,$scope.netTypeDirty=!1,$scope.siteHouseTypesTable=[],$scope.aSite={},$scope.aSite.decDegORdms="dd",$scope.DMS={},$scope.originalSiteHousings=[],$scope.checked="",$scope.checkedName="Not Defined",$scope.landowner={},$scope.addLandowner=!1,$scope.disableSensorParts=!1,$scope.showSiteHouseTable=!1,$scope.siteHouseTypesTable=[],$scope.siteHousesModel={},$scope.siteHousesToRemove=[],$scope.siteNetworkNames=[],$scope.siteNetworkTypes=[];var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}},size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#LATITUDE_DD").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}},size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#LONGITUDE_DD").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){"dms"==d?(($scope.DMS.LADeg<0||$scope.DMS.LADeg>73)&&openLatModal("dms"),($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60)&&openLongModal("dms")):(($scope.aSite.LATITUDE_DD<0||$scope.aSite.LATITUDE_DD>73)&&openLatModal("latlong"),($scope.aSite.LONGITUDE_DD<-175||$scope.aSite.LONGITUDE_DD>-60)&&openLongModal("latlong"))};var deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.aSite.decDegORdms){if(void 0!==$scope.DMS.LADeg){$scope.aSite.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)}}else if(void 0!==$scope.aSite.LATITUDE_DD){var latDMS=deg_to_dms($scope.aSite.LATITUDE_DD).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.LONGITUDE_DD),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.netTypeChg=function(){$scope.netTypeDirty=!0},$scope.whichOne=function(n){if($scope.netNameDirty=!0,"Not Defined"==n.NAME&&n.selected===!0){for(var nn=0;nn<$scope.NetNameList.length;nn++)"Not Defined"!=$scope.NetNameList[nn].NAME&&($scope.NetNameList[nn].selected=!1);$scope.checked="Not Defined"}"Not Defined"==n.NAME&&n.selected===!1&&($scope.checked="")},$scope.dimAction=function(){if(1==$scope.aSite.SENSOR_NOT_APPROPRIATE){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.IS_PERMANENT_HOUSING_INSTALLED="No"}else $scope.disableSensorParts=!1},$scope.save=function(valid){valid&&($(".page-loading").removeClass("hidden"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.addLandowner===!0?null!==$scope.aSite.LANDOWNERCONTACT_ID&&void 0!==$scope.aSite.LANDOWNERCONTACT_ID?LANDOWNER_CONTACT.update({id:$scope.aSite.LANDOWNERCONTACT_ID},$scope.landowner).$promise.then(function(){putSiteAndParts()}):void 0!==$scope.landowner.FNAME||void 0!==$scope.landowner.LNAME||void 0!==$scope.landowner.TITLE||void 0!==$scope.landowner.ADDRESS||void 0!==$scope.landowner.CITY||void 0!==$scope.landowner.PRIMARYPHONE?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.LANDOWNERCONTACT_ID=response.LANDOWNERCONTACTID,putSiteAndParts()},function(errorResponse){toastr.error("Error adding Landowner: "+errorResponse.statusText)}):putSiteAndParts():putSiteAndParts())};var putSiteAndParts=function(){SITE.update({id:$scope.aSite.SITE_ID},$scope.aSite,function(response){var RemovePromises=($q.defer(),[]),AddPromises=[];angular.forEach($scope.siteHousesToRemove,function(shID){var delSHProm=SITE_HOUSING["delete"]({id:shID}).$promise;RemovePromises.push(delSHProm)}),$scope.netNameDirty===!0&&angular.forEach($scope.NetNameList,function(nnL){if(nnL.selected===!1){$http.defaults.headers.common["X-HTTP-Method-Override"]="DELETE";var NNtoDelete={NETWORK_NAME_ID:nnL.NETWORK_NAME_ID,NAME:nnL.NAME},delNNProm=SITE.deleteSiteNetworkName({id:$scope.aSite.SITE_ID},NNtoDelete).$promise;RemovePromises.push(delNNProm),delete $http.defaults.headers.common["X-HTTP-Method-Override"]}}),$scope.netTypeDirty===!0&&angular.forEach($scope.NetTypeList,function(ntL){if(ntL.selected===!1){$http.defaults.headers.common["X-HTTP-Method-Override"]="DELETE";var NTtoDelete={NETWORK_TYPE_ID:ntL.NETWORK_TYPE_ID,NETWORK_TYPE_NAME:ntL.NETWORK_TYPE_NAME},delNTProm=SITE.deleteSiteNetworkType({id:$scope.aSite.SITE_ID},NTtoDelete).$promise;RemovePromises.push(delNTProm),delete $http.defaults.headers.common["X-HTTP-Method-Override"]}}),$scope.houseDirty===!0&&angular.forEach($scope.siteHouseTypesTable,function(ht){var addHtProm;addHtProm=void 0!==ht.SITE_HOUSING_ID?SITE_HOUSING.update({id:ht.SITE_HOUSING_ID},ht).$promise:SITE.postSiteHousing({id:$scope.aSite.SITE_ID},ht).$promise,AddPromises.push(addHtProm)}),angular.forEach($scope.NetNameList,function(AnnL){if(AnnL.selected===!0){$scope.siteNetworkNames.push(AnnL.NAME);var NNtoAdd={NETWORK_NAME_ID:AnnL.NETWORK_NAME_ID,NAME:AnnL.NAME},addNNProm=SITE.postSiteNetworkName({id:$scope.aSite.SITE_ID},NNtoAdd).$promise;AddPromises.push(addNNProm)}}),angular.forEach($scope.NetTypeList,function(AnTL){if(AnTL.selected===!0){$scope.siteNetworkTypes.push(AnTL.NETWORK_TYPE_NAME);var NTtoAdd={NETWORK_TYPE_ID:AnTL.NETWORK_TYPE_ID,NETWORK_TYPE_NAME:AnTL.NETWORK_TYPE_NAME},addNTProm=SITE.postSiteNetworkType({id:$scope.aSite.SITE_ID},NTtoAdd).$promise;AddPromises.push(addNTProm)}}),$q.all(RemovePromises).then(function(){$q.all(AddPromises).then(function(){var sendBack=[$scope.aSite,$scope.siteNetworkNames,$scope.siteNetworkTypes];$uibModalInstance.close(sendBack),$(".page-loading").addClass("hidden"),toastr.success("Site updated"),$location.path("/Site/"+$scope.aSite.SITE_ID+"/SiteDashboard").replace(),$scope.apply})["catch"](function(msg){console.error(msg)})})["catch"](function(msg){console.error(msg)})},function(errorResponse){toastr.error("Error updating Site: "+errorResponse.statusText)})};$scope.create=function(valid){valid===!0&&($(".page-loading").removeClass("hidden"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",delete $scope.aSite.Creator,$scope.addLandowner===!0&&(void 0!==$scope.landowner.FNAME||void 0!==$scope.landowner.LNAME||void 0!==$scope.landowner.TITLE||void 0!==$scope.landowner.ADDRESS||void 0!==$scope.landowner.CITY||void 0!==$scope.landowner.PRIMARYPHONE)?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.LANDOWNERCONTACT_ID=response.LANDOWNERCONTACTID,postSiteAndParts()},function(errorResponse){$(".page-loading").addClass("hidden"),toastr.error("Error posting landowner: "+errorResponse.statusText)}):postSiteAndParts())};var postSiteAndParts=function(){var createdSiteID=0;SITE.save($scope.aSite,function(response){createdSiteID=response.SITE_ID;var postPromises=($q.defer(),[]);if(angular.forEach($scope.siteHouseTypesTable,function(htype){htype.SITE_ID=createdSiteID,delete htype.TYPE_NAME;var hTPromise=SITE.postSiteHousing({id:createdSiteID},htype).$promise;postPromises.push(hTPromise)}),angular.forEach($scope.NetNameList,function(nName){if(nName.selected===!0){({NETWORK_NAME_ID:nName.NETWORK_NAME_ID,NAME:nName.NAME})}}),angular.forEach($scope.NetTypeList,function(nType){if(nType.selected===!0){({NETWORK_TYPE_ID:nType.NETWORK_TYPE_ID,NETWORK_TYPE_NAME:nType.NETWORK_TYPE_NAME})}}),$scope.disableSensorParts===!1)for(var ps=0;ps<$scope.ProposedSens.length;ps++)if($scope.ProposedSens[ps].selected===!0){var sensorTypeID=$scope.SensorDeployment.filter(function(sd){return sd.DEPLOYMENT_TYPE_ID==$scope.ProposedSens[ps].DEPLOYMENT_TYPE_ID})[0].SENSOR_TYPE_ID,inst={DEPLOYMENT_TYPE_ID:$scope.ProposedSens[ps].DEPLOYMENT_TYPE_ID,SITE_ID:createdSiteID,SENSOR_TYPE_ID:sensorTypeID},instrPromise=INSTRUMENT.save(inst).$promise.then(function(insResponse){var instStat={INSTRUMENT_ID:insResponse.INSTRUMENT_ID,STATUS_TYPE_ID:4,COLLECTION_TEAM_ID:$scope.aSite.MEMBER_ID,TIME_STAMP:new Date,TIME_ZONE:"UTC"};INSTRUMENT_STATUS.save(instStat).$promise}).$promise;postPromises.push(instrPromise)}$q.all(postPromises).then(function(response){$uibModalInstance.dismiss("cancel"),$(".page-loading").addClass("hidden"),$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})},function(errorResponse){toastr.error("Error creating Site: "+errorResponse.statusText)})};if(void 0!==thisSiteStuff){if($scope.aSite=angular.copy(thisSiteStuff[0]),$scope.aSite.SENSOR_NOT_APPROPRIATE>0){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.IS_PERMANENT_HOUSING_INSTALLED="No"}var thisState=$scope.StateList.filter(function(s){return s.STATE_ABBREV==$scope.aSite.STATE})[0];if($scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID}),thisSiteStuff[1].length>0){$scope.originalSiteHousings=thisSiteStuff[1],$scope.showSiteHouseTable=!0,$scope.siteHouseTypesTable=thisSiteStuff[2],$scope.landowner=thisSiteStuff[5],$scope.addLandowner=void 0!==$scope.landowner.FNAME||void 0!==$scope.landowner.LNAME||void 0!==$scope.landowner.ADDRESS||void 0!==$scope.landowner.PRIMARYPHONE?!0:!1;for(var i=0;i<$scope.allHousingTypeList.length;i++){for(var y=0;y<$scope.originalSiteHousings.length;y++)$scope.originalSiteHousings[y].HOUSING_TYPE_ID==$scope.allHousingTypeList[i].HOUSING_TYPE_ID?($scope.allHousingTypeList[i].selected=!0,y=$scope.originalSiteHousings.length):$scope.allHousingTypeList[i].selected=!1;0===$scope.originalSiteHousings.length&&($scope.allHousingTypeList[i].selected=!1)}}if(thisSiteStuff[3].length>0){for(var a=0;a<$scope.NetNameList.length;a++)for(var e=0;e<thisSiteStuff[3].length;e++)thisSiteStuff[3][e].NETWORK_NAME_ID==$scope.NetNameList[a].NETWORK_NAME_ID?($scope.NetNameList[a].selected=!0,e=thisSiteStuff[3].length):$scope.NetNameList[a].selected=!1,0===thisSiteStuff[3].length&&($scope.NetNameList[a].selected=!1);$scope.NetNameList[0].selected===!0&&($scope.checked="Not Defined")}if(thisSiteStuff[4].length>0)for(var ni=0;ni<$scope.NetTypeList.length;ni++)for(var ny=0;ny<thisSiteStuff[4].length;ny++)thisSiteStuff[4][ny].NETWORK_TYPE_ID==$scope.NetTypeList[ni].NETWORK_TYPE_ID?($scope.NetTypeList[ni].selected=!0,ny=thisSiteStuff[4].length):$scope.NetTypeList[ni].selected=!1,0===thisSiteStuff[4].length&&($scope.NetTypeList[ni].selected=!1)}else $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.aSite.Creator=response.FNAME+" "+response.LNAME,$scope.aSite.MEMBER_ID=response.MEMBER_ID,$scope.aSite.IS_PERMANENT_HOUSING_INSTALLED="No",$scope.aSite.ACCESS_GRANTED="Not Needed"},function(errorResponse){toastr.error("Error getting Member info: "+errorResponse.statusText)});$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.HouseTypeClick=function(ht){if($scope.houseDirty=!0,ht.selected===!0){var houseT={TYPE_NAME:ht.TYPE_NAME,HOUSING_TYPE_ID:ht.HOUSING_TYPE_ID,LENGTH:ht.LENGTH,MATERIAL:ht.MATERIAL,NOTES:ht.NOTES,AMOUNT:1};$scope.siteHouseTypesTable.push(houseT),$scope.showSiteHouseTable=!0}if(ht.selected===!1){if(void 0!==$scope.aSite.SITE_ID){var sH_ID=$scope.siteHouseTypesTable.filter(function(h){return h.TYPE_NAME==ht.TYPE_NAME})[0].SITE_HOUSING_ID;$scope.siteHousesToRemove.push(sH_ID)}var i=$scope.siteHouseTypesTable.indexOf($scope.siteHouseTypesTable.filter(function(h){return h.TYPE_NAME==ht.TYPE_NAME})[0]);$scope.siteHouseTypesTable.splice(i,1),0===$scope.siteHouseTypesTable.length&&($scope.showSiteHouseTable=!1)}},$scope.getAddress=function(){var geocoder=new google.maps.Geocoder,latlng=new google.maps.LatLng($scope.aSite.LATITUDE_DD,$scope.aSite.LONGITUDE_DD);geocoder.geocode({latLng:latlng},function(results,status){if(status==google.maps.GeocoderStatus.OK){var address_components=results[0].address_components,components={};$.each(address_components,function(k,v1){$.each(v1.types,function(k2,v2){components[v2]=v1.long_name})}),$scope.aSite.ADDRESS=void 0!==components.street_number?components.street_number+" "+components.route:components.route,$scope.aSite.CITY=components.locality;var thisState=$scope.StateList.filter(function(s){return s.STATE_NAME==components.administrative_area_level_1})[0];void 0!==thisState?($scope.aSite.STATE=thisState.STATE_ABBREV,$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID}),$scope.aSite.COUNTY=components.administrative_area_level_2,$scope.aSite.ZIP=components.postal_code,SITE.query({Latitude:$scope.aSite.LATITUDE_DD,Longitude:$scope.aSite.LONGITUDE_DD,Buffer:5e-4},function(response){var closeSites=response.Sites,modalInstance=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Sites nearby</h3></div><div class="modal-body"><p>There are: {{num}} sites nearby.</p><p ng-if="num > 0"><span>To use one of these sites instead, click on the site name.</span><ul><li ng-repeat="s in siteListNear" style="list-style:none"><a ui-sref="site.dashboard({id: s.SITE_ID})" ng-click="$close()">{{s.SITE_NO}}</a></li></ul></p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.num=closeSites.length,$scope.siteListNear=closeSites},size:"sm"});modalInstance.result.then(function(){$(".page-loading").addClass("hidden")})},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise):toastr.error("The Latitude/Longitude did not return a location within the U.S.")}else toastr.error("There was an error getting address. Please try again.")})},$scope.showLandOwnerPart=function(){$scope.addLandowner=!0},$scope.updateCountyList=function(s){var thisState=$scope.StateList.filter(function(st){return st.STATE_ABBREV==s})[0];$scope.stateCountyList=allCounties.filter(function(c){return c.STATE_ID==thisState.STATE_ID})},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteNetworkNames","thisSiteNetworkTypes","thisSiteHousings","thisSiteOPs","thisSiteSensors","thisSiteHWMs","thisSiteFiles","thisSitePeaks","SITE","LANDOWNER_CONTACT","MEMBER","DEPLOYMENT_TYPE","INSTRUMENT","INSTRUMENT_STATUS","SITE_HOUSING","NETWORK_NAME","allHorDatums","allHorCollMethods","allStates","allCounties","allDeployPriorities","allHousingTypes","allNetworkNames","allNetworkTypes","allDeployTypes","allSensDeps",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSiteNetworkNames,thisSiteNetworkTypes,thisSiteHousings,thisSiteOPs,thisSiteSensors,thisSiteHWMs,thisSiteFiles,thisSitePeaks,SITE,LANDOWNER_CONTACT,MEMBER,DEPLOYMENT_TYPE,INSTRUMENT,INSTRUMENT_STATUS,SITE_HOUSING,NETWORK_NAME,allHorDatums,allHorCollMethods,allStates,allCounties,allDeployPriorities,allHousingTypes,allNetworkNames,allNetworkTypes,allDeployTypes,allSensDeps){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else if($rootScope.thisPage="Site Dashboard",$scope.aSite={},$scope.status={mapOpen:!1,siteOpen:!0,opOpen:!1,sensorOpen:!1,hwmOpen:!1,filesOpen:!1,peakOpen:!1},$scope.thisSiteHouseTypeModel=[],$scope.openSiteCreate=function(){var dropdownParts=[allHorDatums,allHorCollMethods,allStates,allCounties,allHousingTypes,allDeployPriorities,allNetworkNames,allNetworkTypes,allDeployTypes,allSensDeps],modalInstance=$uibModal.open({templateUrl:"SITEmodal.html",controller:"siteModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropDownParts:function(){return dropdownParts},thisSiteStuff:function(){if(void 0!==$scope.aSite.SITE_ID){var origSiteHouses=void 0!==$scope.originalSiteHousings?$scope.originalSiteHousings:[],sHouseTypeModel=$scope.thisSiteHouseTypeModel.length>0?$scope.thisSiteHouseTypeModel:[],sNetNames=void 0!==thisSiteNetworkNames?thisSiteNetworkNames:[],sNetTypes=void 0!==thisSiteNetworkTypes?thisSiteNetworkTypes:[],lo=void 0!==$scope.landowner?$scope.landowner:{},siteRelatedStuff=[$scope.aSite,origSiteHouses,sHouseTypeModel,sNetNames,sNetTypes,lo];return siteRelatedStuff}}}});modalInstance.result.then(function(r){$scope.aSite=r[0],$scope.siteNetworkNames=r[1],$scope.siteNetworkTypes=r[2]})},void 0!==thisSite)if(void 0!==thisSite.SITE_ID){if($scope.aSite=thisSite,$scope.aSite.decDegORdms="dd",$scope.aSite.HorizontalDatum=$scope.aSite.HDATUM_ID>0?allHorDatums.filter(function(hd){return hd.DATUM_ID==$scope.aSite.HDATUM_ID})[0].DATUM_NAME:"---",$scope.aSite.HorizontalCollectMethod=void 0!==$scope.aSite.HCOLLECT_METHOD_ID&&$scope.aSite.HCOLLECT_METHOD_ID>0?allHorCollMethods.filter(function(hc){return hc.HCOLLECT_METHOD_ID==$scope.aSite.HCOLLECT_METHOD_ID})[0].HCOLLECT_METHOD:"---",$scope.aSite.PriorityName=void 0!==$scope.aSite.PRIORITY_ID&&$scope.aSite.PRIORITY_ID>0?allDeployPriorities.filter(function(dp){return dp.PRIORITY_ID==$scope.aSite.PRIORITY_ID})[0].PRIORITY_NAME:"---",thisSiteHousings.length>0){$scope.originalSiteHousings=angular.copy(thisSiteHousings),$scope.showSiteHouseTable=!0;for(var z=0;z<$scope.originalSiteHousings.length;z++){var houseTypeName=allHousingTypes.filter(function(h){return h.HOUSING_TYPE_ID==$scope.originalSiteHousings[z].HOUSING_TYPE_ID})[0].TYPE_NAME,houseT={TYPE_NAME:houseTypeName,HOUSING_TYPE_ID:$scope.originalSiteHousings[z].HOUSING_TYPE_ID,SITE_HOUSING_ID:$scope.originalSiteHousings[z].SITE_HOUSING_ID,LENGTH:$scope.originalSiteHousings[z].LENGTH,MATERIAL:$scope.originalSiteHousings[z].MATERIAL,NOTES:$scope.originalSiteHousings[z].NOTES,AMOUNT:$scope.originalSiteHousings[z].AMOUNT};$scope.thisSiteHouseTypeModel.push(houseT)}}if($scope.siteNetworkNames=[],thisSiteNetworkNames.length>0)for(var a=0;a<thisSiteNetworkNames.length;a++){var nn=allNetworkNames.filter(function(n){return n.NETWORK_NAME_ID==thisSiteNetworkNames[a].NETWORK_NAME_ID})[0];$scope.siteNetworkNames.push(nn.NAME)}if($scope.siteNetworkTypes=[],thisSiteNetworkTypes.length>0)for(var b=0;b<thisSiteNetworkTypes.length;b++){var nt=allNetworkTypes.filter(function(nt){return nt.NETWORK_TYPE_ID==thisSiteNetworkTypes[b].NETWORK_TYPE_ID})[0];$scope.siteNetworkTypes.push(nt.NETWORK_TYPE_NAME)}$scope.sensorNotAppr=null!==$scope.aSite.SENSOR_NOT_APPROPRIATE||$scope.aSite.SENSOR_NOT_APPROPRIATE>0?"Yes":"No",null!==$scope.aSite.MEMBER_ID&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$scope.aSite.MEMBER_ID}).$promise.then(function(response){$scope.aSite.Creator=response.FNAME+" "+response.LNAME},function(error){$scope.aSite.Creator="Not recorded"}).$promise),null!==$scope.aSite.LANDOWNERCONTACT_ID&&void 0!==$scope.aSite.LANDOWNERCONTACT_ID&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SITE.getSiteLandOwner({id:$scope.aSite.SITE_ID},function(response){$scope.landowner=response,$scope.addLandowner=!0},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise)}else toastr.error("This site does not exist"),$(".page-loading").addClass("hidden"),$location.path("/Home").replace(),$scope.apply;else $scope.openSiteCreate()}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("settingsCtrl",["$scope","$rootScope","$cookies","$location","$state",function($scope,$rootScope,$cookies,$location,$state){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings",$rootScope.activeMenu="settings",$scope.settings="Welcome to the new STN Settings Page!!",$scope.changeView=function(view){$state.go(view)})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("resourcesCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$filter","$uibModal","AGENCY","CONTACT_TYPE","DEPLOYMENT_PRIORITY","EVENT_STATUS","EVENT_TYPE","FILE_TYPE","HORIZONTAL_COLL_METHODS","HORIZONTAL_DATUM","HOUSING_TYPE","HWM_QUALITY","HWM_TYPE","INST_COLL_CONDITION","MARKER","NETWORK_NAME","OP_QUALITY","OP_TYPE","SENSOR_BRAND","DEPLOYMENT_TYPE","SENSOR_TYPE","NETWORK_TYPE","STATUS_TYPE","VERTICAL_COLL_METHOD","VERTICAL_DATUM","allStates","allAgencies","allContactTypes","allDeployPriorities","allEventStats","allEventTypes","allFileTypes","allHorCollMethods","allHorDatums","allHouseTypes","allHWMqualities","allHWMtypes","allInstCollectConditions","allMarkers","allNetworkNames","allObjPtQualities","allObjPtTypes","allSensorBrands","allDeploymentTypes","allStatusTypes","allSensorTypes","allNetworkTypes","allVerticalCollMethods","allVerticalDatums",function($scope,$rootScope,$cookies,$location,$state,$http,$filter,$uibModal,AGENCY,CONTACT_TYPE,DEPLOYMENT_PRIORITY,EVENT_STATUS,EVENT_TYPE,FILE_TYPE,HORIZONTAL_COLL_METHODS,HORIZONTAL_DATUM,HOUSING_TYPE,HWM_QUALITY,HWM_TYPE,INST_COLL_CONDITION,MARKER,NETWORK_NAME,OP_QUALITY,OP_TYPE,SENSOR_BRAND,DEPLOYMENT_TYPE,SENSOR_TYPE,NETWORK_TYPE,STATUS_TYPE,VERTICAL_COLL_METHOD,VERTICAL_DATUM,allStates,allAgencies,allContactTypes,allDeployPriorities,allEventStats,allEventTypes,allFileTypes,allHorCollMethods,allHorDatums,allHouseTypes,allHWMqualities,allHWMtypes,allInstCollectConditions,allMarkers,allNetworkNames,allObjPtQualities,allObjPtTypes,allSensorBrands,allDeploymentTypes,allStatusTypes,allSensorTypes,allNetworkTypes,allVerticalCollMethods,allVerticalDatums){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Resources",$scope.accountRole=$cookies.get("usersRole"),$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.lookupForm={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.activeMenu="",$scope.stateList=allStates,$scope.agencyList=allAgencies,$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.newAg={},$scope.showAddAgClicked=function(){$scope.showAddAgForm=!0,$scope.addAgButtonShowing=!1},$scope.NeverMindAg=function(){$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0},$scope.AddAgency=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.save($scope.newAg,function(response){$scope.agencyList.push(response),$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,toastr.success("Agency Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveAgency=function(data,id){
var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.update({id:id},data,function(response){retur=response,toastr.success("Agency Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteAgency=function(ag){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ag},what:function(){return"Agency"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.agencyList.indexOf(ag);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),AGENCY["delete"]({id:ag.AGENCY_ID},ag,function(response){$scope.agencyList.splice(index,1),toastr.success("Agency Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.showStateAbbrev=function(a){var selected=[];return a.STATE&&(selected=$filter("filter")($scope.stateList,{STATE_ABBREV:a.STATE})),selected.length?selected[0].STATE_ABBREV:""},$scope.contactTypeList=allContactTypes,$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,$scope.newCT={},$scope.showAddCTClicked=function(){$scope.showAddCTForm=!0,$scope.addCTButtonShowing=!1},$scope.NeverMindCT=function(){$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0},$scope.AddContactType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.save($scope.newCT,function(response){$scope.contactTypeList.push(response),$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,toastr.success("Contact Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveContactType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Contact Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteContactType=function(ct){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ct},what:function(){return"Contact Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.contactTypeList.indexOf(ct);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),CONTACT_TYPE["delete"]({id:ct.CONTACT_TYPE_ID},ct,function(response){$scope.contactTypeList.splice(index,1),toastr.success("Contact Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.deployPriorityList=allDeployPriorities,$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,$scope.newDP={},$scope.showAddDPClicked=function(){$scope.showAddDPForm=!0,$scope.addDPButtonShowing=!1},$scope.NeverMindDP=function(){$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0},$scope.AddDepPriority=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.save($scope.newDP,function(response){$scope.deployPriorityList.push(response),$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,toastr.success("Deployment Priority Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepPriority=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.update({id:id},data,function(response){retur=response,toastr.success("Deployment Priority Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepPriority=function(dp){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dp},what:function(){return"Deployment Priority"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.deployPriorityList.indexOf(dp);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_PRIORITY["delete"]({id:dp.PRIORITY_ID},dp,function(response){$scope.deployPriorityList.splice(index,1),toastr.success("Deployment Priority Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventStatList=allEventStats,$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,$scope.newES={},$scope.showAddESClicked=function(){$scope.showAddESForm=!0,$scope.addESButtonShowing=!1},$scope.NeverMindES=function(){$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0},$scope.AddEventStat=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.save($scope.newES,function(response){$scope.eventStatList.push(response),$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,toastr.success("Event Status Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventStat=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.update({id:id},data,function(response){retur=response,toastr.success("Event Status Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventStat=function(es){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return es},what:function(){return"Event Status"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventStatList.indexOf(es);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_STATUS["delete"]({id:es.EVENT_STATUS_ID},es,function(response){$scope.eventStatList.splice(index,1),toastr.success("Event Status Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventTypeList=allEventTypes,$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,$scope.newET={},$scope.showAddETClicked=function(){$scope.showAddETForm=!0,$scope.addETButtonShowing=!1},$scope.NeverMindET=function(){$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0},$scope.AddEventType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.save($scope.newET,function(response){$scope.eventTypeList.push(response),$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,toastr.success("Event Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Event Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventType=function(et){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return et},what:function(){return"Event Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventTypeList.indexOf(et);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_TYPE["delete"]({id:et.EVENT_TYPE_ID},et,function(response){$scope.eventTypeList.splice(index,1),toastr.success("Event Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.fileTypeList=allFileTypes,$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,$scope.newFT={},$scope.showAddFTClicked=function(){$scope.showAddFTForm=!0,$scope.addFTButtonShowing=!1},$scope.NeverMindFT=function(){$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0},$scope.AddFileType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.save($scope.newFT,function(response){$scope.fileTypeList.push(response),$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,toastr.success("File Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveFileType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.update({id:id},data,function(response){retur=response,toastr.success("File Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteFileType=function(ft){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ft},what:function(){return"File Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.fileTypeList.indexOf(ft);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE_TYPE["delete"]({id:ft.FILETYPE_ID},ft,function(response){$scope.fileTypeList.splice(index,1),toastr.success("File Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horColMethList=allHorCollMethods,$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,$scope.newHCM={},$scope.showAddHCMClicked=function(){$scope.showAddHCMForm=!0,$scope.addHCMButtonShowing=!1},$scope.NeverMindHCM=function(){$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0},$scope.AddHorCollMethod=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.save($scope.newHCM,function(response){$scope.horColMethList.push(response),$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,toastr.success("Horizontal Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorCollMethod=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorCollMethod=function(hcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hcm},what:function(){return"Horizontal Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horColMethList.indexOf(hcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_COLL_METHODS["delete"]({id:hcm.HCOLLECT_METHOD_ID},hcm,function(response){$scope.horColMethList.splice(index,1),toastr.success("Horizontal Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horDatList=allHorDatums,$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,$scope.newHD={},$scope.showAddHDClicked=function(){$scope.showAddHDForm=!0,$scope.addHDButtonShowing=!1},$scope.NeverMindHD=function(){$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0},$scope.AddHorDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.save($scope.newHD,function(response){$scope.horDatList.push(response),$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,toastr.success("Horizontal Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorDatum=function(hd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hd},what:function(){return"Horizontal Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horDatList.indexOf(hd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_DATUM["delete"]({id:hd.DATUM_ID},hd,function(response){$scope.horDatList.splice(index,1),toastr.success("Horizontal Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.houseTypeList=allHouseTypes,$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,$scope.newHT={},$scope.showAddHTClicked=function(){$scope.showAddHTForm=!0,$scope.addHTButtonShowing=!1},$scope.NeverMindHT=function(){$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0},$scope.AddHouseType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.save($scope.newHT,function(response){$scope.houseTypeList.push(response),$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,toastr.success("Housing Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHouseType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Housing Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHouseType=function(ht){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ht},what:function(){return"Housing Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.houseTypeList.indexOf(ht);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HOUSING_TYPE["delete"]({id:ht.HOUSING_TYPE_ID},ht,function(response){$scope.houseTypeList.splice(index,1),toastr.success("Housing Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmQualList=allHWMqualities,$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,$scope.newHWMQ={},$scope.showAddHWMQClicked=function(){$scope.showAddHWMQForm=!0,$scope.addHWMQButtonShowing=!1},$scope.NeverMindHWMQ=function(){$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0},$scope.AddHwmQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.save($scope.newHWMQ,function(response){$scope.hwmQualList.push(response),$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,toastr.success("HWM Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("HWM Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmQuality=function(hwmq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmq},what:function(){return"HWM Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmQualList.indexOf(hwmq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_QUALITY["delete"]({id:hwmq.HWM_QUALITY_ID},hwmq,function(response){$scope.hwmQualList.splice(index,1),toastr.success("HWM Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmTypeList=allHWMtypes,$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,$scope.newHWMT={},$scope.showAddHWMTClicked=function(){$scope.showAddHWMTForm=!0,$scope.addHWMTButtonShowing=!1},$scope.NeverMindHWMT=function(){$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0},$scope.AddHwmType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.save($scope.newHWMT,function(response){$scope.hwmTypeList.push(response),$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,toastr.success("HWM Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.update({id:id},data,function(response){retur=response,toastr.success("HWM Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmType=function(hwmt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmt},what:function(){return"HWM Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmTypeList.indexOf(hwmt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_TYPE["delete"]({id:hwmt.HWM_TYPE_ID},hwmt,function(response){$scope.hwmTypeList.splice(index,1),toastr.success("HWM Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.instColCondList=allInstCollectConditions,$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,$scope.newICC={},$scope.showAddICCClicked=function(){$scope.showAddICCForm=!0,$scope.addICCButtonShowing=!1},$scope.NeverMindICC=function(){$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0},$scope.AddInstColCond=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.save($scope.newICC,function(response){$scope.instColCondList.push(response),$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,toastr.success("Instrument Collection Condition Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveInstColCond=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.update({id:id},data,function(response){retur=response,toastr.success("Instrument Collection Condition Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteInstColCond=function(icc){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return icc},what:function(){return"Instrument Collection Condition"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.instColCondList.indexOf(icc);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INST_COLL_CONDITION["delete"]({id:icc.ID},icc,function(response){$scope.instColCondList.splice(index,1),toastr.success("Instrument Collection Condition Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.markList=allMarkers,$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,$scope.newM={},$scope.showAddMClicked=function(){$scope.showAddMForm=!0,$scope.addMButtonShowing=!1},$scope.NeverMindM=function(){$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0},$scope.AddMarker=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.save($scope.newM,function(response){$scope.markList.push(response),$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,toastr.success("Marker Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveMarker=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.update({id:id},data,function(response){retur=response,toastr.success("Marker Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteMarker=function(m){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return m},what:function(){return"Marker"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.markList.indexOf(m);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MARKER["delete"]({id:m.MARKER_ID},m,function(response){$scope.markList.splice(index,1),toastr.success("Marker Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netNameList=allNetworkNames,$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,$scope.newNN={},$scope.showAddNNClicked=function(){$scope.showAddNNForm=!0,$scope.addNNButtonShowing=!1},$scope.NeverMindNN=function(){$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0},$scope.AddNetworkName=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.save($scope.newNN,function(response){$scope.netNameList.push(response),$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,toastr.success("Network Name Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetworkName=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.update({id:id},data,function(response){retur=response,toastr.success("Network Name Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetworkName=function(nn){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nn},what:function(){return"Network Name"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netNameList.indexOf(nn);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_NAME["delete"]({id:nn.NETWORK_NAME_ID},nn,function(response){$scope.netNameList.splice(index,1),toastr.success("Network Name Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opQualList=allObjPtQualities,$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,$scope.newOPQ={},$scope.showAddOPQClicked=function(){$scope.showAddOPQForm=!0,$scope.addOPQButtonShowing=!1},$scope.NeverMindOPQ=function(){$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0},$scope.AddOPQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.save($scope.newOPQ,function(response){$scope.opQualList.push(response),$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,toastr.success("Objective Point Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPQuality=function(opq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opq},what:function(){return"Objective Point Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opQualList.indexOf(opq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_QUALITY["delete"]({id:opq.OP_QUALITY_ID},opq,function(response){$scope.opQualList.splice(index,1),toastr.success("Objective Point Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opTypeList=allObjPtTypes,$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,$scope.newOPT={},$scope.showAddOPTClicked=function(){$scope.showAddOPTForm=!0,$scope.addOPTButtonShowing=!1},$scope.NeverMindOPT=function(){$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0},$scope.AddOPType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.save($scope.newOPT,function(response){$scope.opTypeList.push(response),$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,toastr.success("Objective Point Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPType=function(opt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opt},what:function(){return"Objective Point Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opTypeList.indexOf(opt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_TYPE["delete"]({id:opt.OBJECTIVE_POINT_TYPE_ID},opt,function(response){$scope.opTypeList.splice(index,1),toastr.success("Objective Point Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensBrandList=allSensorBrands,$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,$scope.newSB={},$scope.showAddSBClicked=function(){$scope.showAddSBForm=!0,$scope.addSBButtonShowing=!1},$scope.NeverMindSB=function(){$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0},$scope.AddSensorBrand=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.save($scope.newSB,function(response){$scope.sensBrandList.push(response),$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,toastr.success("Sensor Brand Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveSensorBrand=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.update({id:id},data,function(response){retur=response,toastr.success("Sensor Brand Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteSensorBrand=function(sb){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return sb},what:function(){return"Sensor Brand"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.sensBrandList.indexOf(sb);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),SENSOR_BRAND["delete"]({id:sb.SENSOR_BRAND_ID},sb,function(response){$scope.sensBrandList.splice(index,1),toastr.success("Sensor Brand Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.depTypeList=allDeploymentTypes,$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,$scope.newDT={},$scope.showAddDTClicked=function(){$scope.showAddDTForm=!0,$scope.addDTButtonShowing=!1},$scope.NeverMindDT=function(){$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0},$scope.AddDepType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_TYPE.save($scope.newDT,function(response){$scope.depTypeList.push(response),$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,toastr.success("Deployment Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Deployment Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepType=function(dt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dt},what:function(){return"Deployment Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.depTypeList.indexOf(dt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_TYPE["delete"]({id:dt.DEPLOYMENT_TYPE_ID},dt,function(response){$scope.depTypeList.splice(index,1),toastr.success("Deployment Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.statTypeList=allStatusTypes,$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,$scope.newStatT={},$scope.showAddStatTClicked=function(){$scope.showAddStatTForm=!0,$scope.addStatTButtonShowing=!1},$scope.NeverMindStatT=function(){$scope.newStatT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0},$scope.AddStatusType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.save($scope.newStatT,function(response){$scope.statTypeList.push(response),
$scope.newStatTT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,toastr.success("Status Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveStatusType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Status Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteStatusType=function(statT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return statT},what:function(){return"Status Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.statTypeList.indexOf(statT);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),STATUS_TYPE["delete"]({id:statT.STATUS_TYPE_ID},statT,function(response){$scope.statTypeList.splice(index,1),toastr.success("Status Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensTypeList=allSensorTypes,$scope.newDepTypeRelating=[],$scope.commaSepDepMETHODS=[],$scope.formattedSensTypeList=[],$scope.sensTypeList.forEach(function(sensType){SENSOR_TYPE.getSensorDeploymentTypes({id:sensType.SENSOR_TYPE_ID},function(response){var deps=response;sensType.DepTypes=[];var DepMStrings=[];sensType.DepMETHODStrings="",deps.length>0&&deps.forEach(function(d){sensType.DepTypes.push(d.DEPLOYMENT_TYPE_ID),DepMStrings.push(d.METHOD),sensType.DepMETHODStrings=DepMStrings.join(", ")}),$scope.formattedSensTypeList.push(sensType)}).$promise}),$scope.showDepTypes=function(SenT){var selected=[];return angular.forEach($scope.depTypeList,function(s){SenT.DepTypes.indexOf(s.DEPLOYMENT_TYPE_ID)>=0&&selected.push(s.METHOD)}),selected.length?selected.join(", "):""},$scope.removeTheseDepTypes=[],$scope.checkListCheck=function(originalChecked,nowChecked){nowChecked.length<originalChecked.length&&angular.forEach(originalChecked,function(oc){if(nowChecked.indexOf(oc)<0){var deleteDep=$scope.depTypeList.filter(function(dt){return dt.DEPLOYMENT_TYPE_ID==oc})[0];if($scope.removeTheseDepTypes.length>0)for(var d=0;d<$scope.removeTheseDepTypes.length;d++)$scope.removeTheseDepTypes[d].DEPLOYMENT_TYPE_ID==deleteDep.DEPLOYMENT_TYPE_ID?d=$scope.newDepTypeRelating.length:$scope.removeTheseDepTypes.push(deleteDep);else $scope.removeTheseDepTypes.push(deleteDep)}})},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newSenT={},$scope.showAddSenTClicked=function(){$scope.showAddSenTForm=!0,$scope.addSenTButtonShowing=!1},$scope.NeverMindSenT=function(){$scope.newSenT={},$scope.newDepTypeRelating=[],angular.forEach($scope.depTypeList,function(d){d.selected=!1}),$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0},$scope.addDepTypeToNewSenT=function(dt){if(dt.selected===!0){if($scope.newDepTypeRelating.length>0)for(var d=0;d<$scope.newDepTypeRelating.length;d++)$scope.newDepTypeRelating[d].DEPLOYMENT_TYPE_ID==dt.DEPLOYMENT_TYPE_ID?d=$scope.newDepTypeRelating.length:($scope.newDepTypeRelating.push(dt),d=$scope.newDepTypeRelating.length);0===$scope.newDepTypeRelating.length&&$scope.newDepTypeRelating.push(dt)}},$scope.AddSensorType=function(valid){if(valid){var newSensor={},relatedDeps=[];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_TYPE.save($scope.newSenT,function(response){newSensor=response,$scope.newSenT={},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newDepTypeRelating.length>0&&angular.forEach($scope.newDepTypeRelating,function(ndt){delete ndt.selected,relatedDeps.push(ndt.DEPLOYMENT_TYPE_ID),SENSOR_TYPE.addSensorDeploymentType({id:newSensor.SENSOR_TYPE_ID},ndt,function(response1){},function(errorResponse){errorResponse.statusText})}),newSensor.DepTypes=relatedDeps,$scope.formattedSensTypeList.push(newSensor),toastr.success("Sensor Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})}},$scope.saveSensorType=function(data,id){var retur=!1;$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var DTs=({SENSOR_TYPE_ID:data.SENSOR_TYPE_ID,SENSOR:data.SENSOR},[]);return angular.forEach($scope.depTypeList,function(s){if(data.DepTypes.indexOf(s.DEPLOYMENT_TYPE_ID)>=0){var thisDT={DEPLOYMENT_TYPE_ID:s.DEPLOYMENT_TYPE_ID,METHOD:s.METHOD};DTs.push(thisDT)}}),SENSOR_TYPE.update({id:id},data,function(response){retur=response,angular.forEach(DTs,function(dt){SENSOR_TYPE.addSensorDeploymentType({id:id},dt,function(response1){toastr.success("Deployment Type is now related")},function(errorResponse1){errorResponse1.statusText})}),toastr.success("Sensor Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}).$promise.then(angular.forEach($scope.removeTheseDepTypes,function(rdt){SENSOR_TYPE.removeSensorDeploymentType({id:id},rdt,function(response2){toastr.success("Deployment Type is no longer related")},function(errorResponse){errorResponse.statusText})})),retur},$scope.deleteSensorType=function(senT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return senT},what:function(){return"Sensor Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.formattedSensTypeList.indexOf(senT),ST={SENSOR_TYPE_ID:senT.SENSOR_TYPE_ID,SENSOR:senT.SENSOR};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),angular.forEach($scope.depTypeList,function(s){if(senT.DepTypes.indexOf(s.DEPLOYMENT_TYPE_ID)>=0){var thisDT={DEPLOYMENT_TYPE_ID:s.DEPLOYMENT_TYPE_ID,METHOD:s.METHOD};SENSOR_TYPE.removeSensorDeploymentType({id:ST.SENSOR_TYPE_ID},thisDT,function(response2){})}}),SENSOR_TYPE["delete"]({id:ST.SENSOR_TYPE_ID},ST,function(response){$scope.formattedSensTypeList.splice(index,1),toastr.success("Sensor Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netTypeList=allNetworkTypes,$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,$scope.newNT={},$scope.showAddNTClicked=function(){$scope.showAddNTForm=!0,$scope.addNTButtonShowing=!1},$scope.NeverMindNT=function(){$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0},$scope.AddNetType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.save($scope.newNT,function(response){$scope.netTypeList.push(response),$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,toastr.success("Network Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Network Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetType=function(nt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nt},what:function(){return"Network Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netTypeList.indexOf(nt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_TYPE["delete"]({id:nt.NETWORK_TYPE_ID},nt,function(response){$scope.netTypeList.splice(index,1),toastr.success("Network Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertColMethList=allVerticalCollMethods,$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,$scope.newVCM={},$scope.showAddVCMClicked=function(){$scope.showAddVCMForm=!0,$scope.addVCMButtonShowing=!1},$scope.NeverMindVCM=function(){$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0},$scope.AddVertColMeth=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.save($scope.newVCM,function(response){$scope.vertColMethList.push(response),$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,toastr.success("Vertical Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertColMeth=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.update({id:id},data,function(response){retur=response,toastr.success("Vertical Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertColMeth=function(vcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vcm},what:function(){return"Vertical Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertColMethList.indexOf(vcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_COLL_METHOD["delete"]({id:vcm.VCOLLECT_METHOD_ID},vcm,function(response){$scope.vertColMethList.splice(index,1),toastr.success("Vertical Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertDatList=allVerticalDatums,$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,$scope.newVD={},$scope.showAddVDClicked=function(){$scope.showAddVDForm=!0,$scope.addVDButtonShowing=!1},$scope.NeverMindVD=function(){$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0},$scope.AddVertDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.save($scope.newVD,function(response){$scope.vertDatList.push(response),$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,toastr.success("Vertical Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Vertical Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertDatum=function(vd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vd},what:function(){return"Vertical Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertDatList.indexOf(vd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_DATUM["delete"]({id:vd.DATUM_ID},vd,function(response){$scope.vertDatList.splice(index,1),toastr.success("Vertical Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("sensorModalCtrl",["$scope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","allDropdowns","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS",function($scope,$timeout,$cookies,$http,$uibModalInstance,$uibModal,allDropdowns,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS){$(".page-loading").addClass("hidden"),$scope.sensorTypeList=allDropdowns[0],$scope.sensorBrandList=allDropdowns[1],$scope.houseTypeList=allDropdowns[2],$scope.sensorDeployList=allDropdowns[3],$scope.eventList=allDropdowns[4],$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole"),$scope.showEventDD=!1,$scope.adminChanged={},$scope.IntervalType={},$scope.whichButton="",$scope.dateOptions={startingDay:1,showWeeks:!1};var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.EVENT_ID==$scope.adminChanged.EVENT_ID})[0].EVENT_NAME},$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];for(var matchingSensDeplist=$scope.sensorDeployList.filter(function(sd){return sd.SENSOR_TYPE_ID==$scope.aSensor.SENSOR_TYPE_ID}),y=0;y<matchingSensDeplist.length;y++)for(var i=0;i<$scope.depTypeList.length;i++)matchingSensDeplist[y].DEPLOYMENT_TYPE_ID==$scope.depTypeList[i].DEPLOYMENT_TYPE_ID&&($scope.filteredDeploymentTypes.push($scope.depTypeList[i]),i=$scope.depTypeList.length)},$scope.LoggedInMember=allMembers.filter(function(m){return m.MEMBER_ID==$cookies.get("mID")})[0],$scope.aSensor={},$scope.aSensStatus={},$scope.thisSensorSite=SensorSite,$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aSensStatus.TIME_ZONE){var utcDateTime=new Date($scope.aSensStatus.TIME_STAMP).toUTCString();$scope.aSensStatus.TIME_STAMP=utcDateTime,$scope.aSensStatus.TIME_ZONE="UTC"}else{var i=$scope.aSensStatus.TIME_STAMP.toString().indexOf("GMT")+3;$scope.aSensStatus.TIME_STAMP=$scope.aSensStatus.TIME_STAMP.toString().substring(0,i)}};if($scope.save=function(){if($scope.SensorForm.$valid){var updatedSensor={},updatedSenStat={};void 0!==$scope.adminChanged.EVENT_ID&&($scope.aSensor.EVENT_ID=$scope.adminChanged.EVENT_ID),"Minutes"==$scope.IntervalType.type&&($scope.aSensor.INTERVAL=60*$scope.aSensor.INTERVAL),dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.aSensor.INSTRUMENT_ID},$scope.aSensor).$promise.then(function(response){updatedSensor=response,updatedSensor.Deployment_Type=$scope.depTypeList.filter(function(d){return d.DEPLOYMENT_TYPE_ID==$scope.aSensor.DEPLOYMENT_TYPE_ID})[0].METHOD,updatedSensor.Housing_Type=$scope.houseTypeList.filter(function(h){return h.HOUSING_TYPE_ID==$scope.aSensor.HOUSING_TYPE_ID})[0].TYPE_NAME,updatedSensor.Sensor_Brand=$scope.sensorBrandList.filter(function(s){return s.SENSOR_BRAND_ID==$scope.aSensor.SENSOR_BRAND_ID})[0].BRAND_NAME,updatedSensor.Sensor_Type=$scope.sensorTypeList.filter(function(t){return t.SENSOR_TYPE_ID==$scope.aSensor.SENSOR_TYPE_ID})[0].SENSOR,INSTRUMENT_STATUS.update({id:$scope.aSensStatus.INSTRUMENT_STATUS_ID},$scope.aSensStatus).$promise.then(function(statResponse){updatedSenStat=statResponse;var sensorObjectToSendBack={Instrument:updatedSensor,InstrumentStats:[updatedSenStat]};$timeout(function(){toastr.success("Sensor updated");var state=$scope.whichButton,sendBack=[sensorObjectToSendBack,state];$uibModalInstance.close(sendBack)})})})}},$scope.deploy=function(){if(this.SensorForm.$valid){"Minutes"==$scope.IntervalType.type&&($scope.aSensor.INTERVAL=60*$scope.aSensor.INTERVAL),$scope.aSensor.EVENT_ID=$cookies.get("SessionEventID"),$scope.aSensor.SITE_ID=SensorSite.SITE_ID,dealWithTimeStampb4Send(),$scope.aSensStatus.STATUS_TYPE_ID=1,$scope.aSensStatus.COLLECTION_TEAM_ID=$cookies.get("mID");var createdSensor={},depSenStat={};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSensor.INSTRUMENT_ID?INSTRUMENT.update({id:$scope.aSensor.INSTRUMENT_ID},$scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.Deployment_Type=$scope.aSensor.Deployment_Type,$scope.aSensStatus.INSTRUMENT_ID=response.INSTRUMENT_ID,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){depSenStat=statResponse;var sensorObjectToSendBack={Instrument:createdSensor,InstrumentStats:[depSenStat,$scope.previousStateStatus]};$timeout(function(){toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[sensorObjectToSendBack,state];$uibModalInstance.close(sendBack)})})}):INSTRUMENT.save($scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.Deployment_Type=null!==response.DEPLOYMENT_TYPE_ID?$scope.depTypeList.filter(function(d){return d.DEPLOYMENT_TYPE_ID==response.DEPLOYMENT_TYPE_ID})[0].METHOD:"",$scope.aSensStatus.INSTRUMENT_ID=response.INSTRUMENT_ID,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){createdSenStat=statResponse;var sensorObjectToSendBack={Instrument:createdSensor,InstrumentStats:[createdSenStat]};toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[sensorObjectToSendBack,state];$uibModalInstance.close(sendBack)})})}},$scope.deleteS=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aSensor},what:function(){return"Sensor"}}});DeleteModalInstance.result.then(function(sensorToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:sensorToRemove.INSTRUMENT_ID}).$promise.then(function(){toastr.success("Sensor Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},"empty"!=thisSensor)if($scope.aSensor=angular.copy(thisSensor.Instrument),$scope.aSensStatus=angular.copy(thisSensor.InstrumentStats[0]),$scope.getDepTypes(),$scope.IntervalType.type="Seconds","Proposed"==thisSensor.InstrumentStats[0].Status){$scope.previousStateStatus=angular.copy(thisSensor.InstrumentStats[0]),$scope.whichButton="deployP",$scope.aSensor.INTERVAL=0===$scope.aSensor.INTERVAL?"":$scope.aSensor.INTERVAL,$scope.aSensStatus.Status="Deployed";var timeParts=getTimeZoneStamp();$scope.aSensStatus.TIME_STAMP=timeParts[0],$scope.aSensStatus.TIME_ZONE=timeParts[1],$scope.aSensStatus.MEMBER_ID=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember}else $scope.whichButton="edit",$scope.EventName=$scope.eventList.filter(function(e){return e.EVENT_ID==$scope.aSensor.EVENT_ID})[0].EVENT_NAME,$scope.aSensStatus.TIME_STAMP=new Date($scope.aSensStatus.TIME_STAMP),$scope.Deployer=null!==$scope.aSensStatus.MEMBER_ID||void 0!==$scope.aSensStatus.MEMBER_ID?allMembers.filter(function(m){return m.MEMBER_ID==$scope.aSensStatus.MEMBER_ID})[0]:{};else{$scope.whichButton="deploy",$scope.IntervalType.type="Seconds";var DeptimeParts=getTimeZoneStamp();$scope.aSensStatus.TIME_STAMP=DeptimeParts[0],$scope.aSensStatus.TIME_ZONE=DeptimeParts[1],$scope.aSensStatus.MEMBER_ID=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember}}]),ModalControllers.controller("sensorRetrievalModalCtrl",["$scope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","thisSensor","SensorSite","siteOPs","allEventList","allMembers","allStatusTypes","allInstCollCond","INSTRUMENT","INSTRUMENT_STATUS",function($scope,$timeout,$cookies,$http,$uibModalInstance,$uibModal,thisSensor,SensorSite,siteOPs,allEventList,allMembers,allStatusTypes,allInstCollCond,INSTRUMENT,INSTRUMENT_STATUS){$(".page-loading").addClass("hidden"),$scope.aSensor=thisSensor.Instrument,$scope.EventName=allEventList.filter(function(r){return r.EVENT_ID==$scope.aSensor.EVENT_ID})[0].EVENT_NAME,$scope.depSensStatus=thisSensor.InstrumentStats[0],$scope.Deployer=allMembers.filter(function(m){return m.MEMBER_ID==$scope.depSensStatus.MEMBER_ID})[0],$scope.whichButton="Retrieve",$scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.STATUS||"Lost"==s.STATUS}),$scope.collectCondList=allInstCollCond,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole"),$scope.aRetrieval={TIME_STAMP:new Date,TIME_ZONE:"CST",INSTRUMENT_ID:$scope.aSensor.INSTRUMENT_ID,MEMBER_ID:$cookies.get("mID")},$scope.Retriever=allMembers.filter(function(am){return am.MEMBER_ID==$cookies.get("mID")})[0],$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.retrieveS=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedSensor={},createRetSens={};INSTRUMENT.update({id:$scope.aSensor.INSTRUMENT_ID},$scope.aSensor).$promise.then(function(response){updatedSensor=response,updatedSensor.Deployment_Type=$scope.aSensor.Deployment_Type,INSTRUMENT_STATUS.save($scope.aRetrieval).$promise.then(function(statResponse){createRetSens=statResponse;var sensorObjectToSendBack={Instrument:updatedSensor,InstrumentStats:[createRetSens,$scope.depSensStatus]};$timeout(function(){toastr.success("Sensor retrieved");var state="retrieved",sendBack=[sensorObjectToSendBack,state];$uibModalInstance.close(sendBack)})})})}}}]),ModalControllers.controller("fullSensorModalCtrl",["$scope","$filter","$timeout","$cookies","$http","$uibModalInstance","$uibModal","allDepDropdowns","allStatusTypes","allInstCollCond","allEvents","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS",function($scope,$filter,$timeout,$cookies,$http,$uibModalInstance,$uibModal,allDepDropdowns,allStatusTypes,allInstCollCond,allEvents,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS){$(".page-loading").addClass("hidden"),$scope.sensorTypeList=allDepDropdowns[0],$scope.sensorBrandList=allDepDropdowns[1],$scope.houseTypeList=allDepDropdowns[2],$scope.sensorDeployList=allDepDropdowns[3],$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole"),$scope.view={val:"detail"},$scope.thisSensorSite=SensorSite,$scope.sensor=thisSensor.Instrument,$scope.DeployedSensorStat=thisSensor.InstrumentStats.filter(function(inst){return"Deployed"===inst.Status}),$scope.DeployedSensorStat.TIME_STAMP=new Date($scope.DeployedSensorStat.TIME_STAMP),$scope.Deployer=allMembers.filter(function(m){return m.MEMBER_ID===$scope.DeployedSensorStat.MEMBER_ID})[0],$scope.RetrievedSensorStat=thisSensor.InstrumentStats.filter(function(inst){return"Retrieved"===inst.Status}),$scope.RetrievedSensorStat.TIME_STAMP=new Date($scope.RetrievedSensorStat.TIME_STAMP),$scope.Retriever=allMembers.filter(function(m){return m.MEMBER_ID===$scope.RetrievedSensorStat.MEMBER_ID})[0],$scope.EventName=allEvents.filter(function(e){return e.EVENT_ID===$scope.sensor.EVENT_ID})[0].EVENT_NAME,2===$scope.RetrievedSensorStat.STATUS_TYPE_ID&&($scope.statusTypeList=allStatusTypes.filter(function(s){return"Lost"==s.STATUS})),3===$scope.RetrievedSensorStat.STATUS_TYPE_ID&&($scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.STATUS})),$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];for(var matchingSensDeplist=$scope.sensorDeployList.filter(function(sd){return sd.SENSOR_TYPE_ID==$scope.sensor.SENSOR_TYPE_ID}),y=0;y<matchingSensDeplist.length;y++)for(var i=0;i<$scope.depTypeList.length;i++)matchingSensDeplist[y].DEPLOYMENT_TYPE_ID==$scope.depTypeList[i].DEPLOYMENT_TYPE_ID&&($scope.filteredDeploymentTypes.push($scope.depTypeList[i]),i=$scope.depTypeList.length)},$scope.getDepTypes(),$scope.cancel=function(){$uibModalInstance.dismiss("cancel")};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aSensStatus.TIME_ZONE){var utcDateTime=new Date($scope.aSensStatus.TIME_STAMP).toUTCString();$scope.aSensStatus.TIME_STAMP=utcDateTime,$scope.aSensStatus.TIME_ZONE="UTC"}else{var i=$scope.aSensStatus.TIME_STAMP.toString().indexOf("GMT")+3;$scope.aSensStatus.TIME_STAMP=$scope.aSensStatus.TIME_STAMP.toString().substring(0,i)}};$scope.saveDeployed=function(valid,sensorToUpdate){if(valid){"Minutes"==$scope.IntervalType.type&&($scope.sensor.INTERVAL=60*$scope.sensor.INTERVAL),dealWithTimeStampb4Send()}},$scope.saveRetrieved=function(valid,sensorToUpdate){if(valid){"Minutes"==$scope.IntervalType.type&&($scope.sensor.INTERVAL=60*$scope.sensor.INTERVAL),dealWithTimeStampb4Send()}},$scope.ventOptions=[{value:1,text:"Yes"},{value:2,text:"No"}],$scope.showVentedOptions=function(){var selected=$filter("filter")($scope.ventOptions,{text:$scope.sensor.VENTED});return $scope.sensor.VENTED&&selected.length?selected[0]:""},$scope.IntervalType="Seconds",$scope.intervalOptions=[{value:1,text:"Seconds"},{value:2,text:"Minutes"}],$scope.showIntervalOptions=function(){var selected=$filter("filter")($scope.intervalOptions,{text:$scope.IntervalType});return $scope.IntervalType&&selected.length?selected[0].text:""}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("sensorCtrl",["$scope","$q","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteSensors","allSensorBrands","allDeployTypes","allSensorTypes","allSensDeps","allHousingTypes","allEvents","INSTRUMENT","INSTRUMENT_STATUS","SITE","MEMBER","DEPLOYMENT_TYPE","STATUS_TYPE","INST_COLL_CONDITION",function($scope,$q,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSiteSensors,allSensorBrands,allDeployTypes,allSensorTypes,allSensDeps,allHousingTypes,allEvents,INSTRUMENT,INSTRUMENT_STATUS,SITE,MEMBER,DEPLOYMENT_TYPE,STATUS_TYPE,INST_COLL_CONDITION){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.sensorCount={total:thisSiteSensors.length},$scope.deployTypeList=angular.copy(allDeployTypes);for(var tempDepTypeID=0,d=0;d<$scope.deployTypeList.length;d++)"Temperature"===$scope.deployTypeList[d].METHOD&&(tempDepTypeID=$scope.deployTypeList[d].DEPLOYMENT_TYPE_ID,$scope.deployTypeList[d].METHOD="Temperature (Met sensor)");$scope.deployTypeList.push({DEPLOYMENT_TYPE_ID:tempDepTypeID,METHOD:"Temperature (Pressure Transducer)"}),$scope.sensDepTypes=allSensDeps,$scope.showProposed=!1,$scope.SiteSensors=thisSiteSensors,$scope.showHideProposed=function(){$scope.showProposed=!$scope.showProposed},$scope.AddProposed=function(){for(var proposedToAdd={},Time_STAMP=new Date,dt=0;dt<$scope.deployTypeList.length;dt++)$scope.deployTypeList[dt].selected===!0&&(proposedToAdd="Temp"==$scope.deployTypeList[dt].METHOD.substring(0,4)?{DEPLOYMENT_TYPE_ID:$scope.deployTypeList[dt].DEPLOYMENT_TYPE_ID,SITE_ID:thisSite.SITE_ID,SENSOR_TYPE_ID:"Temperature (Pressure Transducer)"==$scope.deployTypeList[dt].METHOD?1:2,EVENT_ID:void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):null,Deployment_Type:$scope.deployTypeList[dt].METHOD}:{DEPLOYMENT_TYPE_ID:$scope.deployTypeList[dt].DEPLOYMENT_TYPE_ID,SITE_ID:thisSite.SITE_ID,SENSOR_TYPE_ID:$scope.sensDepTypes.filter(function(sdt){return sdt.DEPLOYMENT_TYPE_ID==$scope.deployTypeList[dt].DEPLOYMENT_TYPE_ID})[0].SENSOR_TYPE_ID,EVENT_ID:void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):null,Deployment_Type:$scope.deployTypeList[dt].METHOD},$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save(proposedToAdd).$promise.then(function(response){proposedToAdd.INSTRUMENT_ID=response.INSTRUMENT_ID;var propStatToAdd={INSTRUMENT_ID:response.INSTRUMENT_ID,STATUS_TYPE_ID:4,MEMBER_ID:$cookies.get("mID"),TIME_STAMP:Time_STAMP,TIME_ZONE:"UTC"};INSTRUMENT_STATUS.save(propStatToAdd).$promise.then(function(statResponse){statResponse.Status="Proposed";for(var instToPushToList={Instrument:proposedToAdd,InstrumentStats:[statResponse]},dep=0;dep<$scope.deployTypeList.length;dep++)$scope.deployTypeList[dep].selected=!1;$timeout(function(){$scope.showProposed=!1,$scope.SiteSensors.push(instToPushToList),$scope.sensorCount={total:$scope.SiteSensors.length}})})}))},$scope.showRetrieveModal=function(sensorClicked){var indexClicked=$scope.SiteSensors.indexOf(sensorClicked);$(".page-loading").removeClass("hidden");var modalInstance=$uibModal.open({templateUrl:"SensorRetrievalModal.html",controller:"sensorRetrievalModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{desiredAction:function(){return actionDesired},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},allEventList:function(){return allEvents},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.SITE_ID}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise}}});modalInstance.result.then(function(retrievedSensor){if("retrieved"==retrievedSensor[1]&&($scope.SiteSensors[indexClicked]=retrievedSensor[0]),"deletedR"==retrievedSensor[1]){var indexClicked1=$scope.SiteSensors.indexOf(sensorClicked);$scope.SiteSensors.splice(indexClicked1,1),$scope.sensorCount.total=$scope.SiteSensors.length}})},$scope.showSensorModal=function(sensorClicked){{var passAllLists=[allSensorTypes,allSensorBrands,allHousingTypes,allSensDeps,allEvents];$scope.SiteSensors.indexOf(sensorClicked)}$(".page-loading").removeClass("hidden");var modalInstance=$uibModal.open({templateUrl:"Sensormodal.html",controller:"sensorModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.SITE_ID}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){var i=$scope.SiteSensors.indexOf(sensorClicked);"proposedDeployed"==createdSensor[1]&&($scope.SiteSensors[i]=createdSensor[0]),"newDeployed"==createdSensor[1]&&($scope.SiteSensors.push(createdSensor[0]),thisSiteSensors.push(createdSensor[0]),$scope.sensorCount.total=$scope.SiteSensors.length),"edit"==createdSensor[1]&&($scope.SiteSensors[i]=createdSensor[0]),"deleted"==createdSensor[1]&&($scope.SiteSensors.splice(i,1),$scope.sensorCount.total=$scope.SiteSensors.length)})},$scope.showFullSensorModal=function(sensorClicked){
{var deployedStuff=[allSensorTypes,allSensorBrands,allHousingTypes,allSensDeps];$scope.SiteSensors.indexOf(sensorClicked)}$(".page-loading").removeClass("hidden");var modalInstance=$uibModal.open({templateUrl:"fullSensormodal.html",controller:"fullSensorModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDepDropdowns:function(){return deployedStuff},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise},allEvents:function(){return allEvents},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.SITE_ID}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteSensors=thisSiteSensors.filter(function(h){return h.Instrument.EVENT_ID==$cookies.get("SessionEventID")||4==h.InstrumentStats[0].STATUS_TYPE_ID}),$scope.sensorCount={total:$scope.SiteSensors.length}):($scope.SiteSensors=thisSiteSensors,$scope.sensorCount={total:$scope.SiteSensors.length})})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("submitReportCtrl",["$scope","$http","$cookies","$uibModal","$state","CONTACT","REPORT",function($scope,$http,$cookies,$uibModal,$state,CONTACT,REPORT){$scope.$parent.needToComplete!==!0&&($scope.$parent.newReport={}),$scope.$parent.needToComplete=!1,void 0===$scope.newReport.REPORTING_METRICS_ID&&($scope.disabled=!0),$scope.getEventName=function(evID){var name,thisEvent=$scope.events.filter(function(e){return e.EVENT_ID==evID})[0];return name=thisEvent.EVENT_NAME};var getReportContacts=function(reportID){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ContactModelByReport:reportID},function(response){$scope.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.TYPE})[0],$scope.GenStaff=response.filter(function(d){return"General"==d.TYPE})[0],$scope.InlandStaff=response.filter(function(d){return"Inland Flood"==d.TYPE})[0],$scope.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.TYPE})[0],$scope.WaterStaff=response.filter(function(d){return"Water Quality"==d.TYPE})[0]}).$promise,$scope.disabled=!1},postReportContacts=function(reportID){CONTACT.addReportContact({contactTypeId:1,reportId:reportID},$scope.DeployStaff,function(response1){toastr.success("Deploy Staff Updated")},function(errorResponse1){alert("Error: "+errorResponse1.statusText)}).$promise,void 0!==$scope.GenStaff.LNAME&&CONTACT.addReportContact({contactTypeId:2,reportId:reportID},$scope.GenStaff,function(response2){toastr.success("General Staff Updated")},function(errorResponse2){alert("Error: "+errorResponse2.statusText)}).$promise,void 0!==$scope.InlandStaff.LNAME&&CONTACT.addReportContact({contactTypeId:3,reportId:reportID},$scope.InlandStaff,function(response3){toastr.success("Inland Staff Updated")},function(errorResponse3){alert("Error: "+errorResponse3.statusText)}).$promise,void 0!==$scope.CoastStaff.LNAME&&CONTACT.addReportContact({contactTypeId:4,reportId:reportID},$scope.CoastStaff,function(response4){toastr.success("Coastal Staff Updated")},function(errorResponse4){alert("Error: "+errorResponse4.statusText)}).$promise,void 0!==$scope.WaterStaff.LNAME&&CONTACT.addReportContact({contactTypeId:5,reportId:reportID},$scope.WaterStaff,function(response5){toastr.success("Water Staff Updated")},function(errorResponse5){alert("Error: "+errorResponse5.statusText)}).$promise},removeIncomplete=function(){for(var index=0,i=0;i<$scope.memberIncompletes.length;i++)$scope.memberIncompletes[i].REPORTING_METRICS_ID==$scope.newReport.REPORTING_METRICS_ID&&(index=i,i=$scope.memberIncompletes.length);$scope.memberIncompletes.splice(index,1)},PostPutReportAndReportContacts=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.newReport.REPORTING_METRICS_ID?REPORT.update({id:$scope.newReport.REPORTING_METRICS_ID},$scope.newReport,function(response){toastr.success("Report Updated"),$scope.newReport.EVENT_NAME=$scope.getEventName($scope.newReport.EVENT_ID),1==$scope.newReport.COMPLETE&&(removeIncomplete(),$scope.isCompleted=!0),postReportContacts($scope.newReport.REPORTING_METRICS_ID)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.EVENT_ID.$viewValue=void 0,$state.go("reporting.reportDash")}):REPORT.save($scope.newReport,function(response){toastr.success("Report Created"),$scope.reports.push(response),1==$scope.newReport.COMPLETE&&(removeIncomplete(),$scope.isCompleted=!0,$scope.newReport.EVENT_NAME=$scope.getEventName($scope.newReport.EVENT_ID)),$scope.newReport.REPORTING_METRICS_ID=response.REPORTING_METRICS_ID,postReportContacts($scope.newReport.REPORTING_METRICS_ID)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.EVENT_ID.$viewValue=void 0,$state.go("reporting.reportDash")})};$scope.populateYestTots=function(){if(void 0!==$scope.newReport.REPORT_DATE&&void 0!==$scope.newReport.STATE&&void 0!==$scope.newReport.EVENT_ID){var myDate=new Date($scope.newReport.REPORT_DATE),theState=$scope.newReport.STATE,eID=$scope.newReport.EVENT_ID;$scope.disabled=!1,$scope.newReport={REPORT_DATE:$scope.newReport.REPORT_DATE,STATE:theState,EVENT_ID:eID},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={};var previousDay=new Date(myDate);previousDay.setDate(myDate.getDate()-1),previousDay.setHours(0,0,0,0);var yesterdayRpt=$scope.reports.filter(function(r){var repDate=new Date(r.REPORT_DATE).setHours(0,0,0,0);return r.EVENT_ID==$scope.newReport.EVENT_ID&&r.STATE==$scope.newReport.STATE&&new Date(repDate).getTime()==previousDay.getTime()})[0];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==yesterdayRpt&&yesterdayRpt.length>0?($scope.newReport.SW_YEST_FIELDPERS=yesterdayRpt.SW_TOD_FIELDPERS,$scope.newReport.WQ_YEST_FIELDPERS=yesterdayRpt.WQ_TOD_FIELDPERS,$scope.newReport.SW_YEST_OFFICEPERS=yesterdayRpt.SW_TOD_OFFICEPERS,$scope.newReport.WQ_YEST_OFFICEPERS=yesterdayRpt.WQ_TOD_OFFICEPERS,getReportContacts(yesterdayRpt.REPORTING_METRICS_ID)):($scope.newReport.SW_YEST_FIELDPERS=0,$scope.newReport.WQ_YEST_FIELDPERS=0,$scope.newReport.SW_YEST_OFFICEPERS=0,$scope.newReport.WQ_YEST_OFFICEPERS=0),REPORT.getDailyReportTots({Date:$scope.newReport.REPORT_DATE,Event:$scope.newReport.EVENT_ID,State:$scope.newReport.STATE},function(response6){$scope.newReport.DEP_RAPDEPL_GAGE=response6.DEP_RAPDEPL_GAGE,$scope.newReport.REC_RAPDEPL_GAGE=response6.REC_RAPDEPL_GAGE,$scope.newReport.LOST_RAPDEPL_GAGE=response6.LOST_RAPDEPL_GAGE,$scope.newReport.DEP_WTRLEV_SENSOR=response6.DEP_WTRLEV_SENSOR,$scope.newReport.REC_WTRLEV_SENSOR=response6.REC_WTRLEV_SENSOR,$scope.newReport.LOST_WTRLEV_SENSOR=response6.LOST_WTRLEV_SENSOR,$scope.newReport.DEP_WV_SENS=response6.DEP_WV_SENS,$scope.newReport.REC_WV_SENS=response6.REC_WV_SENS,$scope.newReport.LOST_WV_SENS=response6.LOST_WV_SENS,$scope.newReport.DEP_BAROMETRIC=response6.DEP_BAROMETRIC,$scope.newReport.REC_BAROMETRIC=response6.REC_BAROMETRIC,$scope.newReport.LOST_BAROMETRIC=response6.LOST_BAROMETRIC,$scope.newReport.DEP_METEOROLOGICAL=response6.DEP_METEOROLOGICAL,$scope.newReport.REC_METEOROLOGICAL=response6.REC_METEOROLOGICAL,$scope.newReport.LOST_METEOROLOGICAL=response6.LOST_METEOROLOGICAL,$scope.newReport.HWM_FLAGGED=response6.HWM_FLAGGED,$scope.newReport.HWM_COLLECTED=response6.HWM_COLLECTED},function(errorResponse6){alert("Error: "+errorResponse6.statusText)})}else alert("Please choose a date, event and state first.")},$scope.saveReport=function(valid){if(valid===!1)alert("All fields are required"),angular.element("[name='"+$scope.fullReportForm.submit.$name+"']").find(".ng-invalid:visible:first").focus();else if(void 0===$scope.newReport.COMPLETE||0===$scope.newReport.COMPLETE){var modalInstance=$uibModal.open({templateUrl:"saveReportModal.html",controller:"confirmReportModalCtrl",size:"sm"});modalInstance.result.then(function(){$scope.newReport.COMPLETE=0,$scope.newReport.MEMBER_ID=$scope.MemberLoggedIn.MEMBER_ID,PostPutReportAndReportContacts()})}else $scope.newReport.MEMBER_ID=$scope.MemberLoggedIn.MEMBER_ID,PostPutReportAndReportContacts()},$scope.getIncompleteReport=function(){var reportId=this.ir.REPORTING_METRICS_ID;REPORT.query({id:reportId},function(response){$scope.newReport=response,$scope.fullReportForm.submit.$setDirty(),getReportContacts(reportId)}).$promise}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("reportModalCtrl",["$scope","$uibModalInstance","report","submitPerson","contacts",function($scope,$uibModalInstance,report,submitPerson,contacts){$scope.ReportView={},$scope.ReportView.Report=report,$scope.ReportView.submitter=submitPerson,$scope.ReportView.deployStaff=contacts.filter(function(d){return"Deployed Staff"==d.TYPE}),$scope.ReportView.generalStaff=contacts.filter(function(d){return"General"==d.TYPE}),$scope.ReportView.inlandStaff=contacts.filter(function(d){return"Inland Flood"==d.TYPE}),$scope.ReportView.coastStaff=contacts.filter(function(d){return"Coastal Flood"==d.TYPE}),$scope.ReportView.waterStaff=contacts.filter(function(d){return"Water Quality"==d.TYPE}),$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingDashCtrl",["$scope","$cookies","$filter","$uibModal","$state","$http","CONTACT","MEMBER","allReportsAgain",function($scope,$cookies,$filter,$uibModal,$state,$http,CONTACT,MEMBER,allReportsAgain){function formatReport(repList){for(var returnList=[],i=0;i<repList.length;i++){var rep=repList[i],event=$scope.events.filter(function(e){return e.EVENT_ID==rep.EVENT_ID})[0];rep.EVENT_NAME=event.EVENT_NAME,returnList.push(rep)}return returnList}$scope.reportsToDate=allReportsAgain,$scope.todayRpts=[],$scope.yesterdayRpts=[],$scope.pickDateRpts=[],$scope.pickAdateReports=!1,$scope.today=new Date,$scope.today.setHours(0,0,0,0),$scope.yesterday=new Date($scope.today),$scope.yesterday.setDate($scope.today.getDate()-1),$scope.THIS_DATE={},$scope.ViewReport=function(r){var modalInstance=$uibModal.open({templateUrl:"ViewReport.html",controller:"reportModalCtrl",size:"lg",windowClass:"rep-dialog",resolve:{report:function(){return r},submitPerson:function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var member={};return MEMBER.query({id:r.MEMBER_ID},function(response){member.mem=response;var memberAgency=$scope.agencies.filter(function(a){return a.AGENCY_ID==member.mem.AGENCY_ID})[0];member.AGENCY_NAME=memberAgency.AGENCY_NAME,member.AGENCY_ADDRESS=memberAgency.ADDRESS+", "+memberAgency.CITY+" "+memberAgency.STATE+" "+memberAgency.ZIP}).$promise,member},contacts:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ContactModelByReport:r.REPORTING_METRICS_ID}).$promise}}});modalInstance.result.then(function(r){})};var todayReports=$scope.reportsToDate.filter(function(todayrep){var reportDate=new Date(todayrep.REPORT_DATE).setHours(0,0,0,0);return new Date(reportDate).getTime()==$scope.today.getTime()});$scope.todayRpts=formatReport(todayReports);var yesterdayReports=$scope.reportsToDate.filter(function(yestrep){var reportDate=new Date(yestrep.REPORT_DATE).setHours(0,0,0,0);return new Date(reportDate).getTime()==$scope.yesterday.getTime()});$scope.yesterdayRpts=formatReport(yesterdayReports),$scope.getReportsByDate=function(){if(void 0!==$scope.THIS_DATE.date){var formatDate=new Date($scope.THIS_DATE.date).setHours(0,0,0,0),thisDateReports=$scope.reportsToDate.filter(function(tdate){var reportDate=new Date(tdate.REPORT_DATE).setHours(0,0,0,0);return new Date(reportDate).getTime()==new Date(formatDate).getTime()});$scope.pickDateRpts=formatReport(thisDateReports),$scope.pickAdateReports=!0}else alert("Pick a date first.")},$scope.CompleteThisReport=function(rep){$scope.$parent.newReport=rep,$scope.$parent.disabled=!1,$scope.$parent.needToComplete=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ContactModelByReport:rep.REPORTING_METRICS_ID},function(response){$scope.$parent.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.TYPE})[0],$scope.$parent.GenStaff=response.filter(function(d){return"General"==d.TYPE})[0],$scope.$parent.InlandStaff=response.filter(function(d){return"Inland Flood"==d.TYPE})[0],$scope.$parent.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.TYPE})[0],$scope.$parent.WaterStaff=response.filter(function(d){return"Water Quality"==d.TYPE})[0]}).$promise.then(function(){$state.go("reporting.submitReport")})},$scope.getProjectAlertText=function(rep){$scope.ProjectAlertParts={},$scope.ProjectAlertParts.Report=rep,$scope.ProjectAlertParts.totYestFieldPers=rep.SW_YEST_FIELDPERS+rep.WQ_YEST_FIELDPERS,$scope.ProjectAlertParts.totYestOfficPers=rep.SW_YEST_OFFICEPERS+rep.WQ_YEST_OFFICEPERS,$scope.ProjectAlertParts.measureCts=rep.TOT_CHECK_MEAS+rep.TOT_DISCHARGE_MEAS;var eventReports=$scope.reportsToDate.filter(function(r){return r.EVENT_ID==rep.EVENT_ID}),test=$filter("countBy")(eventReports,"STATE");$scope.ProjectAlertParts.stateCount=0,angular.forEach(test,function(er){$scope.ProjectAlertParts.stateCount++}),$scope.ProjectAlertParts.Event=$scope.events.filter(function(e){return e.EVENT_ID==rep.EVENT_ID})[0];var modalInstance=$uibModal.open({templateUrl:1==$scope.ProjectAlertParts.Event.EVENT_TYPE_ID?"FloodPA.html":"HurricanePA.html",controller:"ProjAlertModalCtrl",size:"md",windowClass:"rep-dialog",resolve:{ProjAlert:function(){return $scope.ProjectAlertParts}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingCtrl",["$scope","$rootScope","$cookies","$location","$http","$uibModal","incompleteReports","allEvents","allStates","allReports","allEventTypes","allEventStatus","allAgencies","REPORT","MEMBER",function($scope,$rootScope,$cookies,$location,$http,$uibModal,incompleteReports,allEvents,allStates,allReports,allEventTypes,allEventStatus,allAgencies,REPORT,MEMBER){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Reporting",$rootScope.activeMenu="report",$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var formIsPopulated=!1;switch(fromState.url){case"/SubmitReport":void 0!==$scope.fullReportForm.submit&&(formIsPopulated=$scope.fullReportForm.submit.$dirty,formIsPopulated=void 0!==$scope.fullReportForm.submit.EVENT_ID.$viewValue?!0:formIsPopulated)}formIsPopulated&&(console.log("toState.name: "+toState.name),console.log("fromState.name: "+fromState.name),confirm("Are you sure you want to leave the Submit Report Tab? Any unsaved information will be lost.")?console.log("go to: "+toState.name):(console.log("stay at state: "+fromState.name),$(".page-loading").addClass("hidden"),event.preventDefault()))}),$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.formatDate=function(d){var currentDt=new Date(d),mm=currentDt.getMonth()+1;mm=10>mm?"0"+mm:mm;var dd=currentDt.getDate(),yyyy=currentDt.getFullYear(),date=mm+"/"+dd+"/"+yyyy;return date},$scope.fullReportForm={},$scope.newReport={},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.disabled=!0,$scope.needToComplete=!1,$scope.memberIncompletes=incompleteReports.filter(function(ir){return 0===ir.COMPLETE}),$scope.events=allEvents,$scope.states=allStates,$scope.reports=allReports,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.MemberLoggedIn=response;var memberAgency=allAgencies.filter(function(a){return a.AGENCY_ID==$scope.MemberLoggedIn.AGENCY_ID})[0];$scope.MemberLoggedIn.AGENCY_NAME=memberAgency.AGENCY_NAME,$scope.MemberLoggedIn.AGENCY_ADDRESS=memberAgency.ADDRESS+", "+memberAgency.CITY+" "+memberAgency.STATE+" "+memberAgency.ZIP}).$promise,MEMBER.getAll().$promise.then(function(response){$scope.members=response}),$scope.agencies=allAgencies,$scope.eventTypes=allEventTypes,$scope.eventStats=allEventStatus,$scope.Statemodel={},$scope.genSummary={},$scope.filteredReports=[],$scope.genRepChange=function(){$scope.EventName=$scope.events.filter(function(e){return e.EVENT_ID==$scope.genSummary.EVENT_ID})[0];var names=[],abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){names.push(state.STATE_NAME),abbrevs.push(state.STATE_ABBREV)}),$scope.StateNames=names.join(", "),$scope.StateAbbrevs=abbrevs.join(",")},$scope.MetricDisplayModel=[],$scope.displayMetricSum=function(valid){if(valid){$scope.MetricDisplayModel=[],$scope.GenRepEventModel={},$scope.totalRow={},$scope.totalRow.notAcctForEmps=0,$scope.totalRow.cumPField=0,$scope.totalRow.yesPField=0,$scope.totalRow.todPField=0,$scope.totalRow.tomPField=0,$scope.totalRow.cumPOffice=0,$scope.totalRow.yesPOffice=0,$scope.totalRow.todPOffice=0,$scope.totalRow.tomPOffice=0,$scope.totalRow.truck=0,$scope.totalRow.boat=0,$scope.totalRow.other=0,$scope.totalRow.gageVisits=0,$scope.totalRow.gagesDown=0,$scope.totalRow.disCtoDate=0,$scope.totalRow.disCPlanned=0,$scope.totalRow.CheckMeasToDate=0,$scope.totalRow.CheckMeasPlanned=0,$scope.totalRow.indMeas=0,$scope.totalRow.ratExt=0,$scope.totalRow.peaksOfRec=0,$scope.totalRow.QWGageVis=0,$scope.totalRow.contQWGageVis=0,$scope.totalRow.contQWGageDown=0,$scope.totalRow.disQWSamples=0,$scope.totalRow.sedSamples=0,$scope.totalRow.rdgPlan=0,$scope.totalRow.rdgDep=0,$scope.totalRow.rdgRec=0,$scope.totalRow.rdgLost=0,$scope.totalRow.waterPlan=0,$scope.totalRow.waterDep=0,$scope.totalRow.waterRec=0,$scope.totalRow.waterLost=0,$scope.totalRow.wavePlan=0,$scope.totalRow.waveDep=0,$scope.totalRow.waveRec=0,$scope.totalRow.waveLost=0,$scope.totalRow.baroPlan=0,$scope.totalRow.baroDep=0,$scope.totalRow.baroRec=0,$scope.totalRow.baroLost=0,$scope.totalRow.metPlan=0,$scope.totalRow.metDep=0,$scope.totalRow.metRec=0,$scope.totalRow.metLost=0,$scope.totalRow.hwmFlag=0,$scope.totalRow.hwmCol=0;var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.STATE_ABBREV)});var abbrevString=abbrevs.join(", "),thisDate=$scope.formatDate($scope.genSummary.SUM_DATE);REPORT.getFilteredReports({Event:$scope.EventName.EVENT_ID,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var thisRPModel={};thisRPModel.report=result[x];for(var YesSWFsum=0,YesWQFsum=0,YesSWOsum=0,YesWQOsum=0,a=0;a<result.length;a++)YesSWFsum+=result[a].SW_YEST_FIELDPERS;for(var b=0;b<result.length;b++)YesWQFsum+=result[b].WQ_YEST_FIELDPERS;for(var c=0;c<result.length;c++)YesSWOsum+=result[c].SW_YEST_OFFICEPERS;for(var d=0;d<result.length;d++)YesWQOsum+=result[d].WQ_YEST_OFFICEPERS;thisRPModel.FieldPYesSWTot=YesSWFsum,thisRPModel.FieldPYesWQTot=YesWQFsum,thisRPModel.OfficePYesSWTot=YesSWOsum,thisRPModel.OfficePYesWQTot=YesWQOsum,$scope.totalRow.notAcctForEmps+=thisRPModel.report.SW_FIELDPERS_NOTACCT+thisRPModel.report.WQ_FIELDPERS_NOTACCT,$scope.totalRow.cumPField+=thisRPModel.FieldPYesSWTot+thisRPModel.FieldPYesWQTot,$scope.totalRow.yesPField+=thisRPModel.report.SW_YEST_FIELDPERS+thisRPModel.report.WQ_YEST_FIELDPERS,$scope.totalRow.todPField+=thisRPModel.report.SW_TOD_FIELDPERS+thisRPModel.report.WQ_TOD_FIELDPERS,$scope.totalRow.tomPField+=thisRPModel.report.SW_TMW_FIELDPERS+thisRPModel.report.WQ_TMW_FIELDPERS,$scope.totalRow.cumPOffice+=thisRPModel.OfficePYesSWTot+thisRPModel.OfficePYesWQTot,$scope.totalRow.yesPOffice+=thisRPModel.report.SW_YEST_OFFICEPERS+thisRPModel.report.WQ_YEST_OFFICEPERS,$scope.totalRow.todPOffice+=thisRPModel.report.SW_TOD_OFFICEPERS+thisRPModel.report.WQ_TOD_OFFICEPERS,$scope.totalRow.tomPOffice+=thisRPModel.report.SW_TMW_OFFICEPERS+thisRPModel.report.WQ_TMW_OFFICEPERS,$scope.totalRow.truck+=thisRPModel.report.SW_AUTOS_DEPL+thisRPModel.report.WQ_AUTOS_DEPL,$scope.totalRow.boat+=thisRPModel.report.SW_BOATS_DEPL+thisRPModel.report.WQ_BOATS_DEPL,$scope.totalRow.other+=thisRPModel.report.SW_OTHER_DEPL+thisRPModel.report.WQ_OTHER_DEPL,$scope.totalRow.gageVisits+=thisRPModel.report.GAGE_VISIT,$scope.totalRow.gagesDown+=thisRPModel.report.GAGE_DOWN,$scope.totalRow.disCtoDate+=thisRPModel.report.TOT_DISCHARGE_MEAS,$scope.totalRow.disCPlanned+=thisRPModel.report.PLAN_DISCHARGE_MEAS,$scope.totalRow.CheckMeasToDate+=thisRPModel.report.TOT_CHECK_MEAS,$scope.totalRow.CheckMeasPlanned+=thisRPModel.report.PLAN_CHECK_MEAS,$scope.totalRow.indMeas=thisRPModel.report.PLAN_INDIRECT_MEAS,$scope.totalRow.ratExt=thisRPModel.report.RATING_EXTENS,$scope.totalRow.peaksOfRec+=thisRPModel.report.GAGE_PEAK_RECORD,$scope.totalRow.QWGageVis+=thisRPModel.report.QW_GAGE_VISIT,$scope.totalRow.contQWGageVis=thisRPModel.report.QW_CONT_GAGEVISIT,$scope.totalRow.contQWGageDown=thisRPModel.report.QW_GAGE_DOWN,$scope.totalRow.disQWSamples+=thisRPModel.report.QW_DISCR_SAMPLES,$scope.totalRow.sedSamples+=thisRPModel.report.COLL_SEDSAMPLES,$scope.totalRow.rdgPlan+=thisRPModel.report.PLAN_RAPDEPL_GAGE,$scope.totalRow.rdgDep+=thisRPModel.report.DEP_RAPDEPL_GAGE,$scope.totalRow.rdgRec+=thisRPModel.report.REC_RAPDEPL_GAGE,$scope.totalRow.rdgLost+=thisRPModel.report.LOST_RAPDEPL_GAGE,$scope.totalRow.waterPlan+=thisRPModel.report.PLAN_WTRLEV_SENSOR,$scope.totalRow.waterDep+=thisRPModel.report.DEP_WTRLEV_SENSOR,$scope.totalRow.waterRec+=thisRPModel.report.REC_WTRLEV_SENSOR,$scope.totalRow.waterLost+=thisRPModel.report.LOST_WTRLEV_SENSOR,$scope.totalRow.wavePlan+=thisRPModel.report.PLAN_WV_SENS,$scope.totalRow.waveDep+=thisRPModel.report.DEP_WV_SENS,$scope.totalRow.waveRec+=thisRPModel.report.REC_WV_SENS,$scope.totalRow.waveLost+=thisRPModel.report.LOST_WV_SENS,$scope.totalRow.baroPlan+=thisRPModel.report.PLAN_BAROMETRIC,$scope.totalRow.baroDep+=thisRPModel.report.DEP_BAROMETRIC,$scope.totalRow.baroRec+=thisRPModel.report.REC_BAROMETRIC,$scope.totalRow.baroLost+=thisRPModel.report.LOST_BAROMETRIC,$scope.totalRow.metPlan+=thisRPModel.report.PLAN_METEOROLOGICAL,$scope.totalRow.metDep+=thisRPModel.report.DEP_METEOROLOGICAL,$scope.totalRow.metRec+=thisRPModel.report.REC_METEOROLOGICAL,$scope.totalRow.metLost+=thisRPModel.report.LOST_METEOROLOGICAL,$scope.totalRow.hwmFlag+=thisRPModel.report.HWM_FLAGGED,$scope.totalRow.hwmCol=thisRPModel.report.HWM_COLLECTED,$scope.MetricDisplayModel.push(thisRPModel)}$scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.EVENT_TYPE_ID==$scope.EventName.EVENT_TYPE_ID})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.EVENT_STATUS_ID==$scope.EventName.EVENT_STATUS_ID})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.MEMBER_ID==$scope.GenRepEventModel.Event.EVENT_COORDINATOR})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.AGENCY_ID==$scope.GenRepEventModel.Coordinator.AGENCY_ID})[0];var modalInstance=$uibModal.open({templateUrl:"MetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{thisReport:function(){return $scope.MetricDisplayModel},thisEvent:function(){return $scope.GenRepEventModel},theTotalRow:function(){return $scope.totalRow}},controller:function($scope,$uibModalInstance,thisReport,thisEvent,theTotalRow){$scope.Report=thisReport,$scope.Event=thisEvent,$scope.totals=theTotalRow,$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}});modalInstance.result.then(function(){})})}},$scope.displayContactsSum=function(valid){if(valid){var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.STATE_ABBREV)});var abbrevString=abbrevs.join(", "),thisDate=$scope.formatDate($scope.genSummary.SUM_DATE);$scope.reportModel=[],$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",REPORT.getReportwithContacts({Event:$scope.EventName.EVENT_ID,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var rep={};rep.repID=result[x].Report.REPORTING_METRICS_ID,rep.State=result[x].Report.STATE,rep.REPORT_DATE=result[x].Report.REPORT_DATE;var submitter=$scope.members.filter(function(m){return m.MEMBER_ID==result[x].Report.MEMBER_ID})[0],submitterAgency=$scope.agencies.filter(function(a){return a.AGENCY_ID==submitter.AGENCY_ID}),sub={};sub.FNAME=submitter.FNAME,sub.FNAME=submitter.FNAME,sub.EMAIL=submitter.EMAIL,sub.PHONE=submitter.PHONE,sub.AGENCYNAME=submitterAgency.AGENCY_NAME,sub.AGENCYADD=submitterAgency.CITY+" "+submitterAgency.STATE+" "+submitterAgency.ZIP,rep.submitter=sub,rep.depC=result[x].ReportContacts.filter(function(x){return"Deployed Staff"==x.TYPE})[0],rep.genC=result[x].ReportContacts.filter(function(x){return"General"==x.TYPE})[0],rep.inlC=result[x].ReportContacts.filter(function(x){return"Inland Flood"==x.TYPE})[0],rep.coastC=result[x].ReportContacts.filter(function(x){return"Coastal Flood"==x.TYPE})[0],rep.waterC=result[x].ReportContacts.filter(function(x){return"Water Quality"==x.TYPE})[0],$scope.reportModel.push(rep)}setTimeout(function(){showModal()},3e3);var showModal=function(){var modalInstance=$uibModal.open({templateUrl:"ContactMetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{theseReports:function(){return $scope.reportModel},thisEvent:function(){return $scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.EVENT_TYPE_ID==$scope.EventName.EVENT_TYPE_ID})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.EVENT_STATUS_ID==$scope.EventName.EVENT_STATUS_ID})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.MEMBER_ID==$scope.EventName.EVENT_COORDINATOR})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.AGENCY_ID==$scope.GenRepEventModel.Coordinator.AGENCY_ID})[0],$scope.GenRepEventModel}},controller:function($scope,$http,$uibModalInstance,theseReports,thisEvent){$scope.Reports=theseReports,$scope.Event=thisEvent,$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}});modalInstance.result.then(function(){})}})}},$scope.getCSVfile=function(valid){valid&&($http.defaults.headers.common.Accept="text/csv",REPORT.getReportsCSV({Event:$scope.genSummary.EVENT_ID,States:$scope.StateAbbrevs,Date:$scope.genSummary.SUM_DATE}).$promise.then(function(result){var anchor=angular.element("<a/>"),joinedResponse=result.join(""),file=new Blob([joinedResponse],{type:"application/csv"}),fileURL=URL.createObjectURL(file);anchor.href=fileURL,anchor.download="report.csv",anchor.click()}),function(){console.log("error")})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ProjAlertModalCtrl",["$scope","$uibModalInstance","ProjAlert",function($scope,$uibModalInstance,ProjAlert){$scope.ProjAlertParts=ProjAlert,$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("confirmReportModalCtrl",["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("peakCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSitePeaks",function($scope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSitePeaks){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):$scope.peakCount={total:thisSitePeaks.length}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("OPmodalCtrl",["$scope","$cookies","$http","$uibModalInstance","$uibModal","allDropdowns","thisOP","thisOPControls","opSite","OBJECTIVE_POINT","OP_CONTROL_IDENTIFIER",function($scope,$cookies,$http,$uibModalInstance,$uibModal,allDropdowns,thisOP,thisOPControls,opSite,OBJECTIVE_POINT,OP_CONTROL_IDENTIFIER){$scope.OPTypeList=allDropdowns[0],$scope.HDList=allDropdowns[1],$scope.HCollectMethodList=allDropdowns[2],$scope.VDatumList=allDropdowns[3],$scope.VCollectMethodList=allDropdowns[4],$scope.OPQualityList=allDropdowns[5],$scope.OP={},$scope.removeOPCarray=[],$scope.thisOPsite=opSite,$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.DMS={},$scope.OPFiles=[],$scope.photoFiles=[],$scope.UnquantChecked=function(){1==$scope.OP.UNQUANTIFIED&&($scope.OP.UNCERTAINTY="")};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisOP?($scope.OP=angular.copy(thisOP),$scope.OP.DATE_ESTABLISHED=makeAdate($scope.OP.DATE_ESTABLISHED),null!==$scope.OP.DATE_RECOVERED&&($scope.OP.DATE_RECOVERED=makeAdate($scope.OP.DATE_RECOVERED)),thisOPControls.length>0&&($scope.addedIdentifiers=thisOPControls,$scope.showControlIDinput=!0),OBJECTIVE_POINT.getOPFiles({id:$scope.OP.OBJECTIVE_POINT_ID},function(response){$scope.OPFiles=response},function(errorResponse){toastr.error("Error getting OP files: "+errorResponse.statusText)})):($scope.OP.LATITUDE_DD=opSite.LATITUDE_DD,$scope.OP.LONGITUDE_DD=opSite.LONGITUDE_DD,$scope.OP.HDATUM_ID=opSite.HDATUM_ID,$scope.OP.DATE_ESTABLISHED=makeAdate("")),$scope.OP.decDegORdms="dd",$scope.OP.FTorMETER="ft",$scope.OP.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({OBJECTIVE_POINT_ID:$scope.OP.OBJECTIVE_POINT_ID,IDENTIFIER:"",IDENTIFIER_TYPE:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5));

},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.OP.decDegORdms)void 0!==$scope.DMS.LADeg&&($scope.OP.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={});else if(void 0!==$scope.OP.LATITUDE_DD){var latDMS=deg_to_dms($scope.OP.LATITUDE_DD).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.OP.LONGITUDE_DD),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.OP.LATITUDE_DD=void 0,$scope.OP.LONGITUDE_DD=void 0}};var trimOP=function(op){var OBJ_PT={OBJECTIVE_POINT_ID:void 0!==op.OBJECTIVE_POINT_ID?op.OBJECTIVE_POINT_ID:0,NAME:op.NAME,DESCRIPTION:op.DESCRIPTION,ELEV_FT:void 0!==op.ELEV_FT?op.ELEV_FT:null,DATE_ESTABLISHED:op.DATE_ESTABLISHED,OP_IS_DESTROYED:void 0!==op.OP_IS_DESTROYED?op.OP_IS_DESTROYED:0,OP_NOTES:void 0!==op.OP_NOTES?op.OP_NOTES:null,SITE_ID:op.SITE_ID,VDATUM_ID:void 0!==op.VDATUM_ID?op.VDATUM_ID:0,LATITUDE_DD:op.LATITUDE_DD,LONGITUDE_DD:op.LONGITUDE_DD,HDATUM_ID:void 0!==op.HDATUM_ID?op.HDATUM_ID:0,HCOLLECT_METHOD_ID:void 0!==op.HCOLLECT_METHOD_ID?op.HCOLLECT_METHOD_ID:0,VCOLLECT_METHOD_ID:void 0!==op.VCOLLECT_METHOD_ID?op.VCOLLECT_METHOD_ID:0,OP_TYPE_ID:op.OP_TYPE_ID,DATE_RECOVERED:void 0!==op.DATE_RECOVERED?op.DATE_RECOVERED:null,UNCERTAINTY:void 0!==op.UNCERTAINTY?op.UNCERTAINTY:null,UNQUANTIFIED:void 0!==op.UNQUANTIFIED?op.UNQUANTIFIED:null,OP_QUALITY_ID:void 0!==op.OP_QUALITY_ID?op.OP_QUALITY_ID:null};return OBJ_PT};$scope.cancel=function(){$uibModalInstance.dismiss("cancel")};var formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.OP.FTorMETER="ft",$scope.OP.ELEV_FT=3.2808*$scope.OP.ELEV_FT),"cm"==theOP.FTorCM&&($scope.OP.FTorCM="ft",$scope.OP.UNCERTAINTY=$scope.OP.UNCERTAINTY/30.48),"dms"==theOP.decDegORdms&&($scope.OP.decDegORdms="dd",$scope.OP.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={},$scope.OP.SITE_ID=$scope.thisOPsite.SITE_ID)};$scope.create=function(){if(this.OPForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdOP={};formatDefaults($scope.OP);var OPtoPOST=trimOP($scope.OP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(toastr.success("Objective Point created"),createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++)OBJECTIVE_POINT.createOPControlID({id:response.OBJECTIVE_POINT_ID},$scope.addedIdentifiers[opc]).$promise}).$promise.then(function(){var sendBack=[createdOP,"created"];$uibModalInstance.close(sendBack)})}},$scope.RemoveID=function(opControl){var i=$scope.addedIdentifiers.indexOf(opControl);void 0!==opControl.OP_CONTROL_IDENTIFIER_ID?($scope.removeOPCarray.push(opControl),$scope.addedIdentifiers.splice(i,1)):$scope.addedIdentifiers.splice(i,1)},$scope.save=function(){if($scope.OPForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedOP={};if($scope.addedIdentifiers.length>0)for(var i=0;i<$scope.addedIdentifiers.length;i++)void 0!==$scope.addedIdentifiers[i].OP_CONTROL_IDENTIFIER_ID?OP_CONTROL_IDENTIFIER.update({id:$scope.addedIdentifiers[i].OP_CONTROL_IDENTIFIER_ID},$scope.addedIdentifiers[i]).$promise:OBJECTIVE_POINT.createOPControlID({id:$scope.OP.OBJECTIVE_POINT_ID},$scope.addedIdentifiers[i]).$promise;if($scope.removeOPCarray.length>0)for(var r=0;r<$scope.removeOPCarray.length;r++)OP_CONTROL_IDENTIFIER["delete"]({id:$scope.removeOPCarray[r].OP_CONTROL_IDENTIFIER_ID}).$promise;formatDefaults($scope.OP);var OPtoPOST=trimOP($scope.OP);OBJECTIVE_POINT.update({id:OPtoPOST.OBJECTIVE_POINT_ID},OPtoPOST,function(response){toastr.success("Objective Point updated"),updatedOP=response}).$promise.then(function(){var sendBack=[updatedOP,"updated"];$uibModalInstance.close(sendBack)})}},$scope.deleteOP=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.OP},what:function(){return"Objective Point"}}});DeleteModalInstance.result.then(function(opToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OBJECTIVE_POINT["delete"]({id:opToRemove.OBJECTIVE_POINT_ID},opToRemove).$promise.then(function(){toastr.success("Objective Point Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("objectivePointCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","OBJECTIVE_POINT","thisSite","thisSiteOPs","allOPTypes","allHorDatums","allHorCollMethods","allVertDatums","allVertColMethods","allOPQualities",function($scope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,OBJECTIVE_POINT,thisSite,thisSiteOPs,allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.opCount={total:thisSiteOPs.length},$scope.SiteObjectivePoints=thisSiteOPs,$scope.showOPModal=function(OPclicked){var passAllLists=[allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities],modalInstance=($scope.SiteObjectivePoints.indexOf(OPclicked),$uibModal.open({templateUrl:"OPmodal.html",controller:"OPmodalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisOP:function(){return 0!==OPclicked?OPclicked:"empty"},thisOPControls:function(){return 0!==OPclicked?OBJECTIVE_POINT.getOPControls({id:OPclicked.OBJECTIVE_POINT_ID}).$promise:void 0},opSite:function(){return thisSite}}}));modalInstance.result.then(function(createdOP){if("created"==createdOP[1]&&($scope.SiteObjectivePoints.push(createdOP[0]),$scope.opCount.total=$scope.SiteObjectivePoints.length),"updated"==createdOP[1]){var indexClicked=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints[indexClicked]=createdOP[0]}if("deleted"==createdOP[1]){var indexClicked1=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints.splice(indexClicked1,1),$scope.opCount.total=$scope.SiteObjectivePoints.length}})})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$stateParams","$filter","MEMBER","thisMember",function($scope,$cookies,$location,$http,$uibModal,$stateParams,$filter,MEMBER,thisMember){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.aMember={},$scope.matchingUsers=!0,$scope.DeleteMember=function(mem){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return mem},what:function(){return"Member"}}});modalInstance.result.then(function(nameToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MEMBER.deleteMember({id:nameToRemove.MEMBER_ID},function(response){var delMem={};delMem.MEMBER_ID=nameToRemove.MEMBER_ID,delMem.Name=nameToRemove.FNAME+" "+nameToRemove.LNAME;var ag=$scope.agencyList.filter(function(a){return a.AGENCY_ID==nameToRemove.AGENCY_ID})[0],ro=$scope.roleList.filter(function(r){return r.ROLE_ID==nameToRemove.ROLE_ID})[0];delMem.Agency=ag.AGENCY_NAME,delMem.Role=ro.ROLE_NAME,$scope.memberList.splice($scope.memberList.indexOf(delMem),1),toastr.success("Member Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$location.path("/Members/MembersList").replace()})})},$scope.pass={newP:"",confirmP:""},$scope.newPass="",void 0!==thisMember?($scope.matchingUsers=$stateParams.id==$scope.loggedInUser.ID?!0:!1,$scope.aMember=thisMember,$scope.aMember.Role=$scope.roleList.filter(function(r){return r.ROLE_ID==$scope.aMember.ROLE_ID})[0].ROLE_NAME,$scope.changePass=!1,$scope.SaveOnBlur=function(v){if(v)$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.update({id:$scope.aMember.MEMBER_ID},$scope.aMember,function(response){toastr.success("Member Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}},size:"sm"})}},$scope.changeMyPassBtn=function(evt){$scope.changePass=$scope.changePass===!1?!0:!1},$scope.ChangePassword=function(){if(""===$scope.pass.newP||""===$scope.pass.confirmP){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must first enter a new password.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}},size:"sm"})}else MEMBER.changePW({username:$scope.aMember.USERNAME,newPass:$scope.pass.newP},function(response){if(toastr.success("Password Updated"),$scope.aMember.MEMBER_ID==$scope.loggedInUser.MEMBER_ID){var enc=btoa($scope.aMember.USERNAME.concat(":",$scope.pass.newP));$cookies.put("STNCreds",enc),$cookies.put("STNUsername",$scope.aMember.USERNAME),$cookies.put("usersName",$scope.loggedInUser.Name),$cookies.put("mID",$scope.aMember.MEMBER_ID);var roleName;switch($scope.aMember.ROLE_ID){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName)}$scope.changePass=!1,$scope.pass.newP="",$scope.pass.confirmP=""},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},$scope.DontChangePass=function(){$scope.changePass=!1}):$scope.save=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.addMember({pass:$scope.pass.confirmP},$scope.aMember,function(response){toastr.success("Member Created");var nm={};nm.MEMBER_ID=response.MEMBER_ID,nm.Name=response.FNAME+" "+response.LNAME;var ag=$scope.agencyList.filter(function(a){return a.AGENCY_ID==response.AGENCY_ID})[0],ro=$scope.roleList.filter(function(r){return r.ROLE_ID==response.ROLE_ID})[0];nm.Agency=ag.AGENCY_NAME,nm.Role=ro.ROLE_NAME,$scope.memberList.push(nm)}).$promise.then(function(){$location.path("/Members/MembersList").replace()}))})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","MEMBER","allRoles","allAgencies",function($scope,$rootScope,$cookies,$location,$http,$filter,MEMBER,allRoles,allAgencies){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Members",$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.loggedInUser={},$scope.loggedInUser.Name=$cookies.get("usersName"),$scope.loggedInUser.ID=$cookies.get("mID"),$scope.loggedInUser.Role=$cookies.get("usersRole"),$scope.roleList=allRoles,$scope.agencyList=allAgencies,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise.then(function(response){$scope.memberList=[];for(var x=0;x<response.length;x++){var M={};M.MEMBER_ID=response[x].MEMBER_ID,M.Name=response[x].FNAME+" "+response[x].LNAME;var ag=$scope.agencyList.filter(function(a){return a.AGENCY_ID==response[x].AGENCY_ID})[0],ro=$scope.roleList.filter(function(r){return r.ROLE_ID==response[x].ROLE_ID})[0];M.Agency=ag.AGENCY_NAME,M.Role=ro.ROLE_NAME,$scope.memberList.push(M)}}))}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("mapCtrl",["$scope","$rootScope","$cookies","$location",function($scope,$rootScope,$cookies,$location){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Map",$rootScope.activeMenu="map",$scope.map="Welcome to the new STN Map Page!!")}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("mainCtrl",["$scope","$rootScope","$cookies","$uibModal","$location","$state",function($scope,$rootScope,$cookies,$uibModal,$location,$state){if($rootScope.isAuth={},$rootScope.activeMenu="home",void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$rootScope.isAuth.val=!1,$location.path("/login");else{$rootScope.isAuth.val=!0,$rootScope.usersName=$cookies.get("usersName"),$rootScope.userID=$cookies.get("mID");var EventName=$cookies.get("SessionEventName");null!==EventName&&void 0!==EventName&&($rootScope.sessionEvent="Session Event: "+EventName+"."),$state.go("home"),$scope.status={isopen:!1},$scope.toggleDropdown=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.status.isopen=!$scope.status.isopen}}}])}(),function(){"use strict";var LogInOutController=angular.module("LogInOutController",[]);LogInOutController.controller("loginCtrl",["$scope","$state","$location","$uibModal","$http","$cookies","$rootScope","Login",function($scope,$state,$location,$uibModal,$http,$cookies,$rootScope,Login){$("[type=password]").keypress(function(e){var $password=$(this),tooltipVisible=$(".tooltip").is(":visible"),s=String.fromCharCode(e.which);s.toUpperCase()!==s||s.toLowerCase()===s||e.shiftKey?tooltipVisible&&$password.tooltip("hide"):tooltipVisible||$password.tooltip("show"),$password.blur(function(e){$password.tooltip("hide")})}),$scope.submit=function(){var postData={username:$scope.username,password:$scope.password},up=$scope.username+":"+$scope.password;$http.defaults.headers.common.Authorization="Basic "+btoa(up),$http.defaults.headers.common.Accept="application/json",Login.login({},postData,function(response){var user=response;if(void 0!==user){var usersNAME=user.FNAME+" "+user.LNAME,enc=btoa($scope.username.concat(":",$scope.password));$cookies.put("STNCreds",enc),$cookies.put("STNUsername",$scope.username),$cookies.put("usersName",usersNAME),$cookies.put("mID",user.MEMBER_ID);var roleName;switch(user.ROLE_ID){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName),$rootScope.isAuth.val=!0,$rootScope.usersName=usersNAME,$rootScope.userID=user.MEMBER_ID,$state.go("home")}else $scope.error="Login Failed"},function(errorResponse){var modalInstance=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Something went wrong.</p><p>Error: {{status}} - {{statusText}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.status=errorResponse.status,$scope.statusText=errorResponse.statusText},size:"sm"});modalInstance.result.then(function(fieldFocus){$location.path("/login")})})}}]),LogInOutController.controller("logoutCtrl",["$scope","$rootScope","$cookies","$location",function($scope,$rootScope,$cookies,$location){$scope.logout=function(){$cookies.remove("STNCreds"),$cookies.remove("STNUsername"),$cookies.remove("usersName"),$cookies.remove("usersRole"),$cookies.remove("mID"),$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.thisPage="",$location.path("/login")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("quickHWMCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","SITE","OBJECTIVE_POINT","HWM",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,allHorDatums,allHorCollMethods,allStates,allCounties,allOPTypes,allVertDatums,allVertColMethods,allOPQualities,allHWMTypes,allHWMQualities,allMarkers,SITE,OBJECTIVE_POINT,HWM){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Quick HWM",$scope.qhwmForm={};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};$scope.decDegORdms={},$scope.aSite={MEMBER_ID:$cookies.get("mID")},$scope.aOP={DATE_ESTABLISHED:makeAdate("")},$scope.aHWM={HWM_ENVIRONMENT:"Riverine",BANK:"N/A",FLAG_DATE:makeAdate(""),STILLWATER:0},$scope.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},$scope.removeOPCarray=[],$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.horDatumList=allHorDatums,$scope.horCollMethodList=allHorCollMethods,$scope.stateList=allStates,$scope.allCountyList=allCounties,$scope.stateCountyList=[],$scope.opTypeList=allOPTypes,$scope.vertDatumList=allVertDatums,$scope.vertCollMethodList=allVertColMethods,$scope.opQualList=allOPQualities,$scope.hwmTypeList=allHWMTypes,$scope.hwmQualList=allHWMQualities,$scope.markerList=allMarkers,$scope.FTorMETER="ft",$scope.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({OBJECTIVE_POINT_ID:$scope.aOP.OBJECTIVE_POINT_ID,IDENTIFIER:"",IDENTIFIER_TYPE:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.decDegORdms.val="dd",$scope.DMS={};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.decDegORdms.val){if(void 0!==$scope.DMS.LADeg){$scope.aSite.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)}}else if(void 0!==$scope.aSite.LATITUDE_DD){var latDMS=deg_to_dms($scope.aSite.LATITUDE_DD).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.LONGITUDE_DD),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getAddress=function(){delete $scope.aSite.ADDRESS,delete $scope.aSite.CITY,delete $scope.aSite.STATE,$scope.stateCountyList=[],delete $scope.aSite.ZIP,$(".page-loading").removeClass("hidden");var geocoder=new google.maps.Geocoder,latlng=new google.maps.LatLng($scope.aSite.LATITUDE_DD,$scope.aSite.LONGITUDE_DD);geocoder.geocode({latLng:latlng},function(results,status){if(status==google.maps.GeocoderStatus.OK){var address_components=results[0].address_components,components={};$.each(address_components,function(k,v1){$.each(v1.types,function(k2,v2){components[v2]=v1.long_name})}),$scope.aSite.ADDRESS=void 0!==components.street_number?components.street_number+" "+components.route:components.route,$scope.aSite.CITY=components.locality;var thisState=$scope.stateList.filter(function(s){return s.STATE_NAME==components.administrative_area_level_1})[0];void 0!==thisState?($scope.aSite.STATE=thisState.STATE_ABBREV,$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID}),$scope.aSite.COUNTY=components.administrative_area_level_2,$scope.aSite.ZIP=components.postal_code,$scope.$apply(),$(".page-loading").addClass("hidden")):($(".page-loading").addClass("hidden"),toastr.error("The Latitude/Longitude did not return a location within the U.S."))}else $(".page-loading").addClass("hidden"),toastr.error("There was an error getting address. Please try again.")})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1}),$scope.updateCountyList=function(s){var thisState=$scope.stateList.filter(function(st){return st.STATE_ABBREV==s})[0];$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID})},$scope.UnquantChecked=function(){1==$scope.aOP.UNQUANTIFIED&&($scope.aOP.UNCERTAINTY="")};var trimOP=function(op){var OBJ_PT={OBJECTIVE_POINT_ID:void 0!==op.OBJECTIVE_POINT_ID?op.OBJECTIVE_POINT_ID:0,NAME:op.NAME,DESCRIPTION:op.DESCRIPTION,ELEV_FT:void 0!==op.ELEV_FT?op.ELEV_FT:null,DATE_ESTABLISHED:op.DATE_ESTABLISHED,OP_IS_DESTROYED:void 0!==op.OP_IS_DESTROYED?op.OP_IS_DESTROYED:0,OP_NOTES:void 0!==op.OP_NOTES?op.OP_NOTES:null,SITE_ID:op.SITE_ID,VDATUM_ID:void 0!==op.VDATUM_ID?op.VDATUM_ID:0,LATITUDE_DD:op.LATITUDE_DD,LONGITUDE_DD:op.LONGITUDE_DD,HDATUM_ID:void 0!==op.HDATUM_ID?op.HDATUM_ID:0,HCOLLECT_METHOD_ID:void 0!==op.HCOLLECT_METHOD_ID?op.HCOLLECT_METHOD_ID:0,VCOLLECT_METHOD_ID:void 0!==op.VCOLLECT_METHOD_ID?op.VCOLLECT_METHOD_ID:0,OP_TYPE_ID:op.OP_TYPE_ID,DATE_RECOVERED:void 0!==op.DATE_RECOVERED?op.DATE_RECOVERED:null,UNCERTAINTY:void 0!==op.UNCERTAINTY?op.UNCERTAINTY:null,UNQUANTIFIED:void 0!==op.UNQUANTIFIED?op.UNQUANTIFIED:null,OP_QUALITY_ID:void 0!==op.OP_QUALITY_ID?op.OP_QUALITY_ID:null};return OBJ_PT},formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.aOP.FTorMETER="ft",$scope.aOP.ELEV_FT=3.2808*$scope.aOP.ELEV_FT),"cm"==theOP.FTorCM&&($scope.aOP.FTorCM="ft",$scope.aOP.UNCERTAINTY=$scope.aOP.UNCERTAINTY/30.48)};$scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,$scope.create=function(){$(".page-loading").removeClass("hidden");var theForm=$scope.qhwmForm.quickHWM;if($scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,theForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdSiteID=0;$scope.aSite.LONGITUDE_DD>0&&($scope.aSite.LONGITUDE_DD=-1*$scope.aSite.LONGITUDE_DD),SITE.save($scope.aSite,function(response){createdSiteID=response.SITE_ID,$scope.aOP.SITE_ID=createdSiteID,$scope.aOP.LATITUDE_DD=response.LATITUDE_DD,$scope.aOP.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aOP.HDATUM_ID=response.HDATUM_ID,$scope.aOP.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.SITE_ID=createdSiteID,$scope.aHWM.WATERBODY=response.WATERBODY,$scope.aHWM.LATITUDE_DD=response.LATITUDE_DD,$scope.aHWM.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aHWM.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.HDATUM_ID=response.HDATUM_ID,$scope.aHWM.FLAG_TEAM_ID=response.MEMBER_ID,$scope.aHWM.EVENT_ID=$cookies.get("SessionEventID");var createdOP={};formatDefaults($scope.aOP);var OPtoPOST=trimOP($scope.aOP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++)OBJECTIVE_POINT.createOPControlID({id:response.OBJECTIVE_POINT_ID},$scope.addedIdentifiers[opc]).$promise;void 0!==$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),void 0!==$scope.aHWM.ELEV_FT&&(void 0===$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_DATE=makeAdate("")),$scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),HWM.save($scope.aHWM).$promise.then(function(response){toastr.success("Quick HWM created"),$(".page-loading").addClass("hidden"),$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})})})}else $(".page-loading").addClass("hidden"),$scope.status.siteOpen=!0,$scope.status.opOpen=!0,$scope.status.hwmOpen=!0,angular.element("[name='"+theForm.$name+"']").find(".ng-invalid:visible:first").focus(),(theForm.SITE_DESCRIPTION.$invalid||theForm.LATITUDE_DD.$invalid||theForm.LONGITUDE_DD.$invalid||theForm.HDATUM_ID.$invalid||theForm.HCOLLECT_METHOD_ID.$invalid||theForm.WATERBODY.$invalid||theForm.STATE.$invalidv||theForm.COUNTY.$invalid)&&($scope.siteErrors=!0),(theForm.OP_TYPE_ID.$invalid||theForm.NAME.$invalid||theForm.DESCRIPTION.$invalid||theForm.de.$invalid)&&($scope.opErrors=!0),(theForm.HWM_TYPE_ID.$invalid||theForm.HWM_ENVIRONMENT.$invalid||theForm.HWM_QUALITY_ID.$invalid||theForm.fd.$invalid)&&($scope.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("hwmModalCtrl",["$scope","$cookies","$http","$uibModalInstance","$uibModal","allDropdowns","thisHWM","hwmSite","allMembers","HWM",function($scope,$cookies,$http,$uibModalInstance,$uibModal,allDropdowns,thisHWM,hwmSite,allMembers,HWM){$scope.hwmTypeList=allDropdowns[0],$scope.hwmQualList=allDropdowns[1],$scope.HDatumsList=allDropdowns[2],$scope.hCollMList=allDropdowns[3],$scope.VDatumsList=allDropdowns[4],$scope.vCollMList=allDropdowns[5],$scope.markerList=allDropdowns[6],$scope.eventList=allDropdowns[7],$scope.userRole=$cookies.get("usersRole"),$scope.FlagMember="",$scope.SurveyMember="",$scope.showEventDD=!1,$scope.adminChanged={},$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.EVENT_ID==$scope.adminChanged.EVENT_ID})[0].EVENT_NAME},$scope.LoggedInMember=allMembers.filter(function(m){return m.MEMBER_ID==$cookies.get("mID")})[0],$scope.aHWM={},$scope.DMS={},$scope.thisHWMsite=hwmSite,$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.cancel=function(){$scope.adminChanged={},$scope.EventName=$scope.eventList.filter(function(e){return e.EVENT_ID==$scope.aHWM.EVENT_ID})[0].EVENT_NAME,$uibModalInstance.dismiss("cancel")};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.aHWM.decDegORdms)void 0!==$scope.DMS.LADeg&&($scope.aHWM.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aHWM.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={});else if(void 0!==$scope.aHWM.LATITUDE_DD){var latDMS=deg_to_dms($scope.aHWM.LATITUDE_DD).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aHWM.LONGITUDE_DD),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.aHWM.LATITUDE_DD=void 0,$scope.aHWM.LONGITUDE_DD=void 0}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisHWM?($scope.aHWM=thisHWM,$scope.EventName=$scope.eventList.filter(function(e){return e.EVENT_ID==$scope.aHWM.EVENT_ID})[0].EVENT_NAME,$scope.aHWM.FLAGGED_DATE=makeAdate($scope.aHWM.FLAGGED_DATE),null!==$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_DATE=makeAdate($scope.aHWM.SURVEY_DATE),$scope.SurveyMember=allMembers.filter(function(m){return m.MEMBER_ID==$scope.aHWM.SURVEY_TEAM_ID})[0]),$scope.FlagMember=allMembers.filter(function(m){return m.MEMBER_ID==$scope.aHWM.FLAG_TEAM_ID})[0],$scope.save=function(){if($scope.HWMForm.$valid){var updatedHWM={};void 0!==$scope.adminChanged.EVENT_ID&&($scope.aHWM.EVENT_ID=$scope.adminChanged.EVENT_ID),void 0!==$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_TEAM_ID=$cookies.get("mID")),void 0!==$scope.aHWM.ELEV_FT&&null!==$scope.aHWM.ELEV_FT&&(void 0===$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_DATE=makeAdate("")),$scope.aHWM.SURVEY_TEAM_ID=$cookies.get("mID")),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.update({id:$scope.aHWM.HWM_ID},$scope.aHWM).$promise.then(function(response){toastr.success("HWM updated"),updatedHWM=response;var sendBack=[updatedHWM,"updated"];$uibModalInstance.close(sendBack)})}},$scope.deleteHWM=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aHWM},what:function(){return"HWM"}}});DeleteModalInstance.result.then(function(hwmToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM["delete"]({id:hwmToRemove.HWM_ID},hwmToRemove).$promise.then(function(){toastr.success("HWM Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}):($scope.aHWM={SITE_ID:$scope.thisHWMsite.SITE_ID,EVENT_ID:$cookies.get("SessionEventID"),HWM_ENVIRONMENT:"Riverine",BANK:"N/A",STILLWATER:0,LATITUDE_DD:hwmSite.LATITUDE_DD,LONGITUDE_DD:hwmSite.LONGITUDE_DD,WATERBODY:hwmSite.WATERBODY,HDATUM_ID:hwmSite.HDATUM_ID,HCOLLECT_METHOD_ID:hwmSite.HCOLLECT_METHOD_ID,FLAG_DATE:makeAdate(""),FLAG_TEAM_ID:$scope.LoggedInMember.MEMBER_ID},$scope.EventName=$cookies.get("SessionEventName"),$scope.FlagMember=$scope.LoggedInMember,$scope.create=function(){if(this.HWMForm.$valid){var createdHWM={};void 0!==$scope.aHWM.SURVEY_DATE&&null!==$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_TEAM_ID=$scope.FLAG_TEAM_ID),
void 0!==$scope.aHWM.ELEV_FT&&null!==$scope.aHWM.ELEV_FT&&(void 0===$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_DATE=makeAdate("")),$scope.aHWM.SURVEY_TEAM_ID=$scope.FLAG_TEAM_ID),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.save($scope.aHWM).$promise.then(function(response){createdHWM=response,toastr.success("HWM created");var sendBack=[createdHWM,"created"];$uibModalInstance.close(sendBack)})}}),$scope.aHWM.decDegORdms="dd"}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("hwmCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteHWMs","allHWMTypes","allHWMQualities","allHorDatums","allMarkers","allHorCollMethods","allVertDatums","allVertColMethods","allEvents","MEMBER",function($scope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSiteHWMs,allHWMTypes,allHWMQualities,allHorDatums,allMarkers,allHorCollMethods,allVertDatums,allVertColMethods,allEvents,MEMBER){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.hwmCount={total:thisSiteHWMs.length},$scope.SiteHWMs=thisSiteHWMs,$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteHWMs=thisSiteHWMs.filter(function(h){return h.EVENT_ID==$cookies.get("SessionEventID")}),$scope.hwmCount={total:$scope.SiteHWMs.length}):($scope.SiteHWMs=thisSiteHWMs,$scope.hwmCount={total:$scope.SiteHWMs.length})}),$scope.showHWMModal=function(HWMclicked){var passAllLists=[allHWMTypes,allHWMQualities,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allMarkers,allEvents],modalInstance=($scope.SiteHWMs.indexOf(HWMclicked),$uibModal.open({templateUrl:"HWMmodal.html",controller:"hwmModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisHWM:function(){return 0!==HWMclicked?HWMclicked:"empty"},hwmSite:function(){return thisSite},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}}));modalInstance.result.then(function(createdHWM){if("created"==createdHWM[1]&&($scope.SiteHWMs.push(createdHWM[0]),$scope.hwmCount.total=$scope.SiteHWMs.length),"updated"==createdHWM[1]){var indexClicked=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs[indexClicked]=createdHWM[0]}if("deleted"==createdHWM[1]){var indexClicked1=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs.splice(indexClicked1,1),$scope.hwmCount.total=$scope.SiteHWMs.length}})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("helpCtrl",["$scope",function($scope){$scope.helpInfo={},$scope.helpInfo.fact="Some really interesting help will be here."}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("homeCtrl",["$scope","$rootScope","$location","$cookies","$http",function($scope,$rootScope,$location,$cookies,$http){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):$rootScope.thisPage="Home"}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("fileUploadCtrl",["$scope","$location","$cookies","Upload","multipartForm","fileTypeList","agencyList",function($scope,$location,$cookies,Upload,multipartForm,fileTypeList,agencyList){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.loggedInMember={},$scope.loggedInMember.fullName=$cookies.get("usersName"),$scope.loggedInMember.ID=$cookies.get("mID"),$scope.map="Welcome to the new STN File upload Page!!",$scope.allFileTypes=fileTypeList,$scope.allAgencies=agencyList,$scope.fileType=0,$scope.aFile={},$scope.toggleCaptionPreview=!1,$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.format="MMM dd, yyyy",$scope.fileTypeChange=function(){$scope.fileType=$scope.aFile.FILETYPE_ID},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.ShowCaption=function(){$scope.toggleCaptionPreview===!0?($scope.toggleCaptionPreview=!1,$scope.photoCaption=""):($scope.toggleCaptionPreview=!0,$scope.photoCaption="This is the photo caption.")},$scope.zones=[{name:"UTC"},{name:"PST"},{name:"MST"},{name:"CST"},{name:"EST"}],$scope.elevationStats={},$scope.submit=function(){if($scope.aFile.File){var fileParts={FileEntity:{FILETYPE_ID:$scope.aFile.FILETYPE_ID,FILE_URL:$scope.aFile.FILE_URL,PROCESSOR_ID:$scope.loggedInMember.ID,FILE_DATE:$scope.aFile.FILE_DATE,DESCRIPTION:$scope.aFile.DESCRIPTION,HWM_ID:void 0!==$scope.aFile.HWM_ID?$scope.aFile.HWM_ID:0,SITE_ID:$scope.aFile.SITE_ID,INSTRUMENT_ID:void 0!==$scope.aFile.INSTRUMENT_ID?$scope.aFile.INSTRUMENT_ID:0},File:$scope.aFile.File};multipartForm.post(fileParts)}})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("fileCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteFiles",function($scope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSiteFiles){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):$scope.fileCount={total:thisSiteFiles.length}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("eventSessionModalCtrl",["$scope","$rootScope","$cookies","$uibModalInstance","allEvents","allEventTypes","allStates","EVENT",function($scope,$rootScope,$cookies,$uibModalInstance,allEvents,allEventTypes,allStates,EVENT){$scope.EventList=allEvents,$scope.EventTypeList=allEventTypes,$scope.StateList=allStates;var chosenEv=$cookies.get("SessionEventID");$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$(".page-loading").addClass("hidden"),$scope.filterEvents=function(){var d=null!==$scope.event.DATE&&void 0!==$scope.event.DATE?$scope.event.DATE:null,t=null!==$scope.event.TYPE&&void 0!==$scope.event.TYPE?$scope.event.TYPE:0,s=null!==$scope.event.STATE&&void 0!==$scope.event.STATE?$scope.event.STATE:null;EVENT.getFilteredEvents({Date:d,Type:t,State:s}).$promise.then(function(response){$scope.EventList=response})},$scope.clearFilters=function(){$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$scope.EventList=allEvents},$scope.setEvent=function(){$scope.evID=$scope.event.EventChosen;var eventName=allEvents.filter(function(x){return x.EVENT_ID==$scope.evID})[0];$cookies.put("SessionEventID",$scope.evID),$cookies.put("SessionEventName",eventName.EVENT_NAME),$rootScope.sessionEvent="Session Event: "+eventName.EVENT_NAME+".",$uibModalInstance.dismiss("cancel")},$scope.clearEvent=function(){$scope.event={},$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.sessionEvent="",$uibModalInstance.dismiss("cancel")},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.close=function(){$uibModalInstance.dismiss("cancel")},$(".page-loading").addClass("hidden")}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("eventSessionCtrl",["$scope","$rootScope","$cookies","$uibModal","$location","$state","EVENT","EVENT_TYPE","STATE",function($scope,$rootScope,$cookies,$uibModal,$location,$state,EVENT,EVENT_TYPE,STATE){$scope.openEventModal=function(){$(".page-loading").removeClass("hidden");var modalInstance=$uibModal.open({templateUrl:"ChooseEvent.html",controller:"eventSessionModalCtrl",size:"md",backdrop:"static",windowClass:"rep-dialog",resolve:{allEvents:function(){return EVENT.getAll().$promise},allEventTypes:function(){return EVENT_TYPE.getAll().$promise},allStates:function(){return STATE.getAll().$promise}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$filter","EVENT","thisEvent",function($scope,$cookies,$location,$http,$uibModal,$filter,EVENT,thisEvent){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.anEvent={},$scope.DeleteEvent=function(ev){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ev},what:function(){return"Event"}}});modalInstance.result.then(function(nameToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT["delete"]({id:nameToRemove.EVENT_ID},function(response){var delEv={};delEv.EVENT_ID=nameToRemove.EVENT_ID,delEv.Name=nameToRemove.EVENT_NAME,delEv.Type=$scope.eventTypeList.filter(function(a){return a.EVENT_TYPE_ID==nameToRemove.EVENT_TYPE_ID})[0].TYPE,delEv.Status=$scope.eventStatList.filter(function(r){return r.EVENT_STATUS_ID==nameToRemove.EVENT_STATUS_ID})[0].STATUS;var coord=$scope.eventCoordList.filter(function(c){return c.MEMBER_ID==nameToRemove.EVENT_COORDINATOR})[0];delEv.StartDate=nameToRemove.EVENT_START_DATE,delEv.EndDate=nameToRemove.EVENT_END_DATE,delEv.Coord=void 0!==coord?coord.FNAME+" "+coord.LNAME:"";for(var index=0,i=0;i<$scope.eventList.length;i++)$scope.eventList[i].EVENT_ID==delEv.EVENT_ID&&(index=i,i=$scope.eventList.length);$scope.eventList.splice(index,1),toastr.success("Event Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$location.path("/Events/EventsList").replace()})})};var makeAdate=function(d){var aDate=new Date;void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if(void 0!==thisEvent){$scope.anEvent=thisEvent,$scope.anEvent.EVENT_START_DATE=makeAdate($scope.anEvent.EVENT_START_DATE),$scope.anEvent.EVENT_END_DATE=makeAdate($scope.anEvent.EVENT_END_DATE),$scope.thisEventType=$scope.eventTypeList.filter(function(a){return a.EVENT_TYPE_ID==thisEvent.EVENT_TYPE_ID})[0].TYPE,$scope.thisEventStatus=$scope.eventStatList.filter(function(r){return r.EVENT_STATUS_ID==thisEvent.EVENT_STATUS_ID})[0].STATUS;var EC=$scope.eventCoordList.filter(function(c){return c.MEMBER_ID==thisEvent.EVENT_COORDINATOR})[0];$scope.thisEventCoord=void 0!==EC?EC.FNAME+" "+EC.LNAME:""}else $scope.anEvent.EVENT_START_DATE=makeAdate(),$scope.anEvent.EVENT_END_DATE=makeAdate();$scope.SaveOnBlur=function(v){if(v)$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT.update({id:$scope.anEvent.EVENT_ID},$scope.anEvent,function(response){toastr.success("Event Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}},size:"sm"})}},$scope.save=function(valid){valid&&EVENT.save($scope.anEvent,function(response){toastr.success("Event Created");var E={};E.EVENT_ID=response.EVENT_ID,E.Name=response.EVENT_NAME,E.Type=$scope.eventTypeList.filter(function(a){return a.EVENT_TYPE_ID==response.EVENT_TYPE_ID})[0].TYPE,E.Status=$scope.eventStatList.filter(function(r){return r.EVENT_STATUS_ID==response.EVENT_STATUS_ID})[0].STATUS;var coord=$scope.eventCoordList.filter(function(c){return c.MEMBER_ID==response.EVENT_COORDINATOR})[0];E.StartDate=response.EVENT_START_DATE,E.EndDate=response.EVENT_END_DATE,E.Coord=void 0!==coord?coord.FNAME+" "+coord.LNAME:"",$scope.eventList.push(E)}).$promise.then(function(){$location.path("/Events/EventsList").replace()})}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","MEMBER","allEvents","allEventTypes","allEventStats",function($scope,$rootScope,$cookies,$location,$http,$filter,MEMBER,allEvents,allEventTypes,allEventStats){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Events",$scope.loggedInRole=$cookies.get("usersRole"),$scope.isAdmin="Admin"==$scope.loggedInRole?!0:!1,$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.eventTypeList=allEventTypes,$scope.eventStatList=allEventStats,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getRoleMembers({roleId:1}).$promise.then(function(response){$scope.eventCoordList=response,$scope.eventList=[];for(var x=0;x<allEvents.length;x++){var E={};E.EVENT_ID=allEvents[x].EVENT_ID,E.Name=allEvents[x].EVENT_NAME,E.Type=$scope.eventTypeList.filter(function(a){return a.EVENT_TYPE_ID==allEvents[x].EVENT_TYPE_ID})[0].TYPE,E.Status=$scope.eventStatList.filter(function(r){return r.EVENT_STATUS_ID==allEvents[x].EVENT_STATUS_ID})[0].STATUS;var coord=$scope.eventCoordList.filter(function(c){return c.MEMBER_ID==allEvents[x].EVENT_COORDINATOR})[0];E.StartDate=allEvents[x].EVENT_START_DATE,E.EndDate=allEvents[x].EVENT_END_DATE,E.Coord=void 0!==coord?coord.FNAME+" "+coord.LNAME:"",$scope.eventList.push(E)}}))}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("approvalCtrl",["$scope","$cookies","$rootScope","$location","$http","stateList","instrumentList","allSensorTypes","HWM","DATA_FILE","INSTRUMENT","MEMBER","SITE",function($scope,$cookies,$rootScope,$location,$http,stateList,instrumentList,allSensorTypes,HWM,DATA_FILE,INSTRUMENT,MEMBER,SITE){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Approval",$rootScope.activeMenu="approval",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll(function(response){$scope.allMembers=response}).$promise,$scope.allStates=stateList,$scope.allInstruments=instrumentList,$scope.allSensorTypes=allSensorTypes,$scope.ChosenEvent={},$scope.ChosenState={},$scope.ChosenMember={},$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1,$scope.search=function(){$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1;var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0,sID=void 0!==$scope.ChosenState.id?$scope.ChosenState.id:0,mID=void 0!==$scope.ChosenMember.id?$scope.ChosenMember.id:0;$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.getUnapprovedHWMs({IsApproved:"false",Event:evID,TeamMember:mID,State:sID},function(response){$scope.unApprovedHWMs=response.HWMs,$scope.showHWMbox=!0},function(errorResponse){alert("Error: "+errorResponse.statusText)}),DATA_FILE.getUnapprovedDFs({IsApproved:"false",Event:evID,Processor:mID,State:sID},function(response1){var DFs=response1;angular.forEach(DFs,function(df){var thisdfInst=$scope.allInstruments.filter(function(i){return i.INSTRUMENT_ID==df.INSTRUMENT_ID})[0],formattedDF={},siteID=thisdfInst.SITE_ID,senType=$scope.allSensorTypes.filter(function(s){return s.SENSOR_TYPE_ID==thisdfInst.SENSOR_TYPE_ID})[0];formattedDF.InstrID=thisdfInst.INSTRUMENT_ID,SITE.query({id:siteID}).$promise.then(function(response2){formattedDF.stringToShow=response2.SITE_NO+": "+senType.SENSOR,$scope.unApprovedDFs.push(formattedDF)})}),$scope.showDFbox=!0},function(errorResponse1){alert("Error: "+errorResponse1.statusText)})})}])}(),function(){"use strict";var STNResource=angular.module("STNResource",["ngResource"]),rootURL="http://stntest.wim.usgs.gov/STNServices";STNResource.factory("AGENCY",["$resource",function($resource){return $resource(rootURL+"/Agencies/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("COLLECT_TEAM",["$resource",function($resource){return $resource(rootURL+"/CollectionTeams/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventTeams:{method:"GET",isArray:!0,url:rootURL+"/Events/:Eventid/Teams.json"},getTeamMembers:{method:"GET",isArray:!0,url:rootURL+"/CollectionTeams/:id/Members.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},addMember:{method:"POST",isArray:!0,cache:!1,url:rootURL+"/CollectionTeams/:id/AddMember.json"},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT_TYPE",["$resource",function($resource){return $resource(rootURL+"/ContactTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT",["$resource",function($resource){return $resource(rootURL+"/Contacts/:id.json",{},{query:{},getContactModel:{method:"GET",isArray:!0},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},addReportContact:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/Contacts/AddReportContact"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("COUNTIES",["$resource",function($resource){return $resource(rootURL+"/Counties/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DATA_FILE",["$resource",function($resource){return $resource(rootURL+"/DataFiles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getUnapprovedDFs:{method:"GET",isArray:!0,cache:!1},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_PRIORITY",["$resource",function($resource){return $resource(rootURL+"/DeploymentPriorities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/DeploymentTypes/:id.json",{},{query:{},getDepSensType:{method:"GET",isArray:!1,url:rootURL+"/DeploymentTypes/:id/SensorType.json"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/EventStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/EventTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("FILE_TYPE",["$resource",function($resource){return $resource(rootURL+"/FileTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT",["$resource",function($resource){return $resource(rootURL+"/Events/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getFilteredEvents:{method:"GET",isArray:!0,url:rootURL+"/Events/FilteredEvents.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.service("multipartForm",["$http",function($http){this.post=function(data){var uploadUrl=rootURL+"/Files/bytes",fd=new FormData;fd.append("FileEntity",JSON.stringify(data.FileEntity)),fd.append("File",data.File),$http.post(uploadUrl,fd,{transformRequest:angular.identity,headers:{"Content-Type":void 0}})}}]),STNResource.factory("HORIZONTAL_COLL_METHODS",["$resource",function($resource){return $resource(rootURL+"/HorizontalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HORIZONTAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/HorizontalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HOUSING_TYPE",["$resource",function($resource){return $resource(rootURL+"/HousingTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM",["$resource",function($resource){return $resource(rootURL+"/hwms/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventHWMs:{method:"GET",url:rootURL+"/Events/:Eventid/hwms.json"},getUnapprovedHWMs:{method:"GET",cache:!1},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_QUALITY",["$resource",function($resource){return $resource(rootURL+"/HWMQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_TYPE",["$resource",function($resource){return $resource(rootURL+"/HWMTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INSTRUMENT",["$resource",function($resource){return $resource(rootURL+"/instruments/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0,url:rootURL+"/Instruments/GetAll.json"},getstatusInstruments:{method:"GET",isArray:!0,url:rootURL+"/Instruments.json/"},getFullInstrument:{method:"GET",url:rootURL+"/Instruments/:id/FullInstrument.json"},getInstrumentStatus:{method:"GET",url:rootURL+"/Instruments/:id/InstrumentStatus.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INSTRUMENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/InstrumentStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INST_COLL_CONDITION",["$resource",function($resource){return $resource(rootURL+"/InstrCollectConditions/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("LANDOWNER_CONTACT",["$resource",function($resource){return $resource(rootURL+"/LandOwners/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("MARKER",["$resource",function($resource){return $resource(rootURL+"/Markers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("MEMBER",["$resource",function($resource){return $resource(rootURL+"/Members/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getRoleMembers:{method:"GET",isArray:!0,url:rootURL+"/Roles/:roleId/Members.json"},getEventPeople:{method:"GET",isArray:!0,url:rootURL+"/Events/:Eventid/Members.json"},changePW:{method:"GET",isArray:!1,url:rootURL+"/Members.json"},addMember:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/Members/:pass/addMember"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},deleteMember:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/Members/:id"}})}]),STNResource.factory("NETWORK_NAME",["$resource",function($resource){return $resource(rootURL+"/NetworkNames/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("NETWORK_TYPE",["$resource",function($resource){return $resource(rootURL+"/NetworkTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OBJECTIVE_POINT",["$resource",function($resource){return $resource(rootURL+"/ObjectivePoints/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},createOPControlID:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/ObjectivePoints/:id/AddOPControls"},getOPControls:{method:"GET",cache:!1,isArray:!0,url:rootURL+"/ObjectivePoints/:id/OPControls.json"},getOPFiles:{method:"GET",cache:!1,isArray:!0,url:rootURL+"/ObjectivePoints/:id/Files"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_CONTROL_IDENTIFIER",["$resource",function($resource){return $resource(rootURL+"/OPControlIdentifiers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_QUALITY",["$resource",function($resource){return $resource(rootURL+"/ObjectivePointQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_TYPE",["$resource",function($resource){return $resource(rootURL+"/OPTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("REPORT",["$resource",function($resource){return $resource(rootURL+"/ReportingMetrics/:id.json",{},{query:{},getReportByEvSt:{method:"GET",isArray:!0},getDailyReportTots:{method:"GET",url:rootURL+"/ReportingMetrics/DailyReportTotals"},getMemberReports:{method:"GET",isArray:!0,url:rootURL+"/Members/:memberId/Reports.json"},getFilteredReports:{method:"GET",isArray:!0,url:rootURL+"/ReportingMetrics/FilteredReports.json"},getReportwithContacts:{method:"GET",isArray:!0,url:rootURL+"/ReportResource/FilteredReportModel.json"},getReportsCSV:{method:"GET",url:rootURL+"/ReportingMetrics/FilteredReports.csv"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("ROLE",["$resource",function($resource){return $resource(rootURL+"/Roles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0}})}]),STNResource.factory("SENSOR_BRAND",["$resource",function($resource){return $resource(rootURL+"/SensorBrands/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SENSOR_DEPLOYMENT",["$resource",function($resource){return $resource(rootURL+"/SensorDeployments/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SENSOR_TYPE",["$resource",function($resource){return $resource(rootURL+"/SensorTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSensorDeploymentTypes:{method:"GET",isArray:!0,url:rootURL+"/SensorTypes/:id/DeploymentTypes.json"},addSensorDeploymentType:{method:"POST",cache:!1,isArray:!0,url:rootURL+"/SensorTypes/:id/addDeploymentType"},removeSensorDeploymentType:{method:"POST",isArray:!1,url:rootURL+"/SensorTypes/:id/removeDeploymentType"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE",["$resource",function($resource){return $resource(rootURL+"/Sites/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSiteLandOwner:{method:"GET",url:rootURL+"/Sites/:id/LandOwner.json"},getSiteNetworkTypes:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkTypes.json"},postSiteNetworkType:{method:"POST",cache:!1,isArray:!0,url:rootURL+"/sites/:id/AddNetworkType"},deleteSiteNetworkType:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/sites/:id/removeNetworkType"},getSiteNetworkNames:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkNames.json"},postSiteNetworkName:{method:"POST",cache:!1,isArray:!0,url:rootURL+"/sites/:id/AddNetworkName"},deleteSiteNetworkName:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/sites/:id/removeNetworkName"},getSiteHousings:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/SiteHousings.json"},postSiteHousing:{method:"POST",cache:!1,isArray:!0,url:rootURL+"/site/:id/AddSiteSiteHousing.json"},getSiteOPs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/ObjectivePoints.json"},getSiteSensors:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/FullInstrumentList.json"},getSiteHWMs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/HWMs.json"},getSiteFiles:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/Files.json"
},getSitePeaks:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/PeakSummaries.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("STATE",["$resource",function($resource){return $resource(rootURL+"/States/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE_HOUSING",["$resource",function($resource){return $resource(rootURL+"/SiteHousings/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("STATUS_TYPE",["$resource",function($resource){return $resource(rootURL+"/StatusTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_COLL_METHOD",["$resource",function($resource){return $resource(rootURL+"/VerticalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/VerticalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Login",["$resource",function($resource){return $resource(rootURL+"/login",{},{login:{method:"GET",cache:!1,isArray:!1}})}])}(),function(){"use strict";var STNBusinessServices=angular.module("STNBusinessServices",["ngCookies"]);STNBusinessServices.factory("setCreds",["$cookies",function($cookies){return function(un,pw,userName,userRole,userID){var token=un.concat(":",pw);$cookies.STNCreds=token,$cookies.STNUsername=un,$cookies.usersName=userName,$cookies.mID=userID;var roleName;switch(userRole){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.usersRole=roleName}}]),STNBusinessServices.factory("setSessionEvent",["$cookies",function($cookies){return function(evId,evName){$cookies.SessionEventID=evId,$cookies.SessionEventName=evName}}]),STNBusinessServices.factory("setSessionTeam",["$cookies",function($cookies){return function(tId,tName){$cookies.SessionTeaID=tId,$cookies.SessionTeamName=tName}}]),STNBusinessServices.factory("setLoggedIn",["$cookies",function($cookies){var loggedIn=!1;return{isLoggedIn:function(){return loggedIn},changeLoggedIn:function(YesOrNo){loggedIn=YesOrNo}}}]),STNBusinessServices.factory("checkCreds",["$cookies",function($cookies){return function(){var returnVal=!1,STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=!0),returnVal}}]),STNBusinessServices.factory("getCreds",["$cookies",function($cookies){return function(){var returnVal="",STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=btoa(STNCreds)),returnVal}}]),STNBusinessServices.factory("getUsersNAME",["$cookies",function($cookies){return function(){var returnVal="",usesName=$cookies.usersName;return void 0!==usesName&&""!==usesName&&(returnVal=usesName),returnVal}}]),STNBusinessServices.factory("getUserID",["$cookies",function($cookies){return function(){var returnVal="",userID=$cookies.mID;return void 0!==userID&&""!==userID&&(returnVal=userID),returnVal}}]),STNBusinessServices.factory("getUsername",["$cookies",function($cookies){return function(){var returnVal="",STNUsername=$cookies.STNUsername;return void 0!==STNUsername&&""!==STNUsername&&(returnVal=STNUsername),returnVal}}]),STNBusinessServices.factory("getUserRole",["$cookies",function($cookies){return function(){var returnVal="",userRole=$cookies.usersRole;return void 0!==userRole&&""!==userRole&&(returnVal=userRole),returnVal}}]),STNBusinessServices.factory("deleteCreds",["$cookies",function($cookies){return function(){$cookies.STNCreds="",$cookies.STNUsername="",$cookies.usersName="",$cookies.usersRole=""}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ConfirmModalCtrl",["$scope","$uibModalInstance","nameToRemove","what",function($scope,$uibModalInstance,nameToRemove,what){switch(what){case"Member":$scope.nameToRmv=nameToRemove.FNAME+" "+nameToRemove.LNAME;break;case"Event":$scope.nameToRmv=nameToRemove.EVENT_NAME;break;case"Agency":$scope.nameToRmv=nameToRemove.AGENCY_NAME;break;case"Contact Type":$scope.nameToRmv=nameToRemove.TYPE;break;case"Deployment Priority":$scope.nameToRmv=nameToRemove.PRIORITY_NAME;break;case"Event Status":$scope.nameToRmv=nameToRemove.STATUS;break;case"File Type":$scope.nameToRmv=nameToRemove.FILETYPE;break;case"Horizontal Collection Method":$scope.nameToRmv=nameToRemove.HCOLLECT_METHOD;break;case"Horizontal Datum":$scope.nameToRmv=nameToRemove.DATUM_NAME;break;case"Housing Type":$scope.nameToRmv=nameToRemove.TYPE_NAME;break;case"HWM Quality":$scope.nameToRmv=nameToRemove.HWM_QUALITY;break;case"HWM Type":$scope.nameToRmv=nameToRemove.HWM_TYPE;break;case"Instrument Collection Condition":$scope.nameToRmv=nameToRemove.CONDITION;break;case"Marker":$scope.nameToRmv=nameToRemove.MARKER1;break;case"Network Name":$scope.nameToRmv=nameToRemove.NAME;break;case"Objective Point Quality":$scope.nameToRmv=nameToRemove.QUALITY;break;case"Objective Point Type":$scope.nameToRmv=nameToRemove.OP_TYPE;break;case"Sensor Brand":$scope.nameToRmv=nameToRemove.BRAND_NAME;break;case"Deployment Type":$scope.nameToRmv=nameToRemove.METHOD;break;case"Status Type":$scope.nameToRmv=nameToRemove.STATUS;break;case"Sensor Type":$scope.nameToRmv=nameToRemove.SENSOR;break;case"Network Type":$scope.nameToRmv=nameToRemove.NETWORK_TYPE_NAME;break;case"Vertical Collection Method":$scope.nameToRmv=nameToRemove.VCOLLECT_METHOD;break;case"Vertical Datum":$scope.nameToRmv=nameToRemove.DATUM_ABBREVIATION;break;case"Objective Point":$scope.nameToRmv=nameToRemove.NAME;break;case"HWM":var aDate=new Date(nameToRemove.FLAG_DATE),year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=monthNames[month]+" "+day+", "+year;$scope.nameToRmv="Flagged on: "+dateWOtime;break;case"Sensor":$scope.nameToRmv=nameToRemove.Deployment_Type}$scope.what=what,$scope.ok=function(){$uibModalInstance.close(nameToRemove)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),!function($){function Inputmask(alias,options){return this instanceof Inputmask?("object"==typeof alias?options=alias:(options=options||{},options.alias=alias),this.el=void 0,this.opts=$.extend(!0,{},this.defaults,options),this.noMasksCache=options&&void 0!==options.definitions,this.userOptions=options||{},void resolveAlias(this.opts.alias,options,this.opts)):new Inputmask(alias,options)}function isInputEventSupported(eventName){var el=document.createElement("input"),evName="on"+eventName,isSupported=evName in el;return isSupported||(el.setAttribute(evName,"return;"),isSupported="function"==typeof el[evName]),el=null,isSupported}function isInputTypeSupported(inputType){var isSupported="text"===inputType||"tel"===inputType||"password"===inputType;if(!isSupported){var el=document.createElement("input");el.setAttribute("type",inputType),isSupported="text"===el.type,el=null}return isSupported}function resolveAlias(aliasStr,options,opts){var aliasDefinition=opts.aliases[aliasStr];return aliasDefinition?(aliasDefinition.alias&&resolveAlias(aliasDefinition.alias,void 0,opts),$.extend(!0,opts,aliasDefinition),$.extend(!0,opts,options),!0):(null===opts.mask&&(opts.mask=aliasStr),!1)}function importAttributeOptions(npt,opts,userOptions){function importOption(option,optionData){optionData=void 0!==optionData?optionData:npt.getAttribute("data-inputmask-"+option),null!==optionData&&("string"==typeof optionData&&(0===option.indexOf("on")?optionData=window[optionData]:"false"===optionData?optionData=!1:"true"===optionData&&(optionData=!0)),"mask"===option&&0===optionData.indexOf("[")?(userOptions[option]=optionData.replace(/[\s[\]]/g,"").split(","),userOptions[option][0]=userOptions[option][0].replace("'",""),userOptions[option][userOptions[option].length-1]=userOptions[option][userOptions[option].length-1].replace("'","")):userOptions[option]=optionData)}var option,dataoptions,optionData,attrOptions=npt.getAttribute("data-inputmask");attrOptions&&""!==attrOptions&&(attrOptions=attrOptions.replace(new RegExp("'","g"),'"'),dataoptions=JSON.parse("{"+attrOptions+"}"));for(option in opts){if(dataoptions){optionData=void 0;for(var p in dataoptions)if(p.toLowerCase()===option.toLowerCase()){optionData=dataoptions[p];break}}importOption(option,optionData)}if(userOptions.alias){resolveAlias(userOptions.alias,userOptions,opts);for(option in opts)importOption(option)}return $.extend(!0,opts,userOptions),opts}function generateMaskSet(opts,nocache){function analyseMask(mask){function MaskToken(isGroup,isOptional,isQuantifier,isAlternator){this.matches=[],this.isGroup=isGroup||!1,this.isOptional=isOptional||!1,this.isQuantifier=isQuantifier||!1,this.isAlternator=isAlternator||!1,this.quantifier={min:1,max:1}}function insertTestDefinition(mtoken,element,position){var maskdef=opts.definitions[element];position=void 0!==position?position:mtoken.matches.length;var prevMatch=mtoken.matches[position-1];if(maskdef&&!escaped){maskdef.placeholder=$.isFunction(maskdef.placeholder)?maskdef.placeholder(opts):maskdef.placeholder;for(var prevalidators=maskdef.prevalidator,prevalidatorsL=prevalidators?prevalidators.length:0,i=1;i<maskdef.cardinality;i++){var prevalidator=prevalidatorsL>=i?prevalidators[i-1]:[],validator=prevalidator.validator,cardinality=prevalidator.cardinality;mtoken.matches.splice(position++,0,{fn:validator?"string"==typeof validator?new RegExp(validator):new function(){this.test=validator}:new RegExp("."),cardinality:cardinality?cardinality:1,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element}),prevMatch=mtoken.matches[position-1]}mtoken.matches.splice(position++,0,{fn:maskdef.validator?"string"==typeof maskdef.validator?new RegExp(maskdef.validator):new function(){this.test=maskdef.validator}:new RegExp("."),cardinality:maskdef.cardinality,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element})}else mtoken.matches.splice(position++,0,{fn:null,cardinality:0,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==element,casing:null,def:element,placeholder:void 0,mask:element}),escaped=!1}function verifyGroupMarker(lastMatch,isOpenGroup){lastMatch.isGroup&&(lastMatch.isGroup=!1,insertTestDefinition(lastMatch,opts.groupmarker.start,0),isOpenGroup!==!0&&insertTestDefinition(lastMatch,opts.groupmarker.end))}function maskCurrentToken(m,currentToken,lastMatch,extraCondition){currentToken.matches.length>0&&(void 0===extraCondition||extraCondition)&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch)),insertTestDefinition(currentToken,m)}function defaultCase(){if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],maskCurrentToken(m,currentOpeningToken,lastMatch,!currentOpeningToken.isAlternator),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else maskCurrentToken(m,currentToken,lastMatch)}function reverseTokens(maskToken){function reverseStatic(st){return st===opts.optionalmarker.start?st=opts.optionalmarker.end:st===opts.optionalmarker.end?st=opts.optionalmarker.start:st===opts.groupmarker.start?st=opts.groupmarker.end:st===opts.groupmarker.end&&(st=opts.groupmarker.start),st}maskToken.matches=maskToken.matches.reverse();for(var match in maskToken.matches){var intMatch=parseInt(match);if(maskToken.matches[match].isQuantifier&&maskToken.matches[intMatch+1]&&maskToken.matches[intMatch+1].isGroup){var qt=maskToken.matches[match];maskToken.matches.splice(match,1),maskToken.matches.splice(intMatch+1,0,qt)}maskToken.matches[match]=void 0!==maskToken.matches[match].matches?reverseTokens(maskToken.matches[match]):reverseStatic(maskToken.matches[match])}return maskToken}for(var match,m,openingToken,currentOpeningToken,alternator,lastMatch,groupToken,tokenizer=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,escaped=!1,currentToken=new MaskToken,openenings=[],maskTokens=[];match=tokenizer.exec(mask);)if(m=match[0],escaped)defaultCase();else switch(m.charAt(0)){case opts.escapeChar:escaped=!0;break;case opts.optionalmarker.end:case opts.groupmarker.end:if(openingToken=openenings.pop(),void 0!==openingToken)if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(openingToken),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else currentToken.matches.push(openingToken);else defaultCase();break;case opts.optionalmarker.start:openenings.push(new MaskToken(!1,!0));break;case opts.groupmarker.start:openenings.push(new MaskToken(!0));break;case opts.quantifiermarker.start:var quantifier=new MaskToken(!1,!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(("*"===mq1||"+"===mq1)&&(mq0="*"===mq1?0:1),quantifier.quantifier={min:mq0,max:mq1},openenings.length>0){var matches=openenings[openenings.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifier)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifier);break;case opts.alternatormarker:openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],lastMatch=currentOpeningToken.matches.pop()):lastMatch=currentToken.matches.pop(),lastMatch.isAlternator?openenings.push(lastMatch):(alternator=new MaskToken(!1,!1,!1,!0),alternator.matches.push(lastMatch),openenings.push(alternator));break;default:defaultCase()}for(;openenings.length>0;)openingToken=openenings.pop(),verifyGroupMarker(openingToken,!0),currentToken.matches.push(openingToken);return currentToken.matches.length>0&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch),maskTokens.push(currentToken)),opts.numericInput&&reverseTokens(maskTokens[0]),maskTokens}function generateMask(mask,metadata){if(null===mask||""===mask)return void 0;if(1===mask.length&&opts.greedy===!1&&0!==opts.repeat&&(opts.placeholder=""),opts.repeat>0||"*"===opts.repeat||"+"===opts.repeat){var repeatStart="*"===opts.repeat?0:"+"===opts.repeat?1:opts.repeat;mask=opts.groupmarker.start+mask+opts.groupmarker.end+opts.quantifiermarker.start+repeatStart+","+opts.repeat+opts.quantifiermarker.end}var masksetDefinition;return void 0===Inputmask.prototype.masksCache[mask]||nocache===!0?(masksetDefinition={mask:mask,maskToken:analyseMask(mask),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:metadata},nocache!==!0&&(Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]=masksetDefinition,masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]))):masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]),masksetDefinition}function preProcessMask(mask){return mask=mask.toString()}var ms;if($.isFunction(opts.mask)&&(opts.mask=opts.mask(opts)),$.isArray(opts.mask)){if(opts.mask.length>1){opts.keepStatic=null===opts.keepStatic?!0:opts.keepStatic;var altMask="(";return $.each(opts.numericInput?opts.mask.reverse():opts.mask,function(ndx,msk){altMask.length>1&&(altMask+=")|("),altMask+=preProcessMask(void 0===msk.mask||$.isFunction(msk.mask)?msk:msk.mask)}),altMask+=")",generateMask(altMask,opts.mask)}opts.mask=opts.mask.pop()}return opts.mask&&(ms=void 0===opts.mask.mask||$.isFunction(opts.mask.mask)?generateMask(preProcessMask(opts.mask),opts.mask):generateMask(preProcessMask(opts.mask.mask),opts.mask)),ms}function maskScope(actionObj,maskset,opts){function getMaskTemplate(baseOnInput,minimalPos,includeInput){minimalPos=minimalPos||0;var ndxIntlzr,test,testPos,maskTemplate=[],pos=0;do{if(baseOnInput===!0&&getMaskSet().validPositions[pos]){var validPos=getMaskSet().validPositions[pos];test=validPos.match,ndxIntlzr=validPos.locator.slice(),maskTemplate.push(includeInput===!0?validPos.input:getPlaceholder(pos,test))}else testPos=getTestTemplate(pos,ndxIntlzr,pos-1),test=testPos.match,ndxIntlzr=testPos.locator.slice(),maskTemplate.push(getPlaceholder(pos,test));pos++}while((void 0===maxLength||maxLength>pos-1)&&null!==test.fn||null===test.fn&&""!==test.def||minimalPos>=pos);return maskTemplate.pop(),maskTemplate}function getMaskSet(){return maskset}function resetMaskSet(soft){var maskset=getMaskSet();maskset.buffer=void 0,maskset.tests={},soft!==!0&&(maskset._buffer=void 0,maskset.validPositions={},maskset.p=0)}function getLastValidPosition(closestTo,strict){var maskset=getMaskSet(),lastValidPosition=-1,valids=maskset.validPositions;void 0===closestTo&&(closestTo=-1);var before=lastValidPosition,after=lastValidPosition;for(var posNdx in valids){var psNdx=parseInt(posNdx);valids[psNdx]&&(strict||null!==valids[psNdx].match.fn)&&(closestTo>=psNdx&&(before=psNdx),psNdx>=closestTo&&(after=psNdx))}return lastValidPosition=-1!==before&&closestTo-before>1||closestTo>after?before:after}function setValidPosition(pos,validTest,fromSetValid){if(opts.insertMode&&void 0!==getMaskSet().validPositions[pos]&&void 0===fromSetValid){var i,positionsClone=$.extend(!0,{},getMaskSet().validPositions),lvp=getLastValidPosition();for(i=pos;lvp>=i;i++)delete getMaskSet().validPositions[i];getMaskSet().validPositions[pos]=validTest;var j,valid=!0,vps=getMaskSet().validPositions;for(i=j=pos;lvp>=i;i++){var t=positionsClone[i];if(void 0!==t)for(var posMatch=j,prevPosMatch=-1;posMatch<getMaskLength()&&(null==t.match.fn&&vps[i]&&(vps[i].match.optionalQuantifier===!0||vps[i].match.optionality===!0)||null!=t.match.fn);){if(null===t.match.fn||!opts.keepStatic&&vps[i]&&(void 0!==vps[i+1]&&getTests(i+1,vps[i].locator.slice(),i).length>1||void 0!==vps[i].alternation)?posMatch++:posMatch=seekNext(j),positionCanMatchDefinition(posMatch,t.match.def)){valid=isValid(posMatch,t.input,!0,!0)!==!1,j=posMatch;break}if(valid=null==t.match.fn,prevPosMatch===posMatch)break;prevPosMatch=posMatch}if(!valid)break}if(!valid)return getMaskSet().validPositions=$.extend(!0,{},positionsClone),resetMaskSet(!0),!1}else getMaskSet().validPositions[pos]=validTest;return resetMaskSet(!0),!0}function stripValidPositions(start,end,nocheck,strict){var i,startPos=start;for(getMaskSet().p=start,i=startPos;end>i;i++)void 0!==getMaskSet().validPositions[i]&&(nocheck===!0||opts.canClearPosition(getMaskSet(),i,getLastValidPosition(),strict,opts)!==!1)&&delete getMaskSet().validPositions[i];for(i=startPos+1;i<=getLastValidPosition();){for(;void 0!==getMaskSet().validPositions[startPos];)startPos++;var s=getMaskSet().validPositions[startPos];if(startPos>i&&(i=startPos+1),void 0===getMaskSet().validPositions[i]&&isMask(i)||void 0!==s)i++;else{var t=getTestTemplate(i);positionCanMatchDefinition(startPos,t.match.def)?isValid(startPos,t.input||getPlaceholder(i),!0)!==!1&&(delete getMaskSet().validPositions[i],i++):isMask(i)||(i++,startPos--),startPos++}}var lvp=getLastValidPosition(),ml=getMaskLength();for(strict!==!0&&nocheck!==!0&&void 0!==getMaskSet().validPositions[lvp]&&getMaskSet().validPositions[lvp].input===opts.radixPoint&&delete getMaskSet().validPositions[lvp],i=lvp+1;ml>=i;i++)getMaskSet().validPositions[i]&&delete getMaskSet().validPositions[i];resetMaskSet(!0)}function getTestTemplate(pos,ndxIntlzr,tstPs){var testPos=getMaskSet().validPositions[pos];if(void 0===testPos)for(var testPositions=getTests(pos,ndxIntlzr,tstPs),lvp=getLastValidPosition(),lvTest=getMaskSet().validPositions[lvp]||getTests(0)[0],lvTestAltArr=void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation].toString().split(","):[],ndx=0;ndx<testPositions.length&&(testPos=testPositions[ndx],!(testPos.match&&(opts.greedy&&testPos.match.optionalQuantifier!==!0||(testPos.match.optionality===!1||testPos.match.newBlockMarker===!1)&&testPos.match.optionalQuantifier!==!0)&&(void 0===lvTest.alternation||lvTest.alternation!==testPos.alternation||void 0!==testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAltArr))));ndx++);return testPos}function getTest(pos){return getMaskSet().validPositions[pos]?getMaskSet().validPositions[pos].match:getTests(pos)[0].match}function positionCanMatchDefinition(pos,def){for(var valid=!1,tests=getTests(pos),tndx=0;tndx<tests.length;tndx++)if(tests[tndx].match&&tests[tndx].match.def===def){valid=!0;break}return valid}function getTests(pos,ndxIntlzr,tstPs,cacheable){function resolveTestFromToken(maskToken,ndxInitializer,loopNdx,quantifierRecurse){function handleMatch(match,loopNdx,quantifierRecurse){if(testPos>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+getMaskSet().mask;if(testPos===pos&&void 0===match.matches)return matches.push({match:match,locator:loopNdx.reverse()}),!0;if(void 0!==match.matches){if(match.isGroup&&quantifierRecurse!==match){if(match=handleMatch(maskToken.matches[$.inArray(match,maskToken.matches)+1],loopNdx))return!0}else if(match.isOptional){var optionalToken=match;if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse)){if(latestMatch=matches[matches.length-1].match,isFirstMatch=0===$.inArray(latestMatch,optionalToken.matches),!isFirstMatch)return!0;insertStop=!0,testPos=pos}}else if(match.isAlternator){var maltMatches,alternateToken=match,malternateMatches=[],currentMatches=matches.slice(),loopNdxCnt=loopNdx.length,altIndex=ndxInitializer.length>0?ndxInitializer.shift():-1;if(-1===altIndex||"string"==typeof altIndex){var currentPos=testPos,ndxInitializerClone=ndxInitializer.slice(),altIndexArr=[];"string"==typeof altIndex&&(altIndexArr=altIndex.split(","));for(var amndx=0;amndx<alternateToken.matches.length;amndx++){if(matches=[],match=handleMatch(alternateToken.matches[amndx],[amndx].concat(loopNdx),quantifierRecurse)||match,match!==!0&&void 0!==match&&altIndexArr[altIndexArr.length-1]<alternateToken.matches.length){var ntndx=maskToken.matches.indexOf(match)+1;maskToken.matches.length>ntndx&&(match=handleMatch(maskToken.matches[ntndx],[ntndx].concat(loopNdx.slice(1,loopNdx.length)),quantifierRecurse),match&&(altIndexArr.push(ntndx.toString()),$.each(matches,function(ndx,lmnt){lmnt.alternation=loopNdx.length-1})))}maltMatches=matches.slice(),testPos=currentPos,matches=[];for(var i=0;i<ndxInitializerClone.length;i++)ndxInitializer[i]=ndxInitializerClone[i];for(var ndx1=0;ndx1<maltMatches.length;ndx1++){var altMatch=maltMatches[ndx1];altMatch.alternation=altMatch.alternation||loopNdxCnt;for(var ndx2=0;ndx2<malternateMatches.length;ndx2++){var altMatch2=malternateMatches[ndx2];if(altMatch.match.mask===altMatch2.match.mask&&("string"!=typeof altIndex||-1!==$.inArray(altMatch.locator[altMatch.alternation].toString(),altIndexArr))){maltMatches.splice(ndx1,1),ndx1--,altMatch2.locator[altMatch.alternation]=altMatch2.locator[altMatch.alternation]+","+altMatch.locator[altMatch.alternation],altMatch2.alternation=altMatch.alternation;break}}}malternateMatches=malternateMatches.concat(maltMatches)}"string"==typeof altIndex&&(malternateMatches=$.map(malternateMatches,function(lmnt,ndx){if(isFinite(ndx)){var mamatch,alternation=lmnt.alternation,altLocArr=lmnt.locator[alternation].toString().split(",");lmnt.locator[alternation]=void 0,lmnt.alternation=void 0;for(var alndx=0;alndx<altLocArr.length;alndx++)mamatch=-1!==$.inArray(altLocArr[alndx],altIndexArr),mamatch&&(void 0!==lmnt.locator[alternation]?(lmnt.locator[alternation]+=",",lmnt.locator[alternation]+=altLocArr[alndx]):lmnt.locator[alternation]=parseInt(altLocArr[alndx]),lmnt.alternation=alternation);if(void 0!==lmnt.locator[alternation])return lmnt}})),matches=currentMatches.concat(malternateMatches),testPos=pos,insertStop=matches.length>0}else match=alternateToken.matches[altIndex]?handleMatch(alternateToken.matches[altIndex],[altIndex].concat(loopNdx),quantifierRecurse):!1;if(match)return!0}else if(match.isQuantifier&&quantifierRecurse!==maskToken.matches[$.inArray(match,maskToken.matches)-1])for(var qt=match,qndx=ndxInitializer.length>0?ndxInitializer.shift():0;qndx<(isNaN(qt.quantifier.max)?qndx+1:qt.quantifier.max)&&pos>=testPos;qndx++){var tokenGroup=maskToken.matches[$.inArray(qt,maskToken.matches)-1];if(match=handleMatch(tokenGroup,[qndx].concat(loopNdx),tokenGroup)){if(latestMatch=matches[matches.length-1].match,latestMatch.optionalQuantifier=qndx>qt.quantifier.min-1,isFirstMatch=0===$.inArray(latestMatch,tokenGroup.matches)){if(qndx>qt.quantifier.min-1){insertStop=!0,testPos=pos;break}return!0}return!0}}else if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse))return!0}else testPos++}for(var tndx=ndxInitializer.length>0?ndxInitializer.shift():0;tndx<maskToken.matches.length;tndx++)if(maskToken.matches[tndx].isQuantifier!==!0){var match=handleMatch(maskToken.matches[tndx],[tndx].concat(loopNdx),quantifierRecurse);if(match&&testPos===pos)return match;if(testPos>pos)break}}var latestMatch,isFirstMatch,maskTokens=getMaskSet().maskToken,testPos=ndxIntlzr?tstPs:0,ndxInitializer=ndxIntlzr||[0],matches=[],insertStop=!1;if(cacheable===!0&&getMaskSet().tests[pos])return getMaskSet().tests[pos];if(void 0===ndxIntlzr){for(var test,previousPos=pos-1;void 0===(test=getMaskSet().validPositions[previousPos])&&previousPos>-1&&(!getMaskSet().tests[previousPos]||void 0===(test=getMaskSet().tests[previousPos][0]));)previousPos--;void 0!==test&&previousPos>-1&&(testPos=previousPos,ndxInitializer=test.locator.slice())}for(var mtndx=ndxInitializer.shift();mtndx<maskTokens.length;mtndx++){var match=resolveTestFromToken(maskTokens[mtndx],ndxInitializer,[mtndx]);if(match&&testPos===pos||testPos>pos)break}return(0===matches.length||insertStop)&&matches.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:""},locator:[]}),getMaskSet().tests[pos]=$.extend(!0,[],matches),getMaskSet().tests[pos]}function getBufferTemplate(){return void 0===getMaskSet()._buffer&&(getMaskSet()._buffer=getMaskTemplate(!1,1)),getMaskSet()._buffer}function getBuffer(noCache){return(void 0===getMaskSet().buffer||noCache===!0)&&(noCache===!0&&(getMaskSet().test={}),getMaskSet().buffer=getMaskTemplate(!0,getLastValidPosition(),!0)),getMaskSet().buffer}function refreshFromBuffer(start,end,buffer){var i;if(buffer=buffer,start===!0)resetMaskSet(),start=0,end=buffer.length;else for(i=start;end>i;i++)delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(i=start;end>i;i++)resetMaskSet(!0),buffer[i]!==opts.skipOptionalPartCharacter&&isValid(i,buffer[i],!0,!0)}function casing(elem,test){switch(test.casing){case"upper":elem=elem.toUpperCase();break;case"lower":elem=elem.toLowerCase()}return elem}function checkAlternationMatch(altArr1,altArr2){for(var altArrC=opts.greedy?altArr2:altArr2.slice(0,1),isMatch=!1,alndx=0;alndx<altArr1.length;alndx++)if(-1!==$.inArray(altArr1[alndx],altArrC)){isMatch=!0;break}return isMatch}function isValid(pos,c,strict,fromSetValid){function _isValid(position,c,strict,fromSetValid){var rslt=!1;return $.each(getTests(position),function(ndx,tst){for(var test=tst.match,loopend=c?1:0,chrs="",i=test.cardinality;i>loopend;i--)chrs+=getBufferElement(position-(i-1));if(c&&(chrs+=c),getBuffer(!0),rslt=null!=test.fn?test.fn.test(chrs,getMaskSet(),position,strict,opts):c!==test.def&&c!==opts.skipOptionalPartCharacter||""===test.def?!1:{c:test.def,pos:position},rslt!==!1){var elem=void 0!==rslt.c?rslt.c:c;elem=elem===opts.skipOptionalPartCharacter&&null===test.fn?test.def:elem;var validatedPos=position,possibleModifiedBuffer=getBuffer();if(void 0!==rslt.remove&&($.isArray(rslt.remove)||(rslt.remove=[rslt.remove]),$.each(rslt.remove.sort(function(a,b){return b-a}),function(ndx,lmnt){stripValidPositions(lmnt,lmnt+1,!0)})),void 0!==rslt.insert&&($.isArray(rslt.insert)||(rslt.insert=[rslt.insert]),$.each(rslt.insert.sort(function(a,b){return a-b}),function(ndx,lmnt){isValid(lmnt.pos,lmnt.c,!0)})),rslt.refreshFromBuffer){var refresh=rslt.refreshFromBuffer;if(strict=!0,refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,possibleModifiedBuffer),void 0===rslt.pos&&void 0===rslt.c)return rslt.pos=getLastValidPosition(),!1;if(validatedPos=void 0!==rslt.pos?rslt.pos:position,validatedPos!==position)return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1}else if(rslt!==!0&&void 0!==rslt.pos&&rslt.pos!==position&&(validatedPos=rslt.pos,refreshFromBuffer(position,validatedPos,getBuffer().slice()),validatedPos!==position))return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1;return rslt!==!0&&void 0===rslt.pos&&void 0===rslt.c?!1:(ndx>0&&resetMaskSet(!0),setValidPosition(validatedPos,$.extend({},tst,{input:casing(elem,test)}),fromSetValid)||(rslt=!1),!1)}}),rslt}function alternate(pos,c,strict,fromSetValid){for(var lastAlt,alternation,isValidRslt,altPos,i,validPos,validPsClone=$.extend(!0,{},getMaskSet().validPositions),lAlt=getLastValidPosition();lAlt>=0&&(altPos=getMaskSet().validPositions[lAlt],!altPos||void 0===altPos.alternation||(lastAlt=lAlt,alternation=getMaskSet().validPositions[lastAlt].alternation,getTestTemplate(lastAlt).locator[altPos.alternation]===altPos.locator[altPos.alternation]));lAlt--);if(void 0!==alternation){lastAlt=parseInt(lastAlt);for(var decisionPos in getMaskSet().validPositions)if(decisionPos=parseInt(decisionPos),altPos=getMaskSet().validPositions[decisionPos],decisionPos>=lastAlt&&void 0!==altPos.alternation){var altNdxs=getMaskSet().validPositions[lastAlt].locator[alternation].toString().split(","),decisionTaker=altPos.locator[alternation]||altNdxs[0];decisionTaker.length>0&&(decisionTaker=decisionTaker.split(",")[0]);for(var mndx=0;mndx<altNdxs.length;mndx++)if(decisionTaker<altNdxs[mndx]){for(var possibilityPos,possibilities,dp=decisionPos;dp>=0;dp--)if(possibilityPos=getMaskSet().validPositions[dp],void 0!==possibilityPos){possibilities=possibilityPos.locator[alternation],possibilityPos.locator[alternation]=parseInt(altNdxs[mndx]);break}if(decisionTaker!==possibilityPos.locator[alternation]){var validInputs=[],staticInputsBeforePos=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&(null!=validPos.match.fn?validInputs.push(validPos.input):pos>i&&staticInputsBeforePos++),
delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(resetMaskSet(!0),opts.keepStatic=!opts.keepStatic,isValidRslt=!0;validInputs.length>0;){var input=validInputs.shift();if(input!==opts.skipOptionalPartCharacter&&!(isValidRslt=isValid(getLastValidPosition()+1,input,!1,!0)))break}if(possibilityPos.alternation=alternation,possibilityPos.locator[alternation]=possibilities,isValidRslt){var targetLvp=getLastValidPosition(pos)+1,staticInputsBeforePosAlternate=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&null==validPos.match.fn&&pos>i&&staticInputsBeforePosAlternate++;pos+=staticInputsBeforePosAlternate-staticInputsBeforePos,isValidRslt=isValid(pos>targetLvp?targetLvp:pos,c,strict,fromSetValid)}if(opts.keepStatic=!opts.keepStatic,isValidRslt)return isValidRslt;resetMaskSet(),getMaskSet().validPositions=$.extend(!0,{},validPsClone)}}break}}return!1}function trackbackAlternations(originalPos,newPos){for(var vp=getMaskSet().validPositions[newPos],targetLocator=vp.locator,tll=targetLocator.length,ps=originalPos;newPos>ps;ps++)if(!isMask(ps)){var tests=getTests(ps),bestMatch=tests[0],equality=-1;$.each(tests,function(ndx,tst){for(var i=0;tll>i;i++)tst.locator[i]&&checkAlternationMatch(tst.locator[i].toString().split(","),targetLocator[i].toString().split(","))&&i>equality&&(equality=i,bestMatch=tst)}),setValidPosition(ps,$.extend({},bestMatch,{input:bestMatch.match.def}),!0)}}strict=strict===!0;for(var buffer=getBuffer(),pndx=pos-1;pndx>-1&&!getMaskSet().validPositions[pndx];pndx--);for(pndx++;pos>pndx;pndx++)void 0===getMaskSet().validPositions[pndx]&&((!isMask(pndx)||buffer[pndx]!==getPlaceholder(pndx))&&getTests(pndx).length>1||buffer[pndx]===opts.radixPoint||"0"===buffer[pndx]&&$.inArray(opts.radixPoint,buffer)<pndx)&&_isValid(pndx,buffer[pndx],!0);var maskPos=pos,result=!1,positionsClone=$.extend(!0,{},getMaskSet().validPositions);if(maskPos<getMaskLength()&&(result=_isValid(maskPos,c,strict,fromSetValid),(!strict||fromSetValid)&&result===!1)){var currentPosValid=getMaskSet().validPositions[maskPos];if(!currentPosValid||null!==currentPosValid.match.fn||currentPosValid.match.def!==c&&c!==opts.skipOptionalPartCharacter){if((opts.insertMode||void 0===getMaskSet().validPositions[seekNext(maskPos)])&&!isMask(maskPos))for(var nPos=maskPos+1,snPos=seekNext(maskPos);snPos>=nPos;nPos++)if(result=_isValid(nPos,c,strict,fromSetValid),result!==!1){trackbackAlternations(maskPos,nPos),maskPos=nPos;break}}else result={caret:seekNext(maskPos)}}if(result===!1&&opts.keepStatic&&isComplete(buffer)&&(result=alternate(pos,c,strict,fromSetValid)),result===!0&&(result={pos:maskPos}),$.isFunction(opts.postValidation)&&result!==!1&&!strict){var postValidResult=opts.postValidation(getBuffer(!0),opts);if(postValidResult){if(postValidResult.refreshFromBuffer){var refresh=postValidResult.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,postValidResult.buffer),resetMaskSet(!0),result=postValidResult}}else resetMaskSet(!0),getMaskSet().validPositions=$.extend(!0,{},positionsClone),result=!1}return result}function isMask(pos){var test=getTest(pos);if(null!=test.fn)return test.fn;if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var tests=getTests(pos),staticAlternations=!0,i=0;i<tests.length;i++)if(""!==tests[i].match.def&&(void 0===tests[i].alternation||tests[i].locator[tests[i].alternation].length>1)){staticAlternations=!1;break}return staticAlternations}return!1}function getMaskLength(){var maskLength;maxLength=void 0!==el?el.maxLength:void 0,-1===maxLength&&(maxLength=void 0);var pos,lvp=getLastValidPosition(),testPos=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==testPos?testPos.locator.slice():void 0;for(pos=lvp+1;void 0===testPos||null!==testPos.match.fn||null===testPos.match.fn&&""!==testPos.match.def;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice();var lastTest=getTest(pos-1);return maskLength=""!==lastTest.def?pos:pos-1,void 0===maxLength||maxLength>maskLength?maskLength:maxLength}function seekNext(pos,newBlock){var maskL=getMaskLength();if(pos>=maskL)return maskL;for(var position=pos;++position<maskL&&(newBlock===!0&&(getTest(position).newBlockMarker!==!0||!isMask(position))||newBlock!==!0&&!isMask(position)&&(opts.nojumps!==!0||opts.nojumpsThreshold>position)););return position}function seekPrevious(pos,newBlock){var position=pos;if(0>=position)return 0;for(;--position>0&&(newBlock===!0&&getTest(position).newBlockMarker!==!0||newBlock!==!0&&!isMask(position)););return position}function getBufferElement(position){return void 0===getMaskSet().validPositions[position]?getPlaceholder(position):getMaskSet().validPositions[position].input}function writeBuffer(input,buffer,caretPos,event,triggerInputEvent){if(event&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite.call(input,event,buffer,caretPos,opts);if(result){if(result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer||buffer),buffer=getBuffer(!0)}void 0!==caretPos&&(caretPos=void 0!==result.caret?result.caret:caretPos)}}input.inputmask._valueSet(buffer.join("")),void 0===caretPos||void 0!==event&&"blur"===event.type||caret(input,caretPos),triggerInputEvent===!0&&(skipInputEvent=!0,$(input).trigger("input"))}function getPlaceholder(pos,test){if(test=test||getTest(pos),void 0!==test.placeholder)return test.placeholder;if(null===test.fn){if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var prevTest,tests=getTests(pos),hasAlternations=!1,i=0;i<tests.length;i++){if(prevTest&&""!==tests[i].match.def&&tests[i].match.def!==prevTest.match.def&&(void 0===tests[i].alternation||tests[i].alternation===prevTest.alternation)){hasAlternations=!0;break}tests[i].match.optionality!==!0&&tests[i].match.optionalQuantifier!==!0&&(prevTest=tests[i])}if(hasAlternations)return opts.placeholder.charAt(pos%opts.placeholder.length)}return test.def}return opts.placeholder.charAt(pos%opts.placeholder.length)}function checkVal(input,writeOut,strict,nptvl){function isTemplateMatch(){var isMatch=!1,charCodeNdx=getBufferTemplate().slice(initialNdx,seekNext(initialNdx)).join("").indexOf(charCodes);if(-1!==charCodeNdx&&!isMask(initialNdx)){isMatch=!0;for(var bufferTemplateArr=getBufferTemplate().slice(initialNdx,initialNdx+charCodeNdx),i=0;i<bufferTemplateArr.length;i++)if(" "!==bufferTemplateArr[i]){isMatch=!1;break}}return isMatch}var inputValue=nptvl.slice(),charCodes="",initialNdx=0;if(resetMaskSet(),getMaskSet().p=seekNext(-1),!strict)if(opts.autoUnmask!==!0){var staticInput=getBufferTemplate().slice(0,seekNext(-1)).join(""),matches=inputValue.join("").match(new RegExp("^"+Inputmask.escapeRegex(staticInput),"g"));matches&&matches.length>0&&(inputValue.splice(0,matches.length*staticInput.length),initialNdx=seekNext(initialNdx))}else initialNdx=seekNext(initialNdx);$.each(inputValue,function(ndx,charCode){var keypress=$.Event("keypress");keypress.which=charCode.charCodeAt(0),charCodes+=charCode;var lvp=getLastValidPosition(void 0,!0),lvTest=getMaskSet().validPositions[lvp],nextTest=getTestTemplate(lvp+1,lvTest?lvTest.locator.slice():void 0,lvp);if(!isTemplateMatch()||strict||opts.autoUnmask){var pos=strict?ndx:null==nextTest.match.fn&&nextTest.match.optionality&&lvp+1<getMaskSet().p?lvp+1:getMaskSet().p;keypressEvent.call(input,keypress,!0,!1,strict,pos),initialNdx=pos+1,charCodes=""}else keypressEvent.call(input,keypress,!0,!1,!0,lvp+1)}),writeOut&&writeBuffer(input,getBuffer(),document.activeElement===input?seekNext(getLastValidPosition(0)):void 0,$.Event("checkval"))}function unmaskedvalue(input){if(input&&void 0===input.inputmask)return input.value;var umValue=[],vps=getMaskSet().validPositions;for(var pndx in vps)vps[pndx].match&&null!=vps[pndx].match.fn&&umValue.push(vps[pndx].input);var unmaskedValue=0===umValue.length?null:(isRTL?umValue.reverse():umValue).join("");if(null!==unmaskedValue){var bufferValue=(isRTL?getBuffer().slice().reverse():getBuffer()).join("");$.isFunction(opts.onUnMask)&&(unmaskedValue=opts.onUnMask.call(input,bufferValue,unmaskedValue,opts)||unmaskedValue)}return unmaskedValue}function caret(input,begin,end){function translatePosition(pos){if(isRTL&&"number"==typeof pos&&(!opts.greedy||""!==opts.placeholder)){var bffrLght=getBuffer().join("").length;pos=bffrLght-pos}return pos}var range;if("number"!=typeof begin)return input.setSelectionRange?(begin=input.selectionStart,end=input.selectionEnd):window.getSelection?(range=window.getSelection().getRangeAt(0),(range.commonAncestorContainer.parentNode===input||range.commonAncestorContainer===input)&&(begin=range.startOffset,end=range.endOffset)):document.selection&&document.selection.createRange&&(range=document.selection.createRange(),begin=0-range.duplicate().moveStart("character",-1e5),end=begin+range.text.length),{begin:translatePosition(begin),end:translatePosition(end)};begin=translatePosition(begin),end=translatePosition(end),end="number"==typeof end?end:begin;var scrollCalc=parseInt(((input.ownerDocument.defaultView||window).getComputedStyle?(input.ownerDocument.defaultView||window).getComputedStyle(input,null):input.currentStyle).fontSize)*end;if(input.scrollLeft=scrollCalc>input.scrollWidth?scrollCalc:0,androidchrome||opts.insertMode!==!1||begin!==end||end++,input.setSelectionRange)input.selectionStart=begin,input.selectionEnd=end;else if(window.getSelection){if(range=document.createRange(),void 0===input.firstChild){var textNode=document.createTextNode("");input.appendChild(textNode)}range.setStart(input.firstChild,begin<input.inputmask._valueGet().length?begin:input.inputmask._valueGet().length),range.setEnd(input.firstChild,end<input.inputmask._valueGet().length?end:input.inputmask._valueGet().length),range.collapse(!0);var sel=window.getSelection();sel.removeAllRanges(),sel.addRange(range)}else input.createTextRange&&(range=input.createTextRange(),range.collapse(!0),range.moveEnd("character",end),range.moveStart("character",begin),range.select())}function determineLastRequiredPosition(returnDefinition){var pos,testPos,buffer=getBuffer(),bl=buffer.length,lvp=getLastValidPosition(),positions={},lvTest=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==lvTest?lvTest.locator.slice():void 0;for(pos=lvp+1;pos<buffer.length;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice(),positions[pos]=$.extend(!0,{},testPos);var lvTestAlt=lvTest&&void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation]:void 0;for(pos=bl-1;pos>lvp&&(testPos=positions[pos],(testPos.match.optionality||testPos.match.optionalQuantifier||lvTestAlt&&(lvTestAlt!==positions[pos].locator[lvTest.alternation]&&null!=testPos.match.fn||null===testPos.match.fn&&testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAlt.toString().split(","))&&""!==getTests(pos)[0].def))&&buffer[pos]===getPlaceholder(pos,testPos.match));pos--)bl--;return returnDefinition?{l:bl,def:positions[bl]?positions[bl].match:void 0}:bl}function clearOptionalTail(buffer){for(var rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),buffer}function isComplete(buffer){if($.isFunction(opts.isComplete))return opts.isComplete.call(el,buffer,opts);if("*"===opts.repeat)return void 0;var complete=!1,lrp=determineLastRequiredPosition(!0),aml=seekPrevious(lrp.l);if(void 0===lrp.def||lrp.def.newBlockMarker||lrp.def.optionality||lrp.def.optionalQuantifier){complete=!0;for(var i=0;aml>=i;i++){var test=getTestTemplate(i).match;if(null!==test.fn&&void 0===getMaskSet().validPositions[i]&&test.optionality!==!0&&test.optionalQuantifier!==!0||null===test.fn&&buffer[i]!==getPlaceholder(i,test)){complete=!1;break}}}return complete}function isSelection(begin,end){return isRTL?begin-end>1||begin-end===1&&opts.insertMode:end-begin>1||end-begin===1&&opts.insertMode}function wrapEventRuler(eventHandler){return function(e){var inComposition=!1,keydownPressed=!1;if(void 0===this.inputmask){var imOpts=$.data(this,"_inputmask_opts");imOpts?new Inputmask(imOpts).mask(this):$(this).off(".inputmask")}else{if("setvalue"===e.type||!(this.disabled||this.readOnly&&!("keydown"===e.type&&e.ctrlKey&&67===e.keyCode||opts.tabThrough===!1&&e.keyCode===Inputmask.keyCode.TAB))){switch(e.type){case"input":if(skipInputEvent===!0||inComposition===!0)return skipInputEvent=!1,e.preventDefault();keydownPressed=!1;break;case"keydown":skipKeyPressEvent=!1,inComposition=!1,keydownPressed=!0;break;case"keypress":if(skipKeyPressEvent===!0)return e.preventDefault();skipKeyPressEvent=!0;break;case"compositionstart":inComposition=!0;break;case"compositionupdate":skipInputEvent=keydownPressed;break;case"compositionend":inComposition=!1,keydownPressed=!1;break;case"cut":skipInputEvent=!0}return eventHandler.apply(this,arguments)}e.preventDefault()}}}function patchValueProperty(npt){function patchValhook(type){if($.valHooks&&(void 0===$.valHooks[type]||$.valHooks[type].inputmaskpatch!==!0)){var valhookGet=$.valHooks[type]&&$.valHooks[type].get?$.valHooks[type].get:function(elem){return elem.value},valhookSet=$.valHooks[type]&&$.valHooks[type].set?$.valHooks[type].set:function(elem,value){return elem.value=value,elem};$.valHooks[type]={get:function(elem){if(elem.inputmask){if(elem.inputmask.opts.autoUnmask)return elem.inputmask.unmaskedvalue();var result=valhookGet(elem),maskset=elem.inputmask.maskset,bufferTemplate=maskset._buffer;return bufferTemplate=bufferTemplate?bufferTemplate.join(""):"",result!==bufferTemplate?result:""}return valhookGet(elem)},set:function(elem,value){var result,$elem=$(elem);return result=valhookSet(elem,value),elem.inputmask&&$elem.trigger("setvalue.inputmask"),result},inputmaskpatch:!0}}}function getter(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():valueGet.call(this)!==getBufferTemplate().join("")?document.activeElement===this&&opts.clearMaskOnLostFocus?(isRTL?clearOptionalTail(getBuffer()).reverse():clearOptionalTail(getBuffer())).join(""):valueGet.call(this):"":valueGet.call(this)}function setter(value){valueSet.call(this,value),this.inputmask&&$(this).trigger("setvalue.inputmask")}function installNativeValueSetFallback(npt){$(npt).on("mouseenter.inputmask",wrapEventRuler(function(event){var $input=$(this),input=this,value=input.inputmask._valueGet();""!==value&&value!==getBuffer().join("")&&$input.trigger("setvalue.inputmask")}))}var valueGet,valueSet;npt.inputmask.__valueGet||(Object.getOwnPropertyDescriptor&&void 0===npt.value?(valueGet=function(){return this.textContent},valueSet=function(value){this.textContent=value},Object.defineProperty(npt,"value",{get:getter,set:setter})):document.__lookupGetter__&&npt.__lookupGetter__("value")?(valueGet=npt.__lookupGetter__("value"),valueSet=npt.__lookupSetter__("value"),npt.__defineGetter__("value",getter),npt.__defineSetter__("value",setter)):(valueGet=function(){return npt.value},valueSet=function(value){npt.value=value},patchValhook(npt.type),installNativeValueSetFallback(npt)),npt.inputmask.__valueGet=valueGet,npt.inputmask._valueGet=function(overruleRTL){return isRTL&&overruleRTL!==!0?valueGet.call(this.el).split("").reverse().join(""):valueGet.call(this.el)},npt.inputmask.__valueSet=valueSet,npt.inputmask._valueSet=function(value,overruleRTL){valueSet.call(this.el,null===value||void 0===value?"":overruleRTL!==!0&&isRTL?value.split("").reverse().join(""):value)})}function handleRemove(input,k,pos,strict){function generalize(){if(opts.keepStatic){resetMaskSet(!0);var lastAlt,validInputs=[],positionsClone=$.extend(!0,{},getMaskSet().validPositions);for(lastAlt=getLastValidPosition();lastAlt>=0;lastAlt--){var validPos=getMaskSet().validPositions[lastAlt];if(validPos&&(null!=validPos.match.fn&&validInputs.push(validPos.input),delete getMaskSet().validPositions[lastAlt],void 0!==validPos.alternation&&validPos.locator[validPos.alternation]===getTestTemplate(lastAlt).locator[validPos.alternation]))break}if(lastAlt>-1)for(;validInputs.length>0;){getMaskSet().p=seekNext(getLastValidPosition());var keypress=$.Event("keypress");keypress.which=validInputs.pop().charCodeAt(0),keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}else getMaskSet().validPositions=$.extend(!0,{},positionsClone)}}if((opts.numericInput||isRTL)&&(k===Inputmask.keyCode.BACKSPACE?k=Inputmask.keyCode.DELETE:k===Inputmask.keyCode.DELETE&&(k=Inputmask.keyCode.BACKSPACE),isRTL)){var pend=pos.end;pos.end=pos.begin,pos.begin=pend}k===Inputmask.keyCode.BACKSPACE&&(pos.end-pos.begin<1||opts.insertMode===!1)?(pos.begin=seekPrevious(pos.begin),void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.begin--):k===Inputmask.keyCode.DELETE&&pos.begin===pos.end&&(pos.end=isMask(pos.end)?pos.end+1:seekNext(pos.end)+1,void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.end++),stripValidPositions(pos.begin,pos.end,!1,strict),strict!==!0&&generalize();var lvp=getLastValidPosition(pos.begin);lvp<pos.begin?(-1===lvp&&resetMaskSet(),getMaskSet().p=seekNext(lvp)):strict!==!0&&(getMaskSet().p=pos.begin)}function keydownEvent(e){var input=this,$input=$(input),k=e.keyCode,pos=caret(input);k===Inputmask.keyCode.BACKSPACE||k===Inputmask.keyCode.DELETE||iphone&&127===k||e.ctrlKey&&88===k&&!isInputEventSupported("cut")?(e.preventDefault(),88===k&&(undoValue=getBuffer().join("")),handleRemove(input,k,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")?$input.trigger("cleared"):isComplete(getBuffer())===!0&&$input.trigger("complete"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)):k===Inputmask.keyCode.END||k===Inputmask.keyCode.PAGE_DOWN?setTimeout(function(){var caretPos=seekNext(getLastValidPosition());opts.insertMode||caretPos!==getMaskLength()||e.shiftKey||caretPos--,caret(input,e.shiftKey?pos.begin:caretPos,caretPos)},0):k===Inputmask.keyCode.HOME&&!e.shiftKey||k===Inputmask.keyCode.PAGE_UP?caret(input,0,e.shiftKey?pos.begin:0):(opts.undoOnEscape&&k===Inputmask.keyCode.ESCAPE||90===k&&e.ctrlKey)&&e.altKey!==!0?(checkVal(input,!0,!1,undoValue.split("")),$input.trigger("click")):k!==Inputmask.keyCode.INSERT||e.shiftKey||e.ctrlKey?opts.tabThrough===!0&&k===Inputmask.keyCode.TAB?(e.shiftKey===!0?(null===getTest(pos.begin).fn&&(pos.begin=seekNext(pos.begin)),pos.end=seekPrevious(pos.begin,!0),pos.begin=seekPrevious(pos.end,!0)):(pos.begin=seekNext(pos.begin,!0),pos.end=seekNext(pos.begin,!0),pos.end<getMaskLength()&&pos.end--),pos.begin<getMaskLength()&&(e.preventDefault(),caret(input,pos.begin,pos.end))):opts.insertMode!==!1||e.shiftKey||(k===Inputmask.keyCode.RIGHT?setTimeout(function(){var caretPos=caret(input);caret(input,caretPos.begin)},0):k===Inputmask.keyCode.LEFT&&setTimeout(function(){var caretPos=caret(input);caret(input,isRTL?caretPos.begin+1:caretPos.begin-1)},0)):(opts.insertMode=!opts.insertMode,caret(input,opts.insertMode||pos.begin!==getMaskLength()?pos.begin:pos.begin-1)),opts.onKeyDown(e,getBuffer(),caret(input).begin,opts),ignorable=-1!==$.inArray(k,opts.ignorables)}function keypressEvent(e,checkval,writeOut,strict,ndx){var input=this,$input=$(input),k=e.which||e.charCode||e.keyCode;if(!(checkval===!0||e.ctrlKey&&e.altKey)&&(e.ctrlKey||e.metaKey||ignorable))return k===Inputmask.keyCode.ENTER&&undoValue!==getBuffer().join("")&&(undoValue=getBuffer().join(""),e.preventDefault(),setTimeout(function(){$input.trigger("change")},0)),!0;if(k){46===k&&e.shiftKey===!1&&","===opts.radixPoint&&(k=44);var forwardPosition,pos=checkval?{begin:ndx,end:ndx}:caret(input),c=String.fromCharCode(k),isSlctn=isSelection(pos.begin,pos.end);isSlctn&&(getMaskSet().undoPositions=$.extend(!0,{},getMaskSet().validPositions),handleRemove(input,Inputmask.keyCode.DELETE,pos,!0),pos.begin=getMaskSet().p,opts.insertMode||(opts.insertMode=!opts.insertMode,setValidPosition(pos.begin,strict),opts.insertMode=!opts.insertMode),isSlctn=!opts.multi),getMaskSet().writeOutBuffer=!0;var p=isRTL&&!isSlctn?pos.end:pos.begin,valResult=isValid(p,c,strict);if(valResult!==!1){if(valResult!==!0&&(p=void 0!==valResult.pos?valResult.pos:p,c=void 0!==valResult.c?valResult.c:c),resetMaskSet(!0),void 0!==valResult.caret)forwardPosition=valResult.caret;else{var vps=getMaskSet().validPositions;forwardPosition=!opts.keepStatic&&(void 0!==vps[p+1]&&getTests(p+1,vps[p].locator.slice(),p).length>1||void 0!==vps[p].alternation)?p+1:seekNext(p)}getMaskSet().p=forwardPosition}if(writeOut!==!1){var self=this;if(setTimeout(function(){opts.onKeyValidation.call(self,valResult,opts)},0),getMaskSet().writeOutBuffer&&valResult!==!1){var buffer=getBuffer();writeBuffer(input,buffer,checkval?void 0:opts.numericInput?seekPrevious(forwardPosition):forwardPosition,e,checkval!==!0),checkval!==!0&&setTimeout(function(){isComplete(buffer)===!0&&$input.trigger("complete")},0)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions);if(opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask),checkval&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite(e,getBuffer(),forwardPosition,opts);if(result&&result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer),resetMaskSet(!0),result.caret&&(getMaskSet().p=result.caret)}}if(e.preventDefault(),checkval)return valResult}}function pasteEvent(e){var input=this,ev=e.originalEvent||e,$input=$(input),inputValue=input.inputmask._valueGet(!0),caretPos=caret(input);if("propertychange"===e.type&&input.inputmask._valueGet().length<=getMaskLength())return!0;if("paste"===e.type){var valueBeforeCaret=inputValue.substr(0,caretPos.begin),valueAfterCaret=inputValue.substr(caretPos.end,inputValue.length);valueBeforeCaret===getBufferTemplate().slice(0,caretPos.begin).join("")&&(valueBeforeCaret=""),valueAfterCaret===getBufferTemplate().slice(caretPos.end).join("")&&(valueAfterCaret=""),window.clipboardData&&window.clipboardData.getData?inputValue=valueBeforeCaret+window.clipboardData.getData("Text")+valueAfterCaret:ev.clipboardData&&ev.clipboardData.getData&&(inputValue=valueBeforeCaret+ev.clipboardData.getData("text/plain")+valueAfterCaret)}var pasteValue=inputValue;if($.isFunction(opts.onBeforePaste)){if(pasteValue=opts.onBeforePaste.call(input,inputValue,opts),pasteValue===!1)return e.preventDefault(),!1;pasteValue||(pasteValue=inputValue)}return checkVal(input,!1,!1,isRTL?pasteValue.split("").reverse():pasteValue.toString().split("")),writeBuffer(input,getBuffer(),void 0,e,!0),$input.trigger("click"),isComplete(getBuffer())===!0&&$input.trigger("complete"),!1}function inputFallBackEvent(e){var input=this;checkVal(input,!0,!1,input.inputmask._valueGet().split("")),isComplete(getBuffer())===!0&&$(input).trigger("complete"),e.preventDefault()}function mobileInputEvent(e){var input=this,caretPos=caret(input),currentValue=input._valueGet();currentValue=currentValue.replace(new RegExp("("+Inputmask.escapeRegex(getBufferTemplate().join(""))+")*"),""),caretPos.begin>currentValue.length&&(caret(input,currentValue.length),caretPos=caret(input)),getBuffer().length-currentValue.length!==1||currentValue.charAt(caretPos.begin)===getBuffer()[caretPos.begin]||currentValue.charAt(caretPos.begin+1)===getBuffer()[caretPos.begin]||isMask(caretPos.begin)?inputFallBackEvent.call(this,e):(e.keyCode=opts.keyCode.BACKSPACE,keydownEvent.call(input,e)),e.preventDefault()}function compositionStartEvent(e){var ev=e.originalEvent||e;undoValue=getBuffer().join(""),""===compositionData||0!==ev.data.indexOf(compositionData)}function compositionUpdateEvent(e){var input=this,ev=e.originalEvent||e;0===ev.data.indexOf(compositionData)&&(resetMaskSet(),getMaskSet().p=seekNext(-1),skipInputEvent=!0);for(var newData=ev.data,i=0;i<newData.length;i++){var keypress=$.Event("keypress");keypress.which=newData.charCodeAt(i),skipKeyPressEvent=!1,ignorable=!1,keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}setTimeout(function(){var forwardPosition=getMaskSet().p;writeBuffer(input,getBuffer(),opts.numericInput?seekPrevious(forwardPosition):forwardPosition)},0),compositionData=ev.data}function compositionEndEvent(e){}function setValueEvent(e){var input=this,value=input.inputmask._valueGet();checkVal(input,!0,!1,($.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(input,value,opts)||value:value).split("")),undoValue=getBuffer().join(""),(opts.clearMaskOnLostFocus||opts.clearIncomplete)&&input.inputmask._valueGet()===getBufferTemplate().join("")&&input.inputmask._valueSet("")}function focusEvent(e){var input=this,nptValue=input.inputmask._valueGet();opts.showMaskOnFocus&&(!opts.showMaskOnHover||opts.showMaskOnHover&&""===nptValue)?input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer(),seekNext(getLastValidPosition())):mouseEnter===!1&&caret(input,seekNext(getLastValidPosition())),opts.positionCaretOnTab===!0&&setTimeout(function(){caret(input,seekNext(getLastValidPosition()))},0),undoValue=getBuffer().join("")}function mouseleaveEvent(e){var input=this;if(mouseEnter=!1,opts.clearMaskOnLostFocus){var buffer=getBuffer().slice(),nptValue=input.inputmask._valueGet();document.activeElement!==input&&nptValue!==input.getAttribute("placeholder")&&""!==nptValue&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer),writeBuffer(input,buffer))}}function clickEvent(e){function doRadixFocus(clickPos){if(opts.radixFocus&&""!==opts.radixPoint){var vps=getMaskSet().validPositions;if(void 0===vps[clickPos]||vps[clickPos].input===getPlaceholder(clickPos)){if(clickPos<seekNext(-1))return!0;var radixPos=$.inArray(opts.radixPoint,getBuffer());if(-1!==radixPos){for(var vp in vps)if(vp>radixPos&&vps[vp].input!==getPlaceholder(vp))return!1;return!0}}}return!1}var input=this;if(document.activeElement===input){var selectedCaret=caret(input);if(selectedCaret.begin===selectedCaret.end)if(doRadixFocus(selectedCaret.begin))caret(input,$.inArray(opts.radixPoint,getBuffer()));else{var clickPosition=selectedCaret.begin,lvclickPosition=getLastValidPosition(clickPosition),lastPosition=seekNext(lvclickPosition);lastPosition>clickPosition?caret(input,isMask(clickPosition)||isMask(clickPosition-1)?clickPosition:seekNext(clickPosition)):caret(input,opts.numericInput?0:lastPosition)}}}function dblclickEvent(e){var input=this;setTimeout(function(){caret(input,0,seekNext(getLastValidPosition()))},0)}function cutEvent(e){var input=this,$input=$(input),pos=caret(input),ev=e.originalEvent||e,clipboardData=window.clipboardData||ev.clipboardData,clipData=isRTL?getBuffer().slice(pos.end,pos.begin):getBuffer().slice(pos.begin,pos.end);clipboardData.setData("text",isRTL?clipData.reverse().join(""):clipData.join("")),document.execCommand&&document.execCommand("copy"),handleRemove(input,Inputmask.keyCode.DELETE,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")&&$input.trigger("cleared"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)}function blurEvent(e){var $input=$(this),input=this;if(input.inputmask){var nptValue=input.inputmask._valueGet(),buffer=getBuffer().slice();undoValue!==buffer.join("")&&setTimeout(function(){$input.trigger("change"),undoValue=buffer.join("")},0),""!==nptValue&&(opts.clearMaskOnLostFocus&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),isComplete(buffer)===!1&&(setTimeout(function(){$input.trigger("incomplete")},0),opts.clearIncomplete&&(resetMaskSet(),buffer=opts.clearMaskOnLostFocus?[]:getBufferTemplate().slice())),writeBuffer(input,buffer,void 0,e))}}function mouseenterEvent(e){var input=this;mouseEnter=!0,document.activeElement!==input&&opts.showMaskOnHover&&input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer())}function mask(elem){if(el=elem,$el=$(el),opts.showTooltip&&(el.title=opts.tooltip||getMaskSet().mask),("rtl"===el.dir||opts.rightAlign)&&(el.style.textAlign="right"),("rtl"===el.dir||opts.numericInput)&&(el.dir="ltr",el.removeAttribute("dir"),el.inputmask.isRTL=!0,isRTL=!0),$el.off(".inputmask"),patchValueProperty(el),("INPUT"===el.tagName&&isInputTypeSupported(el.getAttribute("type"))||el.isContentEditable)&&($(el.form).on("submit",function(){undoValue!==getBuffer().join("")&&$el.trigger("change"),opts.clearMaskOnLostFocus&&-1===getLastValidPosition()&&el.inputmask._valueGet&&el.inputmask._valueGet()===getBufferTemplate().join("")&&el.inputmask._valueSet(""),opts.removeMaskOnSubmit&&(el.inputmask._valueSet(el.inputmask.unmaskedvalue(),!0),setTimeout(function(){writeBuffer(el,getBuffer())},0))}).on("reset",function(){setTimeout(function(){$el.trigger("setvalue.inputmask")},0)}),$el.on("mouseenter.inputmask",wrapEventRuler(mouseenterEvent)).on("blur.inputmask",wrapEventRuler(blurEvent)).on("focus.inputmask",wrapEventRuler(focusEvent)).on("mouseleave.inputmask",wrapEventRuler(mouseleaveEvent)).on("click.inputmask",wrapEventRuler(clickEvent)).on("dblclick.inputmask",wrapEventRuler(dblclickEvent)).on(PasteEventType+".inputmask dragdrop.inputmask drop.inputmask",wrapEventRuler(pasteEvent)).on("cut.inputmask",wrapEventRuler(cutEvent)).on("complete.inputmask",wrapEventRuler(opts.oncomplete)).on("incomplete.inputmask",wrapEventRuler(opts.onincomplete)).on("cleared.inputmask",wrapEventRuler(opts.oncleared)).on("keydown.inputmask",wrapEventRuler(keydownEvent)).on("keypress.inputmask",wrapEventRuler(keypressEvent)),androidfirefox||$el.on("compositionstart.inputmask",wrapEventRuler(compositionStartEvent)).on("compositionupdate.inputmask",wrapEventRuler(compositionUpdateEvent)).on("compositionend.inputmask",wrapEventRuler(compositionEndEvent)),"paste"===PasteEventType&&$el.on("input.inputmask",wrapEventRuler(inputFallBackEvent)),(android||androidfirefox||androidchrome||kindle)&&($el.off("input.inputmask"),$el.on("input.inputmask",wrapEventRuler(mobileInputEvent)))),$el.on("setvalue.inputmask",wrapEventRuler(setValueEvent)),""!==el.inputmask._valueGet()||opts.clearMaskOnLostFocus===!1){var initialValue=$.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(el,el.inputmask._valueGet(),opts)||el.inputmask._valueGet():el.inputmask._valueGet();checkVal(el,!0,!1,initialValue.split(""));var buffer=getBuffer().slice();undoValue=buffer.join(""),isComplete(buffer)===!1&&opts.clearIncomplete&&resetMaskSet(),opts.clearMaskOnLostFocus&&(buffer.join("")===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),writeBuffer(el,buffer),document.activeElement===el&&caret(el,seekNext(getLastValidPosition()))}}var undoValue,compositionData,el,$el,maxLength,valueBuffer,isRTL=!1,skipKeyPressEvent=!1,skipInputEvent=!1,ignorable=!1,mouseEnter=!0;if(void 0!==actionObj)switch(actionObj.action){case"isComplete":return el=actionObj.el,isComplete(getBuffer());case"unmaskedvalue":return el=actionObj.el,void 0!==el&&void 0!==el.inputmask?(maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,valueBuffer=isRTL?el.inputmask._valueGet().split("").reverse().join(""):el.inputmask._valueGet()):valueBuffer=actionObj.value,opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(valueBuffer,opts)||valueBuffer:valueBuffer).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),unmaskedvalue(el);case"mask":
el=actionObj.el,maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,undoValue=getBuffer().join(""),mask(el);break;case"format":return opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(actionObj.value,opts)||actionObj.value:actionObj.value).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),actionObj.metadata?{value:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join(""),metadata:maskScope({action:"getmetadata"},maskset,opts)}:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join("");case"isValid":opts.numericInput&&(isRTL=!0),valueBuffer=actionObj.value.split(""),checkVal(void 0,!1,!0,isRTL?valueBuffer.reverse():valueBuffer);for(var buffer=getBuffer(),rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),isComplete(buffer)&&actionObj.value===buffer.join("");case"getemptymask":return getBufferTemplate();case"remove":el=actionObj.el,$el=$(el),maskset=el.inputmask.maskset,opts=el.inputmask.opts,el.inputmask._valueSet(unmaskedvalue(el)),$el.off(".inputmask");var valueProperty;Object.getOwnPropertyDescriptor&&(valueProperty=Object.getOwnPropertyDescriptor(el,"value")),valueProperty&&valueProperty.get?el.inputmask.__valueGet&&Object.defineProperty(el,"value",{get:el.inputmask.__valueGet,set:el.inputmask.__valueSet}):document.__lookupGetter__&&el.__lookupGetter__("value")&&el.inputmask.__valueGet&&(el.__defineGetter__("value",el.inputmask.__valueGet),el.__defineSetter__("value",el.inputmask.__valueSet)),el.inputmask=void 0;break;case"getmetadata":if($.isArray(maskset.metadata)){for(var alternation,lvp=getLastValidPosition(),firstAlt=lvp;firstAlt>=0;firstAlt--)if(getMaskSet().validPositions[firstAlt]&&void 0!==getMaskSet().validPositions[firstAlt].alternation){alternation=getMaskSet().validPositions[firstAlt].alternation;break}return void 0!==alternation?maskset.metadata[getMaskSet().validPositions[lvp].locator[alternation]]:maskset.metadata[0]}return maskset.metadata}}Inputmask.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:$.noop,onincomplete:$.noop,oncleared:$.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:$.noop,onBeforeMask:null,onBeforePaste:function(pastedValue,opts){return $.isFunction(opts.onBeforeMask)?opts.onBeforeMask(pastedValue,opts):pastedValue},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:$.noop,skipOptionalPartCharacter:" ",showTooltip:!1,tooltip:void 0,numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",groupSeparator:"",radixFocus:!1,nojumps:!1,nojumpsThreshold:0,keepStatic:null,positionCaretOnTab:!1,tabThrough:!1,supportsInputType:[],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:$.noop,postValidation:null},masksCache:{},mask:function(elems){var that=this;return"string"==typeof elems&&(elems=document.querySelectorAll(elems)),elems=elems.nodeName?[elems]:elems,$.each(elems,function(ndx,el){var scopedOpts=$.extend(!0,{},that.opts);importAttributeOptions(el,scopedOpts,$.extend(!0,{},that.userOptions));var maskset=generateMaskSet(scopedOpts,that.noMasksCache);void 0!==maskset&&(void 0!==el.inputmask&&el.inputmask.remove(),el.inputmask=new Inputmask,el.inputmask.opts=scopedOpts,el.inputmask.noMasksCache=that.noMasksCache,el.inputmask.userOptions=$.extend(!0,{},that.userOptions),el.inputmask.el=el,el.inputmask.maskset=maskset,el.inputmask.isRTL=!1,$.data(el,"_inputmask_opts",scopedOpts),maskScope({action:"mask",el:el}))}),elems?elems[0].inputmask||this:this},option:function(options){return"string"==typeof options?this.opts[options]:"object"==typeof options?($.extend(this.opts,options),$.extend(this.userOptions,options),this.el&&(void 0!==options.mask||void 0!==options.alias?this.mask(this.el):($.data(this.el,"_inputmask_opts",this.opts),maskScope({action:"mask",el:this.el}))),this):void 0},unmaskedvalue:function(value){return maskScope({action:"unmaskedvalue",el:this.el,value:value},this.el&&this.el.inputmask?this.el.inputmask.maskset:generateMaskSet(this.opts,this.noMasksCache),this.opts)},remove:function(){return this.el?(maskScope({action:"remove",el:this.el}),this.el.inputmask=void 0,this.el):void 0},getemptymask:function(){return maskScope({action:"getemptymask"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return maskScope({action:"isComplete",el:this.el},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},getmetadata:function(){return maskScope({action:"getmetadata"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},isValid:function(value){return maskScope({action:"isValid",value:value},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},format:function(value,metadata){return maskScope({action:"format",value:value,metadata:metadata},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)}},Inputmask.extendDefaults=function(options){$.extend(!0,Inputmask.prototype.defaults,options)},Inputmask.extendDefinitions=function(definition){$.extend(!0,Inputmask.prototype.defaults.definitions,definition)},Inputmask.extendAliases=function(alias){$.extend(!0,Inputmask.prototype.defaults.aliases,alias)},Inputmask.format=function(value,options,metadata){return Inputmask(options).format(value,metadata)},Inputmask.unmask=function(value,options){return Inputmask(options).unmaskedvalue(value)},Inputmask.isValid=function(value,options){return Inputmask(options).isValid(value)},Inputmask.remove=function(elems){$.each(elems,function(ndx,el){el.inputmask&&el.inputmask.remove()})},Inputmask.escapeRegex=function(str){var specials=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return str.replace(new RegExp("(\\"+specials.join("|\\")+")","gim"),"\\$1")},Inputmask.keyCode={ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91};var ua=navigator.userAgent,iphone=null!==ua.match(new RegExp("iphone","i")),android=null!==ua.match(new RegExp("android.*safari.*","i")),androidchrome=null!==ua.match(new RegExp("android.*chrome.*","i")),androidfirefox=null!==ua.match(new RegExp("android.*firefox.*","i")),kindle=/Kindle/i.test(ua)||/Silk/i.test(ua)||/KFTT/i.test(ua)||/KFOT/i.test(ua)||/KFJWA/i.test(ua)||/KFJWI/i.test(ua)||/KFSOWI/i.test(ua)||/KFTHWA/i.test(ua)||/KFTHWI/i.test(ua)||/KFAPWA/i.test(ua)||/KFAPWI/i.test(ua),PasteEventType=isInputEventSupported("paste")?"paste":isInputEventSupported("input")?"input":"propertychange";return window.Inputmask=Inputmask,Inputmask}(jQuery),function($,Inputmask){return void 0===$.fn.inputmask&&($.fn.inputmask=function(fn,options){var nptmask,input;if(options=options||{},"string"==typeof fn)switch(fn){case"mask":return nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)});case"unmaskedvalue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.unmaskedvalue():$(input).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getemptymask():"";case"hasMaskedValue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.hasMaskedValue():!1;case"isComplete":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.isComplete():!0;case"getmetadata":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getmetadata():void 0;case"setvalue":input=this.jquery&&this.length>0?this[0]:this,$(input).val(options),void 0!==input.inputmask&&$(input).triggerHandler("setvalue.inputmask");break;case"option":if("string"!=typeof options)return this.each(function(){return void 0!==this.inputmask?this.inputmask.option(options):void 0});if(input=this.jquery&&this.length>0?this[0]:this,void 0!==input.inputmask)return input.inputmask.option(options);break;default:return options.alias=fn,nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)})}else{if("object"==typeof fn)return nptmask=new Inputmask(fn),this.each(void 0===fn.mask&&void 0===fn.alias?function(){return void 0!==this.inputmask?this.inputmask.option(fn):void nptmask.mask(this)}:function(){nptmask.mask(this)});if(void 0===fn)return this.each(function(){nptmask=new Inputmask(options),nptmask.mask(this)})}}),$.fn.inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({h:{validator:"[01][0-9]|2[0-3]",cardinality:2,prevalidator:[{validator:"[0-2]",cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:"[0-5]",cardinality:1}]},d:{validator:"0[1-9]|[12][0-9]|3[01]",cardinality:2,prevalidator:[{validator:"[0-3]",cardinality:1}]},m:{validator:"0[1-9]|1[012]",cardinality:2,prevalidator:[{validator:"[01]",cardinality:1}]},y:{validator:"(19|20)\\d{2}",cardinality:4,prevalidator:[{validator:"[12]",cardinality:1},{validator:"(19|20)",cardinality:2},{validator:"(19|20)\\d",cardinality:3}]}}),Inputmask.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+escapedSeparator+"[01])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9])"+escapedSeparator+"(0[1-9]|1[012]))|(30"+escapedSeparator+"(0[13-9]|1[012]))|(31"+escapedSeparator+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(chrs,minyear,maxyear){if(isNaN(chrs))return!1;var enteredyear=parseInt(chrs.concat(minyear.toString().slice(chrs.length))),enteredyear2=parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));return(isNaN(enteredyear)?!1:enteredyear>=minyear&&maxyear>=enteredyear)||(isNaN(enteredyear2)?!1:enteredyear2>=minyear&&maxyear>=enteredyear2)},determinebaseyear:function(minyear,maxyear,hint){var currentyear=(new Date).getFullYear();if(minyear>currentyear)return minyear;if(currentyear>maxyear){for(var maxYearPrefix=maxyear.toString().slice(0,2),maxYearPostfix=maxyear.toString().slice(2,4);maxYearPrefix+hint>maxyear;)maxYearPrefix--;var maxxYear=maxYearPrefix+maxYearPostfix;return minyear>maxxYear?minyear:maxxYear}return currentyear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getDate().toString()+(today.getMonth()+1).toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}},getFrontValue:function(mask,buffer,opts){for(var start=0,length=0,i=0;i<mask.length&&"2"!==mask.charAt(i);i++){var definition=opts.definitions[mask.charAt(i)];definition?(start+=length,length=definition.cardinality):length++}return buffer.join("").substr(start,length)},definitions:{1:{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.val1.test(chrs);return strict||isValid||chrs.charAt(1)!==opts.separator&&-1==="-./".indexOf(chrs.charAt(1))||!(isValid=opts.regex.val1.test("0"+chrs.charAt(0)))?isValid:(maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)})},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var pchrs=chrs;isNaN(maskset.buffer[pos+1])||(pchrs+=maskset.buffer[pos+1]);var isValid=1===pchrs.length?opts.regex.val1pre.test(pchrs):opts.regex.val1.test(pchrs);if(!strict&&!isValid){if(isValid=opts.regex.val1.test(chrs+"0"))return maskset.buffer[pos]=chrs,maskset.buffer[++pos]="0",{pos:pos,c:"0"};if(isValid=opts.regex.val1.test("0"+chrs))return maskset.buffer[pos]="0",pos++,{pos:pos}}return isValid},cardinality:1}]},2:{validator:function(chrs,maskset,pos,strict,opts){var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=opts.regex.val2(opts.separator).test(frontValue+chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.separator||-1!=="-./".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)};if(opts.mask.indexOf("2")===opts.mask.length-1&&isValid){var dayMonthValue=maskset.buffer.join("").substr(4,4)+chrs;if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(maskset.buffer.join("").substr(0,4),10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){isNaN(maskset.buffer[pos+1])||(chrs+=maskset.buffer[pos+1]);var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=1===chrs.length?opts.regex.val2pre(opts.separator).test(frontValue+chrs):opts.regex.val2(opts.separator).test(frontValue+chrs);return strict||isValid||!(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},y:{validator:function(chrs,maskset,pos,strict,opts){if(opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(chrs,10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return!1},cardinality:4,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,1);if(isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,2),isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos}}return isValid},cardinality:1},{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2);if(isValid=opts.isInYearRange(chrs[0]+yearPrefix[1]+chrs[1],opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2),opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)isValid=!0;else{var year=parseInt(chrs,10);isValid=year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}}else isValid=!1;if(isValid)return maskset.buffer[pos-1]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),maskset.buffer[pos++]=chrs.charAt(0),{refreshFromBuffer:{start:pos-3,end:pos},pos:pos}}return isValid},cardinality:2},{validator:function(chrs,maskset,pos,strict,opts){return opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getFullYear().toString()+(today.getMonth()+1).toString()+today.getDate().toString()),$input.trigger("setvalue.inputmask")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(chrs,maskset,pos,strict,opts){if("24"===opts.hourFormat&&24===parseInt(chrs,10))return maskset.buffer[pos-1]="0",maskset.buffer[pos]="0",{refreshFromBuffer:{start:pos-1,end:pos},c:"0"};var isValid=opts.regex.hrs.test(chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.timeseparator||-1!=="-.:".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.hrs.test("0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",maskset.buffer[pos]=chrs.charAt(0),pos++,{refreshFromBuffer:{start:pos-2,end:pos},pos:pos,c:opts.timeseparator};if(isValid&&"24"!==opts.hourFormat&&opts.regex.hrs24.test(chrs)){var tmp=parseInt(chrs,10);return 24===tmp?(maskset.buffer[pos+5]="a",maskset.buffer[pos+6]="m"):(maskset.buffer[pos+5]="p",maskset.buffer[pos+6]="m"),tmp-=12,10>tmp?(maskset.buffer[pos]=tmp.toString(),maskset.buffer[pos-1]="0"):(maskset.buffer[pos]=tmp.toString().charAt(1),maskset.buffer[pos-1]=tmp.toString().charAt(0)),{refreshFromBuffer:{start:pos-1,end:pos+6},c:maskset.buffer[pos]}}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.hrspre.test(chrs);return strict||isValid||!(isValid=opts.regex.hrs.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.mspre.test(chrs);return strict||isValid||!(isValid=opts.regex.ms.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},t:{validator:function(chrs,maskset,pos,strict,opts){return opts.regex.ampm.test(chrs+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"[0-3])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+escapedSeparator+"30)|((0[1-6])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),Inputmask.extendAliases({url:{mask:"ir",placeholder:"",separator:"",defaultPrefix:"http://",regex:{urlpre1:new RegExp("[fh]"),urlpre2:new RegExp("(ft|ht)"),urlpre3:new RegExp("(ftp|htt)"),urlpre4:new RegExp("(ftp:|http|ftps)"),urlpre5:new RegExp("(ftp:/|ftps:|http:|https)"),urlpre6:new RegExp("(ftp://|ftps:/|http:/|https:)"),urlpre7:new RegExp("(ftp://|ftps://|http://|https:/)"),urlpre8:new RegExp("(ftp://|ftps://|http://|https://)")},definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return!0},cardinality:8,prevalidator:function(){for(var result=[],prefixLimit=8,i=0;prefixLimit>i;i++)result[i]=function(){var j=i;return{validator:function(chrs,maskset,pos,strict,opts){if(opts.regex["urlpre"+(j+1)]){var k,tmp=chrs;j+1-chrs.length>0&&(tmp=maskset.buffer.join("").substring(0,j+1-chrs.length)+""+tmp);var isValid=opts.regex["urlpre"+(j+1)].test(tmp);if(!strict&&!isValid){for(pos-=j,k=0;k<opts.defaultPrefix.length;k++)maskset.buffer[pos]=opts.defaultPrefix[k],pos++;for(k=0;k<tmp.length-1;k++)maskset.buffer[pos]=tmp[k],pos++;return{pos:pos}}return isValid}return!1},cardinality:j}}();return result}()},r:{validator:".",cardinality:50}},insertMode:!1,autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return pos-1>-1&&"."!==maskset.buffer[pos-1]?(chrs=maskset.buffer[pos-1]+chrs,chrs=pos-2>-1&&"."!==maskset.buffer[pos-2]?maskset.buffer[pos-2]+chrs:"0"+chrs):chrs="00"+chrs,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs)},cardinality:1}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,64}]@*{1,64}[.*{2,64}][.*{2,6}][.*{1,2}]",greedy:!1,onBeforePaste:function(pastedValue,opts){return pastedValue=pastedValue.toLowerCase(),pastedValue.replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},mac:{mask:"##:##:##:##:##:##"}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({numeric:{mask:function(opts){function autoEscape(txt){for(var escapedTxt="",i=0;i<txt.length;i++)escapedTxt+=opts.definitions[txt.charAt(i)]?"\\"+txt.charAt(i):txt.charAt(i);return escapedTxt}if(0!==opts.repeat&&isNaN(opts.integerDigits)&&(opts.integerDigits=opts.repeat),opts.repeat=0,opts.groupSeparator===opts.radixPoint&&(opts.groupSeparator="."===opts.radixPoint?",":","===opts.radixPoint?".":"")," "===opts.groupSeparator&&(opts.skipOptionalPartCharacter=void 0),opts.autoGroup=opts.autoGroup&&""!==opts.groupSeparator,opts.autoGroup&&("string"==typeof opts.groupSize&&isFinite(opts.groupSize)&&(opts.groupSize=parseInt(opts.groupSize)),isFinite(opts.integerDigits))){var seps=Math.floor(opts.integerDigits/opts.groupSize),mod=opts.integerDigits%opts.groupSize;opts.integerDigits=parseInt(opts.integerDigits)+(0===mod?seps-1:seps),opts.integerDigits<1&&(opts.integerDigits="*")}opts.placeholder.length>1&&(opts.placeholder=opts.placeholder.charAt(0)),opts.radixFocus=opts.radixFocus&&""!==opts.placeholder&&opts.integerOptional===!0,opts.definitions[";"]=opts.definitions["~"],opts.definitions[";"].definitionSymbol="~",opts.numericInput===!0&&(opts.radixFocus=!1,opts.digitsOptional=!1,isNaN(opts.digits)&&(opts.digits=2),opts.decimalProtect=!1);var mask=autoEscape(opts.prefix);return mask+="[+]",mask+=opts.integerOptional===!0?"~{1,"+opts.integerDigits+"}":"~{"+opts.integerDigits+"}",void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0)&&(mask+=opts.digitsOptional?"["+(opts.decimalProtect?":":opts.radixPoint)+";{1,"+opts.digits+"}]":(opts.decimalProtect?":":opts.radixPoint)+";{"+opts.digits+"}"),""!==opts.negationSymbol.back&&(mask+="[-]"),mask+=autoEscape(opts.suffix),opts.greedy=!1,mask},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,radixPoint:".",radixFocus:!0,groupSize:3,groupSeparator:"",autoGroup:!1,allowPlus:!0,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,postFormat:function(buffer,pos,reformatOnly,opts){opts.numericInput===!0&&(buffer=buffer.reverse(),isFinite(pos)&&(pos=buffer.join("").length-pos-1));var i,l,suffixStripped=!1;buffer.length>=opts.suffix.length&&buffer.join("").indexOf(opts.suffix)===buffer.length-opts.suffix.length&&(buffer.length=buffer.length-opts.suffix.length,suffixStripped=!0),pos=pos>=buffer.length?buffer.length-1:pos<opts.prefix.length?opts.prefix.length:pos;var needsRefresh=!1,charAtPos=buffer[pos];if(""===opts.groupSeparator||opts.numericInput!==!0&&-1!==$.inArray(opts.radixPoint,buffer)&&pos>$.inArray(opts.radixPoint,buffer)||new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]").test(charAtPos)){if(suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return{pos:pos}}var cbuf=buffer.slice();charAtPos===opts.groupSeparator&&(cbuf.splice(pos--,1),charAtPos=cbuf[pos]),reformatOnly?charAtPos!==opts.radixPoint&&(cbuf[pos]="?"):cbuf.splice(pos,0,"?");var bufVal=cbuf.join(""),bufValOrigin=bufVal;if(bufVal.length>0&&opts.autoGroup||reformatOnly&&-1!==bufVal.indexOf(opts.groupSeparator)){var escapedGroupSeparator=Inputmask.escapeRegex(opts.groupSeparator);needsRefresh=0===bufVal.indexOf(opts.groupSeparator),bufVal=bufVal.replace(new RegExp(escapedGroupSeparator,"g"),"");var radixSplit=bufVal.split(opts.radixPoint);if(bufVal=""===opts.radixPoint?bufVal:radixSplit[0],bufVal!==opts.prefix+"?0"&&bufVal.length>=opts.groupSize+opts.prefix.length)for(var reg=new RegExp("([-+]?[\\d?]+)([\\d?]{"+opts.groupSize+"})");reg.test(bufVal);)bufVal=bufVal.replace(reg,"$1"+opts.groupSeparator+"$2"),bufVal=bufVal.replace(opts.groupSeparator+opts.groupSeparator,opts.groupSeparator);""!==opts.radixPoint&&radixSplit.length>1&&(bufVal+=opts.radixPoint+radixSplit[1])}for(needsRefresh=bufValOrigin!==bufVal,buffer.length=bufVal.length,i=0,l=bufVal.length;l>i;i++)buffer[i]=bufVal.charAt(i);var newPos=$.inArray("?",buffer);if(-1===newPos&&charAtPos===opts.radixPoint&&(newPos=$.inArray(opts.radixPoint,buffer)),reformatOnly?buffer[newPos]=charAtPos:buffer.splice(newPos,1),!needsRefresh&&suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return newPos=opts.numericInput&&isFinite(pos)?buffer.join("").length-newPos-1:newPos,opts.numericInput&&(buffer=buffer.reverse(),$.inArray(opts.radixPoint,buffer)<newPos&&buffer.join("").length-opts.suffix.length!==newPos&&(newPos-=1)),{pos:newPos,refreshFromBuffer:needsRefresh,buffer:buffer}},onBeforeWrite:function(e,buffer,caretPos,opts){if(e&&("blur"===e.type||"checkval"===e.type)){var maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");if(processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)&&isFinite(opts.min)&&parseFloat(processValue)<parseFloat(opts.min))return $.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts));if(opts.numericInput!==!0){var tmpBufSplit=""!==opts.radixPoint?buffer.join("").split(opts.radixPoint):[buffer.join("")],matchRslt=tmpBufSplit[0].match(opts.regex.integerPart(opts)),matchRsltDigits=2===tmpBufSplit.length?tmpBufSplit[1].match(opts.regex.integerNPart(opts)):void 0;if(matchRslt){matchRslt[0]!==opts.negationSymbol.front+"0"&&matchRslt[0]!==opts.negationSymbol.front&&"+"!==matchRslt[0]||void 0!==matchRsltDigits&&!matchRsltDigits[0].match(/^0+$/)||buffer.splice(matchRslt.index,1);var radixPosition=$.inArray(opts.radixPoint,buffer);if(-1!==radixPosition){if(isFinite(opts.digits)&&!opts.digitsOptional){for(var i=1;i<=opts.digits;i++)(void 0===buffer[radixPosition+i]||buffer[radixPosition+i]===opts.placeholder.charAt(0))&&(buffer[radixPosition+i]="0");return{refreshFromBuffer:maskedValue!==buffer.join(""),buffer:buffer}}if(radixPosition===buffer.length-opts.suffix.length-1)return buffer.splice(radixPosition,1),{refreshFromBuffer:!0,buffer:buffer}}}}}if(opts.autoGroup){var rslt=opts.postFormat(buffer,opts.numericInput?caretPos:caretPos-1,!0,opts);return rslt.caret=caretPos<=opts.prefix.length?rslt.pos:rslt.pos+1,rslt}},regex:{integerPart:function(opts){return new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]?\\d+")},integerNPart:function(opts){return new RegExp("[\\d"+Inputmask.escapeRegex(opts.groupSeparator)+"]+")}},signHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs){var matchRslt=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(matchRslt&&matchRslt[0].length>0)return maskset.buffer[matchRslt.index]===("-"===chrs?"+":opts.negationSymbol.front)?"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos,insert:{pos:maskset.buffer.length-opts.suffix.length-1,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos}:""!==opts.negationSymbol.back?{
pos:matchRslt.index,c:"+",remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos}:{pos:matchRslt.index,c:"+",remove:matchRslt.index,caret:pos}:maskset.buffer[matchRslt.index]===("-"===chrs?opts.negationSymbol.front:"+")?"-"===chrs&&""!==opts.negationSymbol.back?{remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos-1}:{remove:matchRslt.index,caret:pos-1}:"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1,insert:{pos:maskset.buffer.length-opts.suffix.length,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1}:{pos:matchRslt.index,c:chrs,caret:pos+1}}return!1},radixHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&(-1!==$.inArray(chrs,[",","."])&&(chrs=opts.radixPoint),chrs===opts.radixPoint&&void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0))){var radixPos=$.inArray(opts.radixPoint,maskset.buffer),integerValue=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(-1!==radixPos&&maskset.validPositions[radixPos])return maskset.validPositions[radixPos-1]?{caret:radixPos+1}:{pos:integerValue.index,c:integerValue[0],caret:radixPos+1};if(!integerValue||"0"===integerValue[0]&&integerValue.index+1!==pos)return maskset.buffer[integerValue?integerValue.index:pos]="0",{pos:(integerValue?integerValue.index:pos)+1,c:opts.radixPoint}}return!1},leadingZeroHandler:function(chrs,maskset,pos,strict,opts){if(opts.numericInput===!0){if("0"===maskset.buffer[maskset.buffer.length-opts.prefix.length-1])return{pos:pos,remove:maskset.buffer.length-opts.prefix.length-1}}else{var matchRslt=maskset.buffer.join("").match(opts.regex.integerNPart(opts)),radixPosition=$.inArray(opts.radixPoint,maskset.buffer);if(matchRslt&&!strict&&(-1===radixPosition||radixPosition>=pos))if(0===matchRslt[0].indexOf("0")){pos<opts.prefix.length&&(pos=matchRslt.index);var _radixPosition=$.inArray(opts.radixPoint,maskset._buffer),digitsMatch=maskset._buffer&&maskset.buffer.slice(radixPosition).join("")===maskset._buffer.slice(_radixPosition).join("")||0===parseInt(maskset.buffer.slice(radixPosition+1).join("")),integerMatch=maskset._buffer&&maskset.buffer.slice(matchRslt.index,radixPosition).join("")===maskset._buffer.slice(opts.prefix.length,_radixPosition).join("")||"0"===maskset.buffer.slice(matchRslt.index,radixPosition).join("");if(-1===radixPosition||digitsMatch&&integerMatch)return maskset.buffer.splice(matchRslt.index,1),pos=pos>matchRslt.index?pos-1:matchRslt.index,{pos:pos,remove:matchRslt.index};if(matchRslt.index+1===pos||"0"===chrs)return maskset.buffer.splice(matchRslt.index,1),pos=matchRslt.index,{pos:pos,remove:matchRslt.index}}else if("0"===chrs&&pos<=matchRslt.index&&matchRslt[0]!==opts.groupSeparator)return!1}return!0},postValidation:function(buffer,opts){var isValid=!0,maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),processValue=processValue.replace(new RegExp("^"+Inputmask.escapeRegex(opts.negationSymbol.front)),"-"),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back)+"$"),""),processValue=processValue===opts.negationSymbol.front?processValue+"0":processValue,isFinite(processValue)&&(null!==opts.max&&isFinite(opts.max)&&(isValid=parseFloat(processValue)<=parseFloat(opts.max)),isValid&&null!==opts.min&&isFinite(opts.min)&&(0>=processValue||processValue.toString().length>=opts.min.toString().length)&&(isValid=parseFloat(processValue)>=parseFloat(opts.min),isValid||(isValid=$.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts)),isValid.refreshFromBuffer=!0))),isValid},definitions:{"~":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid&&(isValid=opts.radixHandler(chrs,maskset,pos,strict,opts),!isValid&&(isValid=strict?new RegExp("[0-9"+Inputmask.escapeRegex(opts.groupSeparator)+"]").test(chrs):new RegExp("[0-9]").test(chrs),isValid===!0&&(isValid=opts.leadingZeroHandler(chrs,maskset,pos,strict,opts),isValid===!0)))){var radixPosition=$.inArray(opts.radixPoint,maskset.buffer);isValid=-1!==radixPosition&&opts.digitsOptional===!1&&opts.numericInput!==!0&&pos>radixPosition&&!strict?{pos:pos,remove:pos}:{pos:pos}}return isValid},cardinality:1,prevalidator:null},"+":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&(strict&&opts.allowMinus&&chrs===opts.negationSymbol.front||opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs)&&(isValid="-"===chrs?""!==opts.negationSymbol.back?{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1,insert:{pos:maskset.buffer.length,c:opts.negationSymbol.back}}:{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1}:!0),isValid},cardinality:1,prevalidator:null,placeholder:""},"-":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&strict&&opts.allowMinus&&chrs===opts.negationSymbol.back&&(isValid=!0),isValid},cardinality:1,prevalidator:null,placeholder:""},":":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid){var radix="["+Inputmask.escapeRegex(opts.radixPoint)+",\\.]";isValid=new RegExp(radix).test(chrs),isValid&&maskset.validPositions[pos]&&maskset.validPositions[pos].match.placeholder===opts.radixPoint&&(isValid={caret:pos+1})}return isValid?{c:opts.radixPoint}:isValid},cardinality:1,prevalidator:null,placeholder:function(opts){return opts.radixPoint}}},onUnMask:function(maskedValue,unmaskedValue,opts){var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),opts.unmaskAsNumber?(""!==opts.radixPoint&&-1!==processValue.indexOf(opts.radixPoint)&&(processValue=processValue.replace(Inputmask.escapeRegex.call(this,opts.radixPoint),".")),Number(processValue)):processValue},isComplete:function(buffer,opts){var maskedValue=buffer.join(""),bufClone=buffer.slice();if(opts.postFormat(bufClone,0,!0,opts),bufClone.join("")!==maskedValue)return!1;var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)},onBeforeMask:function(initialValue,opts){if(""!==opts.radixPoint&&isFinite(initialValue))initialValue=initialValue.toString().replace(".",opts.radixPoint);else{var kommaMatches=initialValue.match(/,/g),dotMatches=initialValue.match(/\./g);dotMatches&&kommaMatches?dotMatches.length>kommaMatches.length?(initialValue=initialValue.replace(/\./g,""),initialValue=initialValue.replace(",",opts.radixPoint)):kommaMatches.length>dotMatches.length?(initialValue=initialValue.replace(/,/g,""),initialValue=initialValue.replace(".",opts.radixPoint)):initialValue=initialValue.indexOf(".")<initialValue.indexOf(",")?initialValue.replace(/\./g,""):initialValue=initialValue.replace(/,/g,""):initialValue=initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")}if(0===opts.digits&&(-1!==initialValue.indexOf(".")?initialValue=initialValue.substring(0,initialValue.indexOf(".")):-1!==initialValue.indexOf(",")&&(initialValue=initialValue.substring(0,initialValue.indexOf(",")))),""!==opts.radixPoint&&isFinite(opts.digits)&&-1!==initialValue.indexOf(opts.radixPoint)){var valueParts=initialValue.split(opts.radixPoint),decPart=valueParts[1].match(new RegExp("\\d*"))[0];if(parseInt(opts.digits)<decPart.toString().length){var digitsFactor=Math.pow(10,parseInt(opts.digits));initialValue=initialValue.replace(Inputmask.escapeRegex(opts.radixPoint),"."),initialValue=Math.round(parseFloat(initialValue)*digitsFactor)/digitsFactor,initialValue=initialValue.toString().replace(".",opts.radixPoint)}}return initialValue.toString()},canClearPosition:function(maskset,position,lvp,strict,opts){var positionInput=maskset.validPositions[position].input,canClear=positionInput!==opts.radixPoint||null!==maskset.validPositions[position].match.fn&&opts.decimalProtect===!1||isFinite(positionInput)||position===lvp||positionInput===opts.groupSeparator||positionInput===opts.negationSymbol.front||positionInput===opts.negationSymbol.back;if(canClear&&isFinite(positionInput)){var matchRslt,radixPos=$.inArray(opts.radixPoint,maskset.buffer),radixInjection=!1;if(void 0===maskset.validPositions[radixPos]&&(maskset.validPositions[radixPos]={input:opts.radixPoint},radixInjection=!0),!strict&&maskset.buffer){matchRslt=maskset.buffer.join("").substr(0,position).match(opts.regex.integerNPart(opts));var pos=position+1,isNull=null==matchRslt||0===parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""));if(isNull)for(;maskset.validPositions[pos]&&(maskset.validPositions[pos].input===opts.groupSeparator||"0"===maskset.validPositions[pos].input);)delete maskset.validPositions[pos],pos++}var buffer=[];for(var vp in maskset.validPositions)void 0!==maskset.validPositions[vp].input&&buffer.push(maskset.validPositions[vp].input);if(radixInjection&&delete maskset.validPositions[radixPos],radixPos>0){var bufVal=buffer.join("");if(matchRslt=bufVal.match(opts.regex.integerNPart(opts)))if(radixPos>=position)if(0===matchRslt[0].indexOf("0"))canClear=matchRslt.index!==position||"0"===opts.placeholder;else{var intPart=parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")),radixPart=parseInt(bufVal.split(opts.radixPoint)[1]);10>intPart&&maskset.validPositions[position]&&("0"!==opts.placeholder||radixPart>0)&&(maskset.validPositions[position].input="0",maskset.p=opts.prefix.length+1,canClear=!1)}else 0===matchRslt[0].indexOf("0")&&3===bufVal.length&&(maskset.validPositions={},canClear=!1)}}return canClear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey)switch(e.keyCode){case Inputmask.keyCode.UP:$input.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(opts.step)),$input.trigger("setvalue.inputmask");break;case Inputmask.keyCode.DOWN:$input.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(opts.step)),$input.trigger("setvalue.inputmask")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowPlus:!1,allowMinus:!1}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({phone:{url:"phone-codes/phone-codes.js",countrycode:"",mask:function(opts){opts.definitions["#"]=opts.definitions[9];var maskList=[];return $.ajax({url:opts.url,async:!1,dataType:"json",success:function(response){maskList=response},error:function(xhr,ajaxOptions,thrownError){alert(thrownError+" - "+opts.url)}}),maskList=maskList.sort(function(a,b){return(a.mask||a)<(b.mask||b)?-1:1})},keepStatic:!1,nojumps:!0,nojumpsThreshold:1,onBeforeMask:function(value,opts){var processedValue=value.replace(/^0/g,"");return(processedValue.indexOf(opts.countrycode)>1||-1===processedValue.indexOf(opts.countrycode))&&(processedValue="+"+opts.countrycode+processedValue),processedValue}},phonebe:{alias:"phone",url:"phone-codes/phone-be.js",countrycode:"32",nojumpsThreshold:4}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(buffer,opts){return new RegExp(opts.regex).test(buffer.join(""))},definitions:{r:{validator:function(chrs,maskset,pos,strict,opts){function RegexToken(isGroup,isQuantifier){this.matches=[],this.isGroup=isGroup||!1,this.isQuantifier=isQuantifier||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function analyseRegex(){var match,m,currentToken=new RegexToken,opengroups=[];for(opts.regexTokens=[];match=opts.tokenizer.exec(opts.regex);)switch(m=match[0],m.charAt(0)){case"(":opengroups.push(new RegexToken(!0));break;case")":groupToken=opengroups.pop(),opengroups.length>0?opengroups[opengroups.length-1].matches.push(groupToken):currentToken.matches.push(groupToken);break;case"{":case"+":case"*":var quantifierToken=new RegexToken(!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(quantifierToken.quantifier={min:mq0,max:mq1},opengroups.length>0){var matches=opengroups[opengroups.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifierToken)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifierToken);break;default:opengroups.length>0?opengroups[opengroups.length-1].matches.push(m):currentToken.matches.push(m)}currentToken.matches.length>0&&opts.regexTokens.push(currentToken)}function validateRegexToken(token,fromGroup){var isvalid=!1;fromGroup&&(regexPart+="(",openGroupCount++);for(var mndx=0;mndx<token.matches.length;mndx++){var matchToken=token.matches[mndx];if(matchToken.isGroup===!0)isvalid=validateRegexToken(matchToken,!0);else if(matchToken.isQuantifier===!0){var crrntndx=$.inArray(matchToken,token.matches),matchGroup=token.matches[crrntndx-1],regexPartBak=regexPart;if(isNaN(matchToken.quantifier.max)){for(;matchToken.repeaterPart&&matchToken.repeaterPart!==regexPart&&matchToken.repeaterPart.length>regexPart.length&&!(isvalid=validateRegexToken(matchGroup,!0)););isvalid=isvalid||validateRegexToken(matchGroup,!0),isvalid&&(matchToken.repeaterPart=regexPart),regexPart=regexPartBak+matchToken.quantifier.max}else{for(var i=0,qm=matchToken.quantifier.max-1;qm>i&&!(isvalid=validateRegexToken(matchGroup,!0));i++);regexPart=regexPartBak+"{"+matchToken.quantifier.min+","+matchToken.quantifier.max+"}"}}else if(void 0!==matchToken.matches)for(var k=0;k<matchToken.length&&!(isvalid=validateRegexToken(matchToken[k],fromGroup));k++);else{var testExp;if("["==matchToken.charAt(0)){testExp=regexPart,testExp+=matchToken;for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");isvalid=exp.test(bufferStr)}else for(var l=0,tl=matchToken.length;tl>l;l++)if("\\"!==matchToken.charAt(l)){testExp=regexPart,testExp+=matchToken.substr(0,l+1),testExp=testExp.replace(/\|$/,"");for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");if(isvalid=exp.test(bufferStr))break}regexPart+=matchToken}if(isvalid)break}return fromGroup&&(regexPart+=")",openGroupCount--),isvalid}var groupToken,cbuffer=maskset.buffer.slice(),regexPart="",isValid=!1,openGroupCount=0;null===opts.regexTokens&&analyseRegex(),cbuffer.splice(pos,0,chrs);for(var bufferStr=cbuffer.join(""),i=0;i<opts.regexTokens.length;i++){var regexToken=opts.regexTokens[i];if(isValid=validateRegexToken(regexToken,regexToken.isGroup))break}return isValid},cardinality:1}}}}),Inputmask}(jQuery,Inputmask),function(){"use strict";var app=angular.module("app",["ngResource","ui.router","ngCookies","ui.mask","ui.bootstrap","isteven-multi-select","ngInputModified","ui.validate","angular.filter","xeditable","checklist-model","ngFileUpload","STNResource","ui.bootstrap.datetimepicker","STNControllers","LogInOutController","ModalControllers","SettingsControllers"]);app.run(["$rootScope","$uibModalStack",function($rootScope,$uibModalStack){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){$("#ui-view").html(""),$(".page-loading").removeClass("hidden"),$uibModalStack.dismissAll(),"/"==toState.url&&$("#userNameFocus").focus()}),$rootScope.$on("$stateChangeSuccess",function(){$(".page-loading").addClass("hidden")}),$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){$(".page-loading").addClass("hidden"),alert("Error occurred: Status"+error.status+", "+error.statusText+". The following request was unsuccessful: "+error.config.url+" Please refresh and try again.")})}]),app.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("entry",{url:"/",templateUrl:"component/main/mainView.html",controller:"mainCtrl"}).state("home",{url:"/Home",templateUrl:"component/home/homeBase.html",controller:"homeCtrl"}).state("map",{url:"/Map",templateUrl:"component/map/map.html",controller:"mapCtrl"}).state("fileUpload",{url:"/File",templateUrl:"component/file/file.html",controller:"fileUploadCtrl",resolve:{ft:"FILE_TYPE",fileTypeList:function(ft){return ft.getAll().$promise},a:"AGENCY",agencyList:function(a){return a.getAll().$promise}}}).state("approval",{url:"/Approval",templateUrl:"component/approval/approval.html",controller:"approvalCtrl",resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},i:"INSTRUMENT",instrumentList:function(i){return i.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise}}}).state("siteSearch",{url:"/SiteSearch",templateUrl:"component/siteSearch/siteSearch.html",controller:"siteSearchCtrl",resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(sensT){return sensT.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(netwN){return netwN.getAll().$promise}}}).state("reporting",{url:"/Reporting","abstract":!0,templateUrl:"component/reporting/reporting.html",controller:"reportingCtrl",resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},state:"STATE",allStates:function(state){return state.getAll().$promise},r:"REPORT",allReports:function(r){return r.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStatus:function(es){return es.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},incompleteReports:function(r,$cookies){var mID=$cookies.get("mID");return r.getMemberReports({memberId:mID}).$promise}}}).state("reporting.reportDash",{url:"/Dashboard",templateUrl:"component/reporting/reportingDashboard.html",controller:"reportingDashCtrl",resolve:{r:"REPORT",allReportsAgain:function(r){return r.getAll().$promise}}}).state("reporting.submitReport",{url:"/SubmitReport",templateUrl:"component/reporting/submitReport.html",controller:"submitReportCtrl"}).state("reporting.generateReport",{url:"/GenerateReport",templateUrl:"component/reporting/generateReport.html"}).state("settings",{url:"/Settings",templateUrl:"component/settings/settings.html",controller:"settingsCtrl"}).state("members",{url:"/Members","abstract":!0,templateUrl:"component/member/memberHolderView.html",controller:"memberCtrl",resolve:{r:"ROLE",allRoles:function(r){return r.getAll().$promise},a:"AGENCY",allAgencies:function(a){return a.getAll().$promise}}}).state("members.MembersList",{url:"/MembersList",templateUrl:"component/member/membersList.html"}).state("members.MemberInfo",{url:"/memberInfo/:id",templateUrl:"component/member/memberInfo.html",controller:"memberInfoCtrl",resolve:{m:"MEMBER",thisMember:function(m,$stateParams,$http,$cookies){var memberId=$stateParams.id;return memberId>0?($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",m.query({id:memberId}).$promise):void 0}}}).state("events",{url:"/Events","abstract":!0,templateUrl:"component/event/eventHolderView.html",controller:"eventCtrl",resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise}}}).state("events.EventsList",{url:"/EventsList",templateUrl:"component/event/eventsList.html"}).state("events.EventInfo",{url:"/eventInfo/:id",templateUrl:"component/event/eventInfo.html",controller:"eventInfoCtrl",resolve:{e:"EVENT",thisEvent:function(e,$stateParams){var eventId=$stateParams.id;return eventId>0?e.query({id:eventId}).$promise:void 0}}}).state("resources",{url:"/Resources","abstract":!0,templateUrl:"component/resources/resourcesHolderView.html",controller:"resourcesCtrl",resolve:{state:"STATE",allStates:function(state){return state.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},c:"CONTACT_TYPE",allContactTypes:function(c){return c.getAll().$promise},d:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(d){return d.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(ft){return ft.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},ht:"HOUSING_TYPE",allHouseTypes:function(ht){return ht.getAll().$promise},hq:"HWM_QUALITY",allHWMqualities:function(hq){return hq.getAll().$promise},hwmT:"HWM_TYPE",allHWMtypes:function(hwmT){return hwmT.getAll().$promise},icc:"INST_COLL_CONDITION",allInstCollectConditions:function(icc){return icc.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},opq:"OP_QUALITY",allObjPtQualities:function(opq){return opq.getAll().$promise},opt:"OP_TYPE",allObjPtTypes:function(opt){return opt.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeploymentTypes:function(dt){return dt.getAll().$promise},sstat:"STATUS_TYPE",allStatusTypes:function(sstat){return sstat.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},vcm:"VERTICAL_COLL_METHOD",allVerticalCollMethods:function(vcm){return vcm.getAll().$promise},vd:"VERTICAL_DATUM",allVerticalDatums:function(vd){return vd.getAll().$promise}}}).state("resources.ResourcesList",{url:"/ResourcesList",templateUrl:"component/resources/resourcesList.html"}).state("resources.ResourcesList.agency",{url:"/Agencies",templateUrl:"component/resources/agency.html"}).state("resources.ResourcesList.ContactType",{url:"/ContactTypes",templateUrl:"component/resources/contactType.html"}).state("resources.ResourcesList.DepPriority",{url:"/DeploymentPriorities",templateUrl:"component/resources/deploymentPriority.html"}).state("resources.ResourcesList.EventStatus",{url:"/EventStatus",templateUrl:"component/resources/eventStatus.html"}).state("resources.ResourcesList.EventType",{url:"/EventTypes",templateUrl:"component/resources/eventType.html"}).state("resources.ResourcesList.FileType",{url:"/FileTypes",templateUrl:"component/resources/fileType.html"}).state("resources.ResourcesList.HorCollMethd",{url:"/HorizontalCollMethods",templateUrl:"component/resources/horizontalCollectionMethod.html"}).state("resources.ResourcesList.HorDatum",{url:"/HorizontalDatums",templateUrl:"component/resources/horizontalDatum.html"}).state("resources.ResourcesList.HousingType",{url:"/HousingTypes",templateUrl:"component/resources/housingType.html"}).state("resources.ResourcesList.HWMQual",{url:"/HWMQualities",templateUrl:"component/resources/hwmQuality.html"}).state("resources.ResourcesList.HWMType",{url:"/HWMTypes",templateUrl:"component/resources/hwmType.html"}).state("resources.ResourcesList.InstrCollCondition",{url:"/InstrCollConditions",templateUrl:"component/resources/instrumentCollectionCondition.html"}).state("resources.ResourcesList.Marker",{url:"/Markers",templateUrl:"component/resources/marker.html"}).state("resources.ResourcesList.NetworkNames",{url:"/NetworkNames",templateUrl:"component/resources/networkNames.html"}).state("resources.ResourcesList.OPquality",{url:"/ObjPointQualities",templateUrl:"component/resources/objectivePointQuality.html"}).state("resources.ResourcesList.OPType",{url:"/ObjPointType",templateUrl:"component/resources/objectivePointType.html"}).state("resources.ResourcesList.SensorBrand",{url:"/SensorBrands",templateUrl:"component/resources/sensorBrand.html"}).state("resources.ResourcesList.SenDepType",{url:"/SensorDeploymentTypes",templateUrl:"component/resources/deploymentType.html"}).state("resources.ResourcesList.StatusType",{url:"/StatusTypes",templateUrl:"component/resources/statusType.html"}).state("resources.ResourcesList.SensorType",{url:"/SensorTypes",templateUrl:"component/resources/sensorType.html"}).state("resources.ResourcesList.NetworkType",{url:"/NetworkTypes",templateUrl:"component/resources/networkType.html"}).state("resources.ResourcesList.VertCollMethod",{url:"/VerticalCollMethods",templateUrl:"component/resources/verticalCollectionMethod.html"}).state("resources.ResourcesList.VertDatum",{url:"/VerticalDatums",templateUrl:"component/resources/verticalDatum.html"}).state("site",{url:"/Site/:id","abstract":!0,templateUrl:"component/site/site.html",controller:function($scope,$stateParams){$scope.siteID=$stateParams.id},resolve:{s:"SITE",thisSite:function(s,$stateParams){return $stateParams.id>0?s.query({id:$stateParams.id}).$promise:void 0},thisSiteNetworkNames:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkNames({id:$stateParams.id}).$promise:void 0},thisSiteNetworkTypes:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkTypes({id:$stateParams.id}).$promise:void 0},thisSiteHousings:function(s,$stateParams){return $stateParams.id>0?s.getSiteHousings({id:$stateParams.id}).$promise:void 0},thisSiteOPs:function(s,$stateParams){return $stateParams.id>0?s.getSiteOPs({id:$stateParams.id}).$promise:void 0},thisSiteSensors:function(s,$stateParams){return $stateParams.id>0?s.getSiteSensors({id:$stateParams.id}).$promise:void 0},thisSiteHWMs:function(s,$stateParams){return $stateParams.id>0?s.getSiteHWMs({id:$stateParams.id}).$promise:void 0},thisSiteFiles:function(s,$stateParams){return $stateParams.id>0?s.getSiteFiles({id:$stateParams.id}).$promise:void 0},thisSitePeaks:function(s,$stateParams){return $stateParams.id>0?s.getSitePeaks({id:$stateParams.id}).$promise:void 0},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},ht:"HOUSING_TYPE",allHousingTypes:function(ht){return ht.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},sd:"SENSOR_DEPLOYMENT",allSensDeps:function(sd){return sd.getAll().$promise},dp:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(dp){return dp.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},e:"EVENT",allEvents:function(e){return e.getAll().$promise},sent:"SENSOR_TYPE",allSensorTypes:function(sent){return sent.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt){return hwmt.getAll().$promise},hq:"HWM_QUALITY",allHWMQualities:function(hq){return hq.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise}}}).state("site.dashboard",{url:"/SiteDashboard",views:{siteNo:{controller:function($scope,$cookies,thisSite){void 0!==thisSite&&($scope.SiteNo=thisSite.SITE_NO),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"})},template:'<div><h2 style="margin-top:0">Site {{SiteNo}} - For {{sessionEvent}}</h2></div><hr />'},aSite:{controller:"siteCtrl",templateUrl:"component/site/siteInfoView.html"},op:{controller:"objectivePointCtrl",templateUrl:"component/objectivePoint/objectivePointList.html"},sensor:{controller:"sensorCtrl",templateUrl:"component/sensor/sensorList.html"},hwm:{controller:"hwmCtrl",templateUrl:"component/hwm/hwmList.html"},file:{controller:"fileCtrl",templateUrl:"component/file/fileList.html"},peak:{controller:"peakCtrl",templateUrl:"component/peak/peakList.html"}}}).state("quickHWM",{url:"/QuickHWM",templateUrl:"component/hwm/quickHWM.html",controller:"quickHWMCtrl",resolve:{hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt){return hwmt.getAll().$promise},hq:"HWM_QUALITY",allHWMQualities:function(hq){return hq.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise}}})}])}();
//# sourceMappingURL=data:application/json;base64,
