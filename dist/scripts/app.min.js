!function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("siteSearch/siteSearch.html",'<h3>Site Search - For {{sessionEvent}}</h3><hr><div>Search for Sites by one or more parameters. Clicking Search with no parameters set will return all sites.</div><br><form name="siteSearchForm"><div class="form-group col-md-6"><label class="col-md-4 control-label" for="EVENT_ID">Events:</label><div class="col-md-6">{{sessionEvent}}</div></div><div class="form-group col-md-6"><label class="col-md-4 control-label" for="EVENT_ID">States:</label><div class="col-md-6"><div isteven-multi-select input-model="states" output-model="Chosen.state" button-label="STATE_NAME" item-label="STATE_NAME" max-height="300px" on-item-click="stateClick(data)" tick-property="selected" helper-elements="filter"></div></div></div><br><div class="form-group col-md-6"><label class="col-md-4 control-label" for="EVENT_ID">Sensor Types:</label><div class="col-md-6"><select class="form-control" id="SENSOR_TYPE_ID" name="SENSOR_TYPE_ID" ng-model="Chosen.sensor" ng-options="s.SENSOR_TYPE_ID as s.SENSOR for s in senTypes | orderBy: \'SENSOR\'"><option value=""></option></select></div></div><div class="form-group col-md-6"><label class="col-md-4 control-label" for="EVENT_ID">Network Names:</label><div class="col-md-6"><select class="form-control" id="NETWORK_NAME_ID" name="NETWORK_NAME_ID" ng-model="Chosen.network" ng-options="n.NETWORK_NAME_ID as n.NAME for n in netNames | orderBy: \'NAME\'"><option value=""></option></select></div></div><br><div><div class="form-group col-md-3"><label class="col-md-7 control-label" for="EVENT_ID">HWM Only Sites:</label><div class="col-md-1"><input type="checkbox" ng-model="checkboxModel.hwmOnly" ng-true-value="\'1\'" ng-false-value="\'0\'"></div></div><div class="form-group col-md-3"><label class="col-md-8 control-label" for="EVENT_ID">Sensor Only Sites:</label><div class="col-md-1"><input type="checkbox" ng-model="checkboxModel.senOnly" ng-true-value="\'1\'" ng-false-value="\'0\'"></div></div><div class="form-group col-md-3"><label class="col-md-7 control-label" for="EVENT_ID">RDG Only Sites:</label><div class="col-md-1"><input type="checkbox" ng-model="checkboxModel.rdgOnly" ng-true-value="\'1\'" ng-false-value="\'0\'"></div></div><div class="form-group col-md-3"><label class="col-md-7 control-label" for="EVENT_ID">Has OP Defined:</label><div class="col-md-1"><input type="checkbox" ng-model="checkboxModel.opDefined" ng-true-value="\'1\'" ng-false-value="\'0\'"></div></div></div><br clear="all"><div class="form-group"><div class="col-md-4 col-md-offset-2"><span><button class="btn btn-primary large" ng-click="searchSites()">Search</button></span> <span><button class="btn btn-primary large" ng-click="clearFilters()">Clear Filters</button></span></div></div></form><div ng-show="siteResponse" class="col-md-12" style="padding:0;margin:1em"><div><h3>Sites:</h3></div><div><script>var sortingOrder = \'SITE_NO\';</script><table ng-show="siteList.length > 0" class="table table-striped table-condensed"><thead><tr><th class="SITE_NO">Site Number&nbsp;<a ng-click="sort_by(\'SITE_NO\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Description">Description&nbsp;<a ng-click="sort_by(\'Description\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="County">County&nbsp;<a ng-click="sort_by(\'County\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="State">State&nbsp;<a ng-click="sort_by(\'State\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Networks">Network&nbsp;<a ng-click="sort_by(\'Networks\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="RecentOP">OP&nbsp;<a ng-click="sort_by(\'RecentOP\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Events">All Events using Site&nbsp;<a ng-click="sort_by(\'Events\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="s in siteList | orderBy:sortingOrder:reverse"><td><a ui-sref="site.dashboard({id: s.siteID})">{{s.SITE_NO}}</a></td><td>{{s.Description}}</td><td>{{s.County}}</td><td>{{s.State}}</td><td><span ng-repeat="net in s.Networks">{{net.NAME}}</span></td><td ng-if="s.RecentOP">{{s.RecentOP.NAME}}, Established: {{s.RecentOP.DATE_ESTABLISHED | date:\'MM/dd/yyyy\'}}</td><td ng-if="!s.RecentOP"></td><td><span ng-repeat="ev in s.Events">{{ev.EVENT_NAME}}<br></span></td></tr></tbody></table><div ng-show="siteList.length == 0"><span>No Sites returned from query.</span></div></div></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("settings/settings.html",'<div class="container"><div class="row row-centered"><div class="col-md-2 col-centered"><div style="height:120px;text-align:center" class="panel panel-default center-block"><a href="" ng-click="changeView(\'members.MembersList\')"><img alt="Members" src="images/Members1.png" style="margin-top:8px"><br>Members</a></div></div><div class="col-md-2 col-centered"><div style="height:120px;text-align:center" class="panel panel-default center-block"><a href="" ng-click="changeView(\'events.EventsList\')"><img alt="Events" src="images/Events1.png"><br>Events</a></div></div><div class="col-md-2 col-centered"><div style="height:120px;text-align:center" class="panel panel-default center-block"><a href="" ng-click="changeView(\'resources.ResourcesList\')"><img alt="Resources" src="images/Tables1.png"><br>Resources</a></div></div></div></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("site/siteInfoView.html",'<uib-accordion close-others="false"><uib-accordion-group is-open="status.mapOpen"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.mapOpen, \'glyphicon-chevron-right\': !status.mapOpen}"></i> <span>Map</span> <a ui-sref="map" title="Go to this Site on the Map tab."><i class="pull-right glyphicon glyphicon-globe"></i></a></uib-accordion-heading></uib-accordion-group><uib-accordion-group is-open="status.siteOpen"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.siteOpen, \'glyphicon-chevron-right\': !status.siteOpen}"></i> <span>Site</span></uib-accordion-heading><button type="button" ng-if="aSite.SITE_ID != undefined" class="btn btn-primary pull-right" ng-click="openSiteCreate()">Edit Site</button> <button type="button" ng-if="aSite.SITE_ID == undefined" class="btn btn-primary pull-right" ng-click="openSiteCreate()">Create Site</button><div ng-if="aSite.SITE_ID != undefined"><form class="form-horizontal"><fieldset><div class="form-group"><label class="col-md-4 control-label" for="SITE_DESCRIPTION">Site Description:</label><div class="col-md-7"><textarea readonly="readonly" class="form-control" id="SITE_DESCRIPTION" type="text" rows="3" ng-model="aSite.SITE_DESCRIPTION">\n                        </div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="SITE_NOTES">Internal Notes:</label>\n                        <div class="col-md-7">\n                            <textarea ng-if="aSite.SITE_NOTES" readonly="readonly" class="form-control" id="SITE_NOTES" type="text" rows="3" ng-model="aSite.SITE_NOTES">\n                            <span ng-if="aSite.SITE_NOTES == undefined">---</span>\n                        </div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="LATITUDE_DD">Latitude:</label>\n                        <div class="col-md-7"><span>{{aSite.LATITUDE_DD}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="LONGITUDE_DD">Longitude:</label>\n                        <div class="col-md-7"><span>{{aSite.LONGITUDE_DD}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="HDATUM_ID">Horizontal Datum:</label>\n                        <div class="col-md-7"><span>{{aSite.HorizontalDatum}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="HCOLLECT_METHOD_ID">Horizontal Collection Method:</label>\n                        <div class="col-md-7"><span>{{aSite.HorizontalCollectMethod}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="ADDRESS">Address:</label>\n                        <div class="col-md-7"><span>{{aSite.ADDRESS || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="CITY">City:</label>\n                        <div class="col-md-7"><span>{{aSite.CITY || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="STATE">State:</label>\n                        <div class="col-md-7"><span>{{aSite.STATE || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="ZIP">Zip:</label>\n                        <div class="col-md-7"><span>{{aSite.ZIP || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="COUNTY">County:</label>\n                        <div class="col-md-7"><span>{{aSite.COUNTY || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="WATERBODY">Waterbody:</label>\n                        <div class="col-md-7"><span>{{aSite.WATERBODY}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="DRAINAGE_AREA_SQMI">Drainage Area (sq mi):</label>\n                        <div class="col-md-7"><span>{{aSite.DRAINAGE_AREA_SQMI || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="USGS_SID">Station ID for USGS gage:</label>\n                        <div class="col-md-7"><span>{{aSite.USGS_SID || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="NOAA_SID">Station ID for NOAA gage:</label>\n                        <div class="col-md-7"><span>{{aSite.NOAA_SID || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="OTHER_SID">Other Station ID:</label>\n                        <div class="col-md-7"><span>{{aSite.OTHER_SID || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="SAFETY_NOTES">Safety Notes:</label>\n                        <div class="col-md-7">\n                            <textarea ng-if="aSite.SAFETY_NOTES" readonly="readonly" class="form-control" type="text" rows="3" ng-model="aSite.SAFETY_NOTES">\n                            <span ng-if="aSite.SAFETY_NOTES == undefined">---</span>\n                        </div>\n                    </div>\n\n                    <hr>\n\n                                       \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="HOUSING_TYPE">Site Housing(s):</label>\n                        <div ng-show="showSiteHouseTable">\n                            <table class="table">\n                                <thead>\n                                    <tr>\n                                        <th class="col-sm-3">House Type</th>\n                                        <th class="col-sm-1">Housing Length (ft)</th>\n                                        <th class="col-sm-3">Housing Material</th>\n                                        <th class="col-sm-3">Housing Notes</th>\n                                        <th class="col-sm-1">Amount</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr ng-repeat="house in thisSiteHouseTypeModel">\n                                        <td>{{house.TYPE_NAME}}<input type="hidden" ng-model="house.HOUSING_TYPE_ID"><input type="hidden" ng-model="house.SITE_HOUSING_ID"></td>\n                                        <td>{{house.LENGTH}}</td>\n                                        <td>{{house.MATERIAL}}</td>\n                                        <td>{{house.NOTES}}</td>\n                                        <td>{{house.AMOUNT}}</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    \n                    <hr>\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="PRIORITY_ID">Priority:</label>\n                        <div class="col-md-7"><span>{{aSite.PriorityName}}</span></div>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="NETWORK_TYPE">Site Location Type in the Network:</label>\n                        <div class="col-md-7">\n                            <ul style="padding-left:0">\n                                <li style="list-style:none" ng-repeat="nt in siteNetworkTypes">\n                                    <span>{{nt}}</span>\n                                </li>\n                            </ul>\n                            <span ng-if="siteNetworkTypes.length < 1">---</span>\n                        </div>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="NETWORK_NAME">Network Name:</label>\n                        <div class="col-md-7">\n                            <ul style="padding-left:0">\n                                <li style="list-style:none" ng-repeat="nn in siteNetworkNames">\n                                    <span>{{nn}}</span>\n                                </li>\n                            </ul>\n                            <span ng-if="siteNetworkNames.length < 1">---</span>\n                        </div>\n                    </div>\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="ZONE">Zone:</label>\n                        <div class="col-md-7"><span>{{aSite.ZONE || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="SENSOR_NOT_APPROPRIATE">Check if Sensor is not Appropriate here:</label>\n                        <div class="col-md-7">\n                            <input type="checkbox" disabled="disabled" name="SENSOR_NOT_APPROPRIATE" ng-model="aSite.SENSOR_NOT_APPROPRIATE" ng-true-value="1" ng-false-value="0">\n                        </div>\n                    </div>\n\n                    \n                    <div class="form-group sensorInfo" ng-class="{darkClass:disableSensorParts}">\n                        <label class="col-md-4 control-label" for="IS_PERMANENT_HOUSING_INSTALLED">Permanent Sensor Housing Installed?</label>\n                        <div class="col-md-7"><span>{{aSite.IS_PERMANENT_HOUSING_INSTALLED || "---"}}</span></div>\n                    </div>\n\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="MEMBER_ID">Site Creator:</label>\n                        <div class="col-md-7">\n                            <span>{{aSite.Creator || "---"}}</span>\n                        </div>\n                    </div>\n                    <hr>\n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label">Land Owner Information:</label>\n                    </div>\n\n                    <div ng-show="addLandowner">\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="FNAME">First Name:</label>\n                            <div class="col-md-7"><span>{{landowner.FNAME || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="LNAME">Last Name:</label>\n                            <div class="col-md-7"><span>{{landowner.LNAME || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="TITLE">Affiliation/Title:</label>\n                            <div class="col-md-7"><span>{{landowner.TITLE || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="ADDRESS">Address:</label>\n                            <div class="col-md-7"><span>{{landowner.ADDRESS || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="CITY">City:</label>\n                            <div class="col-md-7"><span>{{landowner.CITY || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="STATE">State:</label>\n                            <div class="col-md-7"><span>{{landowner.STATE || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="LOZIP">Zip:</label>\n                            <div class="col-md-7"><span>{{landowner.ZIP || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="PRIMARYPHONE">Primary Phone:</label>\n                            <div class="col-md-7"><span>{{landowner.PRIMARYPHONE || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="SECONDARYPHONE">Secondary Phone:</label>\n                            <div class="col-md-7"><span>{{landowner.SECONDARYPHONE || "---"}}</span></div>\n                        </div>\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="EMAIL">Email:</label>\n                            <div class="col-md-7"><span>{{landowner.EMAIL || "---"}}</span></div>\n                        </div>\n                    </div>\n                    <div ng-show="!addLandowner">\n                        <span>No land owner added.</span>\n                    </div>\n                    <hr>\n\n                    <br clear="all">\n                    \n                    \n                    <div class="form-group">\n                        <label class="col-md-4 control-label" for="ACCESS_GRANTED">Access Permission Granted:</label>\n                        <div class="col-md-7"><span>{{aSite.ACCESS_GRANTED || "---"}}</span></div>\n                    </div>\n                </fieldset>\n            </form>\n        </div>\n\n    </uib-accordion-group>\n</uib-accordion>\n\n<style type="text/css">\n    .darkClass {\n        filter: alpha(opacity=50); /* IE */\n        opacity: 0.5; /* Safari, Opera */\n        -moz-opacity: 0.50; /* FireFox */\n        z-index: 20;\n        background-repeat: no-repeat;\n        background-position: center;\n    }\n</style>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("site/site.html",'<div class="col-md-12"><div ui-view="siteNo"></div></div><div class="col-md-8"><div ui-view="aSite"></div></div><div ng-if="siteID > 0"><div class="col-md-4"><div ui-view="op"></div><div ui-view="sensor"></div><div ui-view="hwm"></div><div ui-view="file"></div><div ui-view="peak"></div></div></div><style type="text/css">.darkClass {\n        filter: alpha(opacity=50); /* IE */\n        opacity: 0.5; /* Safari, Opera */\n        -moz-opacity: 0.50; /* FireFox */\n        z-index: 20;\n        background-repeat: no-repeat;\n        background-position: center;\n    }</style><script type="text/ng-template" id="SITEmodal.html"><div class="modal-header">\n        <h3 class="modal-title">Site</h3>\n    </div>\n    <form class="form-horizontal" name="siteForm">\n        <fieldset>\n            <div class="modal-body">\n\n                <!--<legend>Site Information</legend>-->\n                <!--Site Description*-->\n                <div class="form-group required">\n                    <label class="col-md-4 control-label req" for="SITE_DESCRIPTION">Site Description:</label>\n                    <div class="col-md-7">\n                        <textarea class="form-control" id="SITE_DESCRIPTION" type="text" rows="3" placeholder="Site Description" ng-model="aSite.SITE_DESCRIPTION" required />\n                    </div>\n                </div>\n\n                <!--Internal Notes-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="SITE_NOTES">Internal Notes:</label>\n                    <div class="col-md-7">\n                        <textarea class="form-control" id="SITE_NOTES" type="text" rows="3" placeholder="Internal Notes" ng-model="aSite.SITE_NOTES" />\n                    </div>\n                </div>\n\n                <!-- dec deg or dms: -->\n                <div class="form-group">\n                    <label class="col-md-4 control-label"></label>\n                    <div class="col-md-7">\n                        <label class="radio-inline">\n                            <input type="radio" name="decDegORdms" ng-model="aSite.decDegORdms" ng-change="latLongChange()" value="dd" /> Dec Deg\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="decDegORdms" ng-model="aSite.decDegORdms" ng-change="latLongChange()" value="dms" /> DMS\n                        </label>\n                    </div>\n                </div>\n\n                <!--Latitude*-->\n                <div class="form-group required" ng-class="{\'has-error\':siteForm.LATITUDE_DD.$invalid && siteForm.LATITUDE_DD.$dirty}">\n                    <label class="col-md-4 control-label req" for="LATITUDE_DD">Latitude:</label>\n                    <div class="col-md-7" ng-if="aSite.decDegORdms == \'dd\'">\n                        <input class="form-control" ng-keypress="isNum($event)" name="LATITUDE_DD" id="LATITUDE_DD" ng-model="aSite.LATITUDE_DD"\n                               ng-model-options="{ updateOn: \'blur\' }" ng-change="checkValue()" type="text" placeholder="Latitude" required />\n                    </div>\n                    <div class="col-md-7" ng-if="aSite.decDegORdms == \'dms\'">\n                        <table>\n                            <tr>\n                                <td><input class="form-control" ng-keypress="isNum($event)" ng-model-options="{ updateOn: \'blur\' }" ng-change="checkValue(\'dms\')" id="LaDeg" name="Deg" ng-model="DMS.LADeg" type="text" /></td>\n                                <td>°</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LAMin" type="text" /></td>\n                                <td>′</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LASec" type="text" /></td>\n                                <td>″</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n\n                <!--Longitude*-->\n                <div class="form-group required" ng-class="{\'has-error\':siteForm.LONGITUDE_DD.$invalid && siteForm.LONGITUDE_DD.$dirty}">\n                    <label class="col-md-4 control-label req" for="LONGITUDE_DD">Longitude:</label>\n                    <div class="col-md-7" ng-if="aSite.decDegORdms == \'dd\'">\n                        <input class="form-control" ng-keypress="isNum($event)" ng-enter="getAddress()" id="LONGITUDE_DD" name="LONGITUDE_DD" ng-model="aSite.LONGITUDE_DD"\n                               ng-model-options="{ updateOn: \'blur\' }" ng-change="checkValue()" type="text" placeholder="Longitude" required />\n                    </div>\n                    <div class="col-md-7" ng-if="aSite.decDegORdms == \'dms\'">\n                        <table>\n                            <tr>\n                                <td><input class="form-control" ng-keypress="isNum($event)" ng-model-options="{ updateOn: \'blur\' }" ng-change="checkValue(\'dms\')" id="LoDeg" name="Deg" ng-model="DMS.LODeg" type="text" /></td>\n                                <td>°</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LOMin" type="text" /></td>\n                                <td>′</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LOSec" type="text" /></td>\n                                <td>″</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n\n                <!--populate button*-->\n                <div class="form-group required" ng-if="aSite.SITE_ID == undefined">\n                    <label class="col-md-4 control-label" for="POPULATEBTN">Click here to populate address fields:</label>\n                    <div class="col-md-7">\n                        <button type="button" ng-click="getAddress()" class="btn btn-primary">Check for Nearby Sites and Lookup Address</button>\n                    </div>\n                </div>\n\n                <!--Horizontal Datum*-->\n                <div class="form-group required" ng-class="{\'has-error\':siteForm.HDATUM_ID.$invalid && siteForm.HDATUM_ID.$dirty}">\n                    <label class="col-md-4 control-label req" for="HDATUM_ID">Horizontal Datum:</label>\n                    <div class="col-md-7">\n                        <select class="form-control" name="HDATUM_ID" ng-model="aSite.HDATUM_ID"\n                                ng-options="hd.DATUM_ID as hd.DATUM_NAME for hd in HorizontalDatumList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!--Horizontal Collection Method*-->\n                <div class="form-group required" ng-class="{\'has-error\':siteForm.HCOLLECT_METHOD_ID.$invalid && siteForm.HCOLLECT_METHOD_ID.$dirty}">\n                    <label class="col-md-4 control-label req" for="HCOLLECT_METHOD_ID">Horizontal Collection Method:</label>\n                    <div class="col-md-7">\n                        <select class="form-control" name="HCOLLECT_METHOD_ID" ng-model="aSite.HCOLLECT_METHOD_ID"\n                                ng-options="hc.HCOLLECT_METHOD_ID as hc.HCOLLECT_METHOD for hc in HorCollMethodList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!--Address-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="ADDRESS">Address:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="ADDRESS" ng-model="aSite.ADDRESS" type="text" />\n                    </div>\n                </div>\n\n                <!--City-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="CITY">City:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="CITY" ng-model="aSite.CITY" type="text" />\n                    </div>\n                </div>\n\n                <!--State*-->\n                <div class="form-group required" ng-class="{\'has-error\':siteForm.STATE.$invalid && siteForm.STATE.$dirty}">\n                    <label class="col-md-4 control-label req" for="STATE">State:</label>\n                    <div class="col-md-7">\n                        <select class="form-control" name="STATE" ng-model="aSite.STATE" ng-change="updateCountyList(aSite.STATE)"\n                                ng-options="state.STATE_ABBREV as state.STATE_NAME for state in StateList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!--Zip-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="ZIP">Zip:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="ZIP" ng-model="aSite.ZIP" type="text" ui-mask="{{\'99999\'}}" />\n                    </div>\n                </div>\n\n                <!--County*-->\n                <div class="form-group required" ng-class="{\'has-error\':siteForm.COUNTY.$invalid && siteForm.COUNTY.$dirty}">\n                    <label class="col-md-4 control-label req" for="COUNTY">County:</label>\n                    <div class="col-md-7">\n                        <select class="form-control" name="COUNTY" ng-model="aSite.COUNTY" ng-options="c.COUNTY_NAME as c.COUNTY_NAME for c in stateCountyList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!--Waterbody*-->\n                <div class="form-group required" ng-class="{\'has-error\':siteForm.WATERBODY.$invalid && siteForm.WATERBODY.$dirty}">\n                    <label class="col-md-4 control-label req" for="WATERBODY">Waterbody:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="WATERBODY" ng-model="aSite.WATERBODY" type="text" required />\n                    </div>\n                </div>\n\n                <!--Drainage Area-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="DRAINAGE_AREA_SQMI">Drainage Area (sq mi):</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="DRAINAGE_AREA_SQMI" ng-model="aSite.DRAINAGE_AREA_SQMI" type="text" />\n                    </div>\n                </div>\n\n                <!--Station ID for USGS gage-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="USGS_SID">Station ID for USGS gage:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="USGS_SID" ng-model="aSite.USGS_SID" type="text" />\n                    </div>\n                </div>\n\n                <!--Station ID for NOAA gage-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="NOAA_SID">Station ID for NOAA gage:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="NOAA_SID" ng-model="aSite.NOAA_SID" type="text" />\n                    </div>\n                </div>\n\n                <!--Other Station ID-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="OTHER_SID">Other Station ID:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="OTHER_SID" placeholder="Please add details in the Site Description" ng-model="aSite.OTHER_SID" type="text" />\n                    </div>\n                </div>\n\n                <!--Safety Notes-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="SAFETY_NOTES">Safety Notes:</label>\n                    <div class="col-md-7">\n                        <textarea class="form-control" type="text" rows="3" ng-model="aSite.SAFETY_NOTES" />\n                    </div>\n                </div>\n\n                <hr />\n\n                <!--Site Housing section-->\n                <div class="form-group">\n                    <div style="padding:0" class="panel panel-default">\n                        <div class="panel-heading">\n                            <h3 class="panel-title">Site Housing</h3>\n                        </div>\n                        <div class="panel-body">\n                            <label class="col-md-4 control-label" for="HOUSING_TYPE">Site Housing(s):</label>\n                            <div class="col-md-7">\n                                <div isteven-multi-select\n                                     input-model="allHousingTypeList"\n                                     output-model="houseType.value"\n                                     button-label="TYPE_NAME"\n                                     item-label="TYPE_NAME"\n                                     max-height="300px"\n                                     on-item-click="HouseTypeClick(data)"\n                                     tick-property="selected"\n                                     helper-elements="filter">\n                                </div>\n                            </div>\n                            <br clear="all" />\n                            <div ng-show="siteHouseTypesTable.length > 0">\n                                <table class="table">\n                                    <thead>\n                                        <tr>\n                                            <th class="col-sm-3">House Type</th>\n                                            <th class="col-sm-1">Housing Length (ft)</th>\n                                            <th class="col-sm-3">Housing Material</th>\n                                            <th class="col-sm-3">Housing Notes</th>\n                                            <th class="col-sm-1">Amount</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr ng-repeat="house in siteHouseTypesTable">\n                                            <td>{{house.TYPE_NAME}}<input type="hidden" ng-model="house.HOUSING_TYPE_ID" /><input type="hidden" ng-model="house.SITE_HOUSING_ID" /></td>\n                                            <td><input style="width:70%" ng-keypress="isNum($event)" ng-model="house.LENGTH" /></td>\n                                            <td><input ng-model="house.MATERIAL" /></td>\n                                            <td><input ng-model="house.NOTES" /></td>\n                                            <td><input style="width:70%" ng-keypress="isNum($event)" ng-model="house.AMOUNT" /></td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div><!-- end panel-body-->\n                    </div>\n                </div>\n\n                <!--Priority-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="PRIORITY_ID">Priority:</label>\n                    <div class="col-md-7">\n                        <select class="form-control" name="PRIORITY_ID" ng-model="aSite.PRIORITY_ID" ng-options="p.PRIORITY_ID as p.PRIORITY_NAME for p in DepPriorityList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!--Network Type-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="NETWORK_TYPE">Site Location Type in the Network:</label>\n                    <div class="col-md-7">\n                        <ul style="padding-left:0">\n                            <li style="list-style:none;" ng-repeat="nt in NetTypeList">\n                                <input type="checkbox" ng-model="nt.selected" ng-change="netTypeChg()" />\n                                <span>{{nt.NETWORK_TYPE_NAME}}</span>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n                <!--Network NAME-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="NETWORK_NAME">Network Name:</label>\n                    <div class="col-md-7">\n                        <ul style="padding-left:0">\n                            <li style="list-style:none;" ng-repeat="nn in NetNameList">\n                                <input type="checkbox" ng-model="nn.selected" ng-change="whichOne(nn)" ng-disabled="(checked == checkedName) && (nn.NAME != checkedName)" />\n                                <span>{{nn.NAME}}</span>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n                <!--Zone-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="ZONE">Zone:</label>\n                    <div class="col-md-7">\n                        <input class="form-control" name="ZONE" ng-model="aSite.ZONE" type="text" />\n                    </div>\n                </div>\n\n                <!--Sensor Not Appropriate-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="SENSOR_NOT_APPROPRIATE">Check if Sensor is not appropriate here:</label>\n                    <div class="col-md-7">\n                        <ul style="padding-left:0">\n                            <li style="list-style:none;">\n                                <input type="checkbox" name="SENSOR_NOT_APPROPRIATE" ng-click="dimAction()" ng-model="aSite.SENSOR_NOT_APPROPRIATE" ng-true-value="1" ng-false-value="0" />\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n                <!--Permanent Sensor Housing?-->\n                <div class="form-group sensorInfo" ng-class="{darkClass:disableSensorParts}">\n                    <label class="col-md-4 control-label" for="IS_PERMANENT_HOUSING_INSTALLED">Permanent Sensor Housing Installed?</label>\n                    <div class="col-md-7">\n                        <label class="radio-inline">\n                            <input ng-disabled="disableSensorParts" type="radio" name="IS_PERMANENT_HOUSING_INSTALLED" ng-model="aSite.IS_PERMANENT_HOUSING_INSTALLED" value="Yes"> Yes\n                        </label>\n                        <label class="radio-inline">\n                            <input ng-disabled="disableSensorParts" type="radio" name="IS_PERMANENT_HOUSING_INSTALLED" ng-model="aSite.IS_PERMANENT_HOUSING_INSTALLED" value="No"> No\n                        </label>\n                    </div>\n                </div>\n\n                <!--Add Proposed Sensor-->\n                <div class="form-group sensorInfo" ng-class="{darkClass:disableSensorParts}" ng-show="aSite.SITE_ID == undefined">\n                    <label class="col-md-4 control-label" for="PROPOSED_SENSOR">Add Proposed Sensor:</label>\n                    <div class="col-md-7">\n                        <ul style="padding-left:0">\n                            <li style="list-style:none;" ng-repeat="ps in ProposedSens">\n                                <input ng-disabled="disableSensorParts" type="checkbox" ng-model="ps.selected" ng-value="{{ps.selected}}" />\n                                <span>{{ps.METHOD}}</span>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n                <!--Site creator-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="MEMBER_ID">Site Creator:</label>\n                    <div class="col-md-7">\n                        <span>{{aSite.Creator}}</span>\n                    </div>\n                </div>\n\n                <!--Add Landowner button-->\n                <div class="form-group" ng-show="aSite.LANDOWNERCONTACT_ID == null">\n                    <label class="col-md-4 control-label" for="LANDOWNERBTN">Landowner Contact:</label>\n                    <div class="col-md-7">\n                        <button type="button" ng-click="showLandOwnerPart()" class="btn btn-primary">Add Landowner</button>\n                        <!-- <button type="button" ng-click="collapseLandowner = !collapseLandowner" class="btn btn-primary">Add Landowner</button>-->\n                    </div>\n                </div>\n\n                <!--start Landowner contact area -->\n                <div ng-show="addLandowner">\n                    <div class="panel panel-default col-md-8 col-md-offset-1" style="padding:0">\n                        <div class="panel-heading">Land Owner Information</div>\n                        <div class="panel-body">\n                            <!--First Name:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="FNAME">First Name:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOFNAME" name="FNAME" ng-model="landowner.FNAME" type="text" />\n                                </div>\n                            </div>\n                            <!--Last Name:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="LNAME">Last Name:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOLNAME" name="LNAME" ng-model="landowner.LNAME" type="text" />\n                                </div>\n                            </div>\n                            <!--Affiliation/Title:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="TITLE">Affiliation/Title:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOTITLE" name="TITLE" ng-model="landowner.TITLE" type="text" />\n                                </div>\n                            </div>\n                            <!--Address:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="ADDRESS">Address:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOADDRESS" name="ADDRESS" ng-model="landowner.ADDRESS" type="text" />\n                                </div>\n                            </div>\n                            <!--City:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="CITY">City:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOCITY" name="CITY" ng-model="landowner.CITY" type="text" />\n                                </div>\n                            </div>\n                            <!--State-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="STATE">State:</label>\n                                <div class="col-md-7">\n                                    <select class="form-control" id="LOSTATE" name="STATE" ng-model="landowner.STATE" ng-options="state.STATE_ABBREV as state.STATE_NAME for state in StateList">\n                                        <option value=""></option>\n                                    </select>\n                                </div>\n                            </div>\n                            <!--Zip:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="ZIP">Zip:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOZIP" name="ZIP" ng-model="landowner.ZIP" type="text" ui-mask="{{\'99999\'}}" />\n                                </div>\n                            </div>\n                            <!--Primary Phone:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="PRIMARYPHONE">Primary Phone:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOPRIMARYPHONE" name="PRIMARYPHONE"\n                                           type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy: false}"\n                                           ng-model="landowner.PRIMARYPHONE" />\n                                </div>\n                            </div>\n                            <!--Secondary Phone:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="SECONDARYPHONE">Secondary Phone:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOSECONDARYPHONE" name="SECONDARYPHONE"\n                                           type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}"\n                                           ng-model="landowner.SECONDARYPHONE" />\n                                </div>\n                            </div>\n                            <!--Email:-->\n                            <div class="form-group">\n                                <label class="col-md-4 control-label" for="EMAIL">Email:</label>\n                                <div class="col-md-7">\n                                    <input class="form-control" id="LOEMAIL" name="EMAIL" ng-model="landowner.EMAIL" type="email" />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <br clear="all" />\n                <!--end Landowner contact area-->\n                <!--Access Permission Granted-->\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="ACCESS_GRANTED">Access Permission Granted:</label>\n                    <div class="col-md-7">\n                        <label class="radio-inline">\n                            <input type="radio" name="ACCESS_GRANTED" ng-model="aSite.ACCESS_GRANTED" value="Yes"> Yes\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="ACCESS_GRANTED" ng-model="aSite.ACCESS_GRANTED" value="No"> No\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="ACCESS_GRANTED" ng-model="aSite.ACCESS_GRANTED" value="Not Needed"> Not Needed\n                        </label>\n                    </div>\n                </div>\n\n                <br clear="all" />\n\n                <!--submit and cancel buttons-->\n                <div class="form-group">\n                    <div class="col-md-4 col-md-offset-2">\n                        <span>\n                            <button ng-show="aSite.SITE_ID == undefined" class="btn btn-primary" style="width:80px;margin-right:10px" ng-click="create(siteForm.$valid)">\n                                <span>Create</span>\n                            </button>\n                        </span>\n                        <span>\n                            <button ng-show="aSite.SITE_ID != undefined" class="btn btn-primary" style="width:80px;margin-right:10px" ng-click="save(siteForm.$valid)">\n                                <span>Save</span>\n                            </button>\n                        </span>\n                        <span>\n                            <button type="button" class="btn btn-default" ng-click="cancel()">\n                                <span>Cancel</span>\n                            </button>\n                        </span>\n                    </div>\n                </div>\n            </div><!--end modal-body -->\n        </fieldset>\n    </form></script><script type="text/ng-template" id="OPmodal.html"><div class="modal-header">\n        <h3 class="modal-title">Objective Point</h3>\n    </div>\n\n    <form class="form-horizontal" name="OPForm">\n        <fieldset>\n            <div class="modal-body">\n\n                <!-- Type: -->\n                <div class="form-group required" ng-class="{\'has-error\':OPForm.OP_TYPE_ID.$invalid && OPForm.OP_TYPE_ID.$dirty}">\n                    <label class="col-md-3 control-label req" for="OP_TYPE_ID">Type:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="OP_TYPE_ID" ng-model="OP.OP_TYPE_ID"\n                                ng-options="opt.OBJECTIVE_POINT_TYPE_ID as opt.OP_TYPE for opt in OPTypeList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Name: -->\n                <div class="form-group required" ng-class="{\'has-error\':OPForm.NAME.$invalid && OPForm.NAME.$dirty}">\n                    <label class="col-md-3 control-label req" for="NAME">Name:</label>\n                    <div class="col-md-6">\n                        <input class="form-control" name="NAME" ng-model="OP.NAME" type="text" required />\n                    </div>\n                </div>\n\n                <!-- Description: -->\n                <div class="form-group required" ng-class="{\'has-error\':OPForm.DESCRIPTION.$invalid && OPForm.DESCRIPTION.$dirty}">\n                    <label class="col-md-3 control-label req" for="DESCRIPTION">Description:</label>\n                    <div class="col-md-6">\n                        <textarea class="form-control" name="DESCRIPTION" type=" text" rows="3" ng-model="OP.DESCRIPTION" required />\n                    </div>\n                </div>\n\n                <!-- Control Identifier add button -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="CONTROL">Control Identifier:</label>\n                    <div class="col-md-6">\n                        <button type="button" class="btn btn-default" ng-click="addNewIdentifier()">Add New Identifier</button>\n                    </div>\n                </div>\n\n                <!-- Control Identifier input: -->\n                <div class="form-group" ng-show="showControlIDinput">\n                    <label class="col-md-3 control-label"></label>\n                    <div class="col-md-6">\n                        <div ng-repeat="id in addedIdentifiers">\n                            <div class="col-md-12" style="margin-bottom:5px">\n                                <div class="col-md-7"><input class="form-control" name="OPControl" ng-model="id.IDENTIFIER" type="text" /></div>\n                                <input type="hidden" name="OP_CONTROL_IDENTIFIER_ID" ng-model="id.OP_CONTROL_IDENTIFIER_ID" />\n                                <input type="hidden" name="OBJECTIVE_POINT_ID" ng-model="id.OBJECTIVE_POINT_ID" />\n\n                                <label class="radio-inline">\n                                    <input type="radio" name="IDENTIFIER_TYPE{{$index}}" ng-model="id.IDENTIFIER_TYPE" value="PID" /> PID\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="IDENTIFIER_TYPE{{$index}}" ng-model="id.IDENTIFIER_TYPE" value="Other" /> Other\n                                </label>\n                                <div class="buttons pull-right">\n                                    <button class="btn" ng-click="RemoveID(id)">\n                                        <i class="glyphicon glyphicon-remove"></i>\n                                    </button>\n                                </div>\n                            </div><br />\n                        </div>\n                    </div>\n                </div>\n\n                <!-- dec deg or dms: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label"></label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="decDegORdms" ng-change="latLongChange()" ng-model="OP.decDegORdms" value="dd" /> Dec Deg\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="decDegORdms" ng-change="latLongChange()" ng-model="OP.decDegORdms" value="dms" /> DMS\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Latitude: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="LATITUDE_DD">Latitude:</label>\n                    <div class="col-md-6" ng-if="OP.decDegORdms == \'dd\'">\n                        <input class="form-control" ng-keypress="isNum($event)" name="LATITUDE_DD" id="LATITUDE_DD" ng-model="OP.LATITUDE_DD" type="text" />\n                    </div>\n                    <div class="col-md-6" ng-if="OP.decDegORdms == \'dms\'">\n                        <table>\n                            <tr>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Deg" ng-model="DMS.LADeg" type="text" /></td>\n                                <td>°</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LAMin" type="text" /></td>\n                                <td>′</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LASec" type="text" /></td>\n                                <td>″</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n\n                <!-- Longitude: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="LONGITUDE_DD">Longitude:</label>\n                    <div class="col-md-6" ng-if="OP.decDegORdms == \'dd\'">\n                        <input class="form-control" ng-keypress="isNum($event)" id="longitude_dd" name="LONGITUDE_DD" ng-model="OP.LONGITUDE_DD" type="text" />\n                    </div>\n                    <div class="col-md-6" ng-if="OP.decDegORdms == \'dms\'">\n                        <table>\n                            <tr>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Deg" ng-model="DMS.LODeg" type="text" /></td>\n                                <td>°</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LOMin" type="text" /></td>\n                                <td>′</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LOSec" type="text" /></td>\n                                <td>″</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n\n                <!-- Horizontal Datum: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="HDATUM_ID">Horizontal Datum:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="HDATUM_ID" ng-model="OP.HDATUM_ID"\n                                ng-options="hd.DATUM_ID as hd.DATUM_NAME for hd in HDList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Horizontal Collection Method: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="HCOLLECT_METHOD_ID">Horizontal Collection Method:</label>\n                    <div class="col-md-6">\n                        <select class="form-control"  name="HCOLLECT_METHOD_ID" ng-model="OP.HCOLLECT_METHOD_ID"\n                                ng-options="hcm.HCOLLECT_METHOD_ID as hcm.HCOLLECT_METHOD for hcm in HCollectMethodList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Ft or Meter radios: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label"></label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="FTorMETER" ng-model="OP.FTorMETER" value="ft" /> ft\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="FTorMETER" ng-model="OP.FTorMETER" value="meter" /> meter\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Elevation: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="ELEV_FT">Elevation:</label>\n                    <div class="col-md-6">\n                        <input class="form-control" ng-keypress="isNum($event)" name="ELEV_FT" ng-model="OP.ELEV_FT" type="text" />\n                    </div>\n                </div>\n\n                <!-- Vertical Datum: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="VDATUM_ID">Vertical Datum:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="VDATUM_ID" ng-model="OP.VDATUM_ID"\n                                ng-options="vd.DATUM_ID as vd.DATUM_ABBREVIATION for vd in VDatumList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Vertical Collection Method: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="VCOLLECT_METHOD_ID">Vertical Collection Method:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="VCOLLECT_METHOD_ID" ng-model="OP.VCOLLECT_METHOD_ID"\n                                ng-options="vcm.VCOLLECT_METHOD_ID as vcm.VCOLLECT_METHOD for vcm in VCollectMethodList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Ft or CM radios: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label"></label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="FTorCM" ng-model="OP.FTorCM" value="ft" /> +/- ft\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="FTorCM" ng-model="OP.FTorCM" value="cm" /> +/- cm\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Uncertainty: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="UNCERTAINTY">Uncertainty:</label>\n                    <div class="col-md-6">\n                        <div class="col-md-12" style="margin-bottom:5px;padding-left:0">\n                            <div class="col-md-3" style="padding-left: 0;"><input class="form-control" ng-disabled="OP.UNQUANTIFIED==1" ng-keypress="isNum($event)" ng-model="OP.UNCERTAINTY" type="text" /></div>\n                            <div class="col-md-2" style="text-decoration:underline">OR</span></div>\n                            <div class="col-md-5">\n                                <input type="checkbox" ng-model="OP.UNQUANTIFIED" ng-checked="OP.UNQUANTIFIED==1" ng-true-value="1" ng-false-value="0" ng-click="UnquantChecked()" />\n                                <span style="margin-left:10px">Unquantified</span>\n                            </div>\n                            <br />\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Quality: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="OP_QUALITY_ID">Quality:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="OP_QUALITY_ID" ng-model="OP.OP_QUALITY_ID"\n                                ng-options="opq.OP_QUALITY_ID as opq.QUALITY for opq in OPQualityList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Objective Point Notes: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="OP_NOTES">Objective Point Notes:</label>\n                    <div class="col-md-6">\n                        <textarea class="form-control" type="text" rows="3" ng-model="OP.OP_NOTES" />\n                    </div>\n                </div>\n\n                <!-- Date Established: -->\n                <div class="form-group required" ng-class="{\'has-error\':OPForm.DATE_ESTABLISHED.$invalid && OPForm.DATE_ESTABLISHED.$dirty}">\n                    <label class="col-md-3 control-label req" for="DATE_ESTABLISHED">Date Established:</label>\n                    <div class="col-md-6 input-group" style="padding-right:14px;padding-left:14px">\n                        <input class="form-control" name="de" type="text" uib-datepicker-popup="MMM dd, yyyy"\n                               is-open="datepickrs.de" ng-model="OP.DATE_ESTABLISHED" required />\n                        <span class="input-group-btn">\n                            <button class="btn btn-default" ng-click="open($event, \'de\')">\n                                <i class="glyphicon glyphicon-calendar" />\n                            </button>\n                        </span>\n                    </div>\n                </div>\n\n                <!-- Date Recovered: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="DATE_RECOVERED">Date Recovered:</label>\n                    <div class="col-md-6 input-group" style="padding-right:14px;padding-left:14px">\n                        <input class="form-control" name="dr" type="text" uib-datepicker-popup="MMM dd, yyyy"\n                               is-open="datepickrs.dr" ng-model="OP.DATE_RECOVERED" />\n                        <span class="input-group-btn">\n                            <button class="btn btn-default" ng-click="open($event, \'dr\')">\n                                <i class="glyphicon glyphicon-calendar" />\n                            </button>\n                        </span>\n                    </div>\n                </div>\n\n                <div ng-if="OPFiles">\n                    <h3>Objective Point Files</h3>\n                    <!--<div style="height:140px;display:inline">\n                    <carousel interval="myInterval" no-wrap="noWrapSlides">\n                        <slide ng-repeat="slide in slides" active="slide.active">\n                            <img ng-src="{{slide.image}}" style="margin:auto;">\n                            <div class="carousel-caption">\n                                <h4>Slide {{$index}}</h4>\n                                <p>{{slide.text}}</p>\n                            </div>\n                        </slide>\n                    </carousel>\n                </div>-->\n                    <!--<div ng-repeat="opf in OPFiles">\n                    <div ng-if="opf.FILETYPE_ID == 1">\n                        <h3>Photo Files</h3>\n\n                    </div>\n                </div>-->\n                </div>\n\n                <div class="modal-footer">\n                    <div class="form-group">\n                        <div class="col-md-4 col-md-offset-2">\n                            <span>\n                                <button ng-show="OP.OBJECTIVE_POINT_ID == undefined" class="btn btn-primary" ng-click="create(OPForm.$valid)">\n                                    <span>Create</span>\n                                </button>\n                                <span>\n                                    <button ng-show="OP.OBJECTIVE_POINT_ID != undefined" class="btn btn-primary" ng-click="save(OPForm.$valid)">\n                                        <span>Save</span>\n                                    </button>\n                                </span>\n                                <span>\n                                    <button ng-show="OP.OBJECTIVE_POINT_ID != undefined" class="btn btn-danger" ng-click="deleteOP(OPForm.$valid)">\n                                        <span>Delete</span>\n                                    </button>\n                                </span>\n                                <span>\n                                    <button type="button" class="btn btn-warning" ng-click="cancel()">\n                                        <span>Cancel</span>\n                                    </button>\n                                </span>\n                        </div>\n\n\n                        <!--<button class="btn btn-primary" ng-if="OP.OBJECTIVE_POINT_ID != undefined" ng-click="save()">Save</button>\n                        <button class="btn btn-danger" ng-if="OP.OBJECTIVE_POINT_ID != undefined" ng-click="deleteOP()">Delete</button>\n                        <button class="btn btn-primary" ng-if="OP.OBJECTIVE_POINT_ID == undefined" ng-click="create()">Create</button>\n                        <button class="btn btn-warning" ng-click="cancel()">Cancel</button>-->\n                    </div>\n        </fieldset>\n    </form></script><script type="text/ng-template" id="HWMmodal.html"><div class="modal-header">\n        <h3 class="modal-title">HWM</h3>\n    </div>\n\n    <form class="form-horizontal" name="HWMForm">\n        <fieldset>\n            <div class="modal-body">\n                <!-- Waterbody: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="WATERBODY">Waterbody:</label>\n                    <div class="col-md-6">\n                        <input class="form-control" name="WATERBODY" ng-model="aHWM.WATERBODY" type="text" />\n                    </div>\n                </div>\n\n                <!-- Event: -->\n                <div class="form-group" ng-class="{\'has-error\':HWMForm.EVENT_ID.$invalid && HWMForm.EVENT_ID.$dirty}">\n                    <label class="col-md-3 control-label" for="EVENT_ID">Event:</label>\n                    <div class="col-md-6">\n                        <div class="col-md-8">{{EventName}}</div>\n                        <div class="col-md-3" ng-show="userRole == \'Admin\' && aHWM.HWM_ID != undefined">\n                            <button type="button" ng-click="showChangeEventDD()" class="btn btn-primary">Change Event</button>\n                        </div>\n                    </div>\n                </div>\n\n                <!--Event dropdown for admin -->\n                <div ng-show="showEventDD">\n                    <div class="form-group">\n                        <label class="col-md-3 control-label">Events:</label>\n                        <div class="col-md-6">\n                            <select class="form-control" name="EVENT_ID" ng-model="adminChanged.EVENT_ID" ng-change="ChangeEvent()"\n                                    ng-options="e.EVENT_ID as (e.EVENT_NAME + \' --- \' + (e.EVENT_START_DATE | date: \'MM/dd/yyyy\') + \' to \' + ((e.EVENT_END_DATE || \'-Not Set-\') | date: \'MM/dd/yyyy\'))  for e in eventList | orderBy: \'-EVENT_START_DATE\'"\n                                <option value=""></option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- HWM Type:* -->\n                <div class="form-group required" ng-class="{\'has-error\':HWMForm.HWM_TYPE_ID.$invalid && HWMForm.HWM_TYPE_ID.$dirty}">\n                    <label class="col-md-3 control-label req" for="HWM_TYPE_ID">HWM Type:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="HWM_TYPE_ID" ng-model="aHWM.HWM_TYPE_ID"\n                                ng-options="htype.HWM_TYPE_ID as htype.HWM_TYPE for htype in hwmTypeList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- HWM Environment:* -->\n                <div class="form-group required" ng-class="{\'has-error\':HWMForm.HWM_ENVIRONMENT.$invalid && HWMForm.HWM_ENVIRONMENT.$dirty}">\n                    <label class="col-md-3 control-label req">HWM Environment:</label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="HWM_ENVIRONMENT" ng-model="aHWM.HWM_ENVIRONMENT" value="Coastal" />Coastal\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="HWM_ENVIRONMENT" ng-model="aHWM.HWM_ENVIRONMENT" value="Riverine" />Riverine\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Breakdown of categories -->\n                <div class="form-group">\n                    <label class="col-md-3"></label>\n                    <div class="col-md-6">\n                        <table>\n                            <tr><td style="text-align: center;width: 81px">0.05</td><td style="text-align: center;width: 81px">0.02</td><td style="text-align: left;width: 81px">Excellent</td></tr>\n                            <tr><td style="text-align: center;width: 81px">0.1</td><td style="text-align: center;width: 81px">0.05</td><td style="text-align: left;width: 81px">Good</td></tr>\n                            <tr><td style="text-align: center;width: 81px">0.2</td><td style="text-align: center;width: 81px">0.1</td><td style="text-align: left;width: 81px">Fair</td></tr>\n                            <tr><td style="text-align: center;width: 81px">0.4</td><td style="text-align: center;width: 81px">0.2</td><td style="text-align: left;width: 81px">Poor</td></tr>\n                            <tr><td style="text-align: center;width: 81px">&#62;0.40</td><td style="text-align: center;width: 81px">&#62;0.20</td><td style="text-align: left;width: 81px">V. Poor</td></tr>\n                            <tr><td colspan="3"><a href="http://pubs.usgs.gov/tm/11d1/" target="_blank">USGS T&M 11-D1, Table 13</a></td></tr>\n                        </table>\n                    </div>\n                </div>\n\n                <!-- HWM Quality:* -->\n                <div class="form-group required" ng-class="{\'has-error\':HWMForm.HWM_QUALITY_ID.$invalid && HWMForm.HWM_QUALITY_ID.$dirty}">\n                    <label class="col-md-3 control-label req">HWM Quality:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="HWM_QUALITY_ID" ng-model="aHWM.HWM_QUALITY_ID"\n                                ng-options="hqual.HWM_QUALITY_ID as hqual.HWM_QUALITY for hqual in hwmQualList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Bank: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label">Bank:</label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="BANK" ng-model="aHWM.BANK" value="Left" />Left\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="BANK" ng-model="aHWM.BANK" value="Right" />Right\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="BANK" ng-model="aHWM.BANK" value="N/A" />N/A\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Location Description: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="HWM_LOCATIONDESCRIPTION">Location Description:</label>\n                    <div class="col-md-6">\n                        <textarea class="form-control" name="HWM_LOCATIONDESCRIPTION" type=" text" rows="3" ng-model="aHWM.HWM_LOCATIONDESCRIPTION" />\n                    </div>\n                </div>\n\n                <!-- dec deg or dms: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label"></label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="decDegORdms" ng-change="latLongChange()" ng-model="aHWM.decDegORdms" value="dd" /> Dec Deg\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="decDegORdms" ng-change="latLongChange()" ng-model="aHWM.decDegORdms" value="dms" /> DMS\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Latitude: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="LATITUDE_DD">Latitude:</label>\n                    <div class="col-md-6" ng-if="aHWM.decDegORdms == \'dd\'">\n                        <input class="form-control" ng-keypress="isNum($event)" name="LATITUDE_DD" id="LATITUDE_DD" ng-model="aHWM.LATITUDE_DD" type="text" />\n                    </div>\n                    <div class="col-md-6" ng-if="aHWM.decDegORdms == \'dms\'">\n                        <table>\n                            <tr>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Deg" ng-model="DMS.LADeg" type="text" /></td>\n                                <td>°</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LAMin" type="text" /></td>\n                                <td>′</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LASec" type="text" /></td>\n                                <td>″</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n\n                <!-- Longitude: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="LONGITUDE_DD">Longitude:</label>\n                    <div class="col-md-6" ng-if="aHWM.decDegORdms == \'dd\'">\n                        <input class="form-control" ng-keypress="isNum($event)" id="longitude_dd" name="LONGITUDE_DD" ng-model="aHWM.LONGITUDE_DD" type="text" />\n                    </div>\n                    <div class="col-md-6" ng-if="aHWM.decDegORdms == \'dms\'">\n                        <table>\n                            <tr>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Deg" ng-model="DMS.LODeg" type="text" /></td>\n                                <td>°</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LOMin" type="text" /></td>\n                                <td>′</td>\n                                <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LOSec" type="text" /></td>\n                                <td>″</td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n\n                <!-- Horizontal Datum:* -->\n                <div class="form-group required" ng-class="{\'has-error\':HWMForm.HDATUM_ID.$invalid && HWMForm.HDATUM_ID.$dirty}">\n                    <label class="col-md-3 control-label req">Horizontal Datum:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="HDATUM_ID" ng-model="aHWM.HDATUM_ID"\n                                ng-options="hd.DATUM_ID as hd.DATUM_NAME for hd in HDatumsList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Horizontal Collection Method: * -->\n                <div class="form-group required" ng-class="{\'has-error\':HWMForm.HCOLLECT_METHOD_ID.$invalid && HWMForm.HCOLLECT_METHOD_ID.$dirty}">\n                    <label class="col-md-3 control-label req">Horizontal Collection Method:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="HCOLLECT_METHOD_ID" ng-model="aHWM.HCOLLECT_METHOD_ID"\n                                ng-options="hcm.HCOLLECT_METHOD_ID as hcm.HCOLLECT_METHOD for hcm in hCollMList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Surveyed Elevation (ft): -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="ELEV_FT">Surveyed Elevation (ft):</label>\n                    <div class="col-md-6">\n                        <input class="form-control" ng-keypress="isNum($event)" name="ELEV_FT" ng-model="aHWM.ELEV_FT" type="text" />\n                    </div>\n                </div>\n\n                <!-- Vertical Datum: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="VDATUM_ID">Vertical Datum:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="VDATUM_ID" ng-model="aHWM.VDATUM_ID"\n                                ng-options="vd.DATUM_ID as vd.DATUM_NAME for vd in VDatumsList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Height above ground (ft): -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="HEIGHT_ABOVE_GND">Height above ground (ft):</label>\n                    <div class="col-md-6">\n                        <input class="form-control" ng-keypress="isNum($event)" name="HEIGHT_ABOVE_GND" ng-model="aHWM.HEIGHT_ABOVE_GND" type="text" />\n                    </div>\n                </div>\n\n                <!-- Flagged Date: * -->\n                <div class="form-group required" ng-class="{\'has-error\':HWMForm.FLAG_DATE.$invalid && HWMForm.FLAG_DATE.$dirty}">\n                    <label class="col-md-3 control-label req" for="FLAG_DATE">Flagged Date:</label>\n                    <div class="col-md-6 input-group" style="padding-right:14px;padding-left:14px">\n                        <input class="form-control" id="FLAG_DATE" name="fd" type="text" uib-datepicker-popup="MMM dd, yyyy"\n                               is-open="datepickrs.fd" ng-model="aHWM.FLAG_DATE" required />\n                        <span class="input-group-btn">\n                            <button class="btn btn-default" ng-click="open($event, \'fd\')">\n                                <i class="glyphicon glyphicon-calendar" />\n                            </button>\n                        </span>\n                    </div>\n                </div>\n\n                <!-- Surveyed Date: -->\n                <div class="form-group" ng-class="{\'has-error\':HWMForm.SURVEY_DATE.$invalid && HWMForm.SURVEY_DATE.$dirty}">\n                    <label class="col-md-3 control-label" for="SURVEY_DATE">Surveyed Date:</label>\n                    <div class="col-md-6 input-group" style="padding-right:14px;padding-left:14px">\n                        <input class="form-control" id="SURVEY_DATE" name="sd" type="text" uib-datepicker-popup="MMM dd, yyyy"\n                               is-open="datepickrs.sd" ng-model="aHWM.SURVEY_DATE" />\n                        <span class="input-group-btn">\n                            <button class="btn btn-default" ng-click="open($event, \'sd\')">\n                                <i class="glyphicon glyphicon-calendar" />\n                            </button>\n                        </span>\n                    </div>\n                </div>\n\n                <!-- Vertical Collection Method: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="VDATUM_ID">Vertical Collection Method:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="VCOLLECT_METHOD_ID" ng-model="aHWM.VCOLLECT_METHOD_ID"\n                                ng-options="vcm.VCOLLECT_METHOD_ID as vcm.VCOLLECT_METHOD for vcm in vCollMList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Marker: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="MARKER_ID">Marker:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="MARKER_ID" ng-model="aHWM.MARKER_ID"\n                                ng-options="vd.MARKER_ID as vd.MARKER1 for vd in markerList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Notes: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="HWM_NOTES">Notes:</label>\n                    <div class="col-md-6">\n                        <textarea class="form-control" name="HWM_NOTES" type=" text" rows="3" ng-model="aHWM.HWM_NOTES" />\n                    </div>\n                </div>\n\n                <!-- Stillwater Location? -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label">Stillwater Location?:</label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="STILLWATER" ng-model="aHWM.STILLWATER" value="1" />Yes\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="STILLWATER" ng-model="aHWM.STILLWATER" value="0" />No\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Flagging Member: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="FLAG_TEAM_ID">Flagging Member:</label>\n                    <div class="col-md-6">\n                        <span>{{FlagMember.FNAME}} {{FlagMember.LNAME}}</span>                        \n                    </div>\n                </div>\n\n                <!-- Survey Member: -->\n                <div class="form-group" ng-show="aHWM.SURVEY_TEAM_ID">\n                    <label class="col-md-3 control-label" for="SURVEY_TEAM_ID">Survey Member:</label>\n                    <div class="col-md-6">\n                        <span>{{SurveyMember.FNAME}} {{SurveyMember.LNAME}}</span>                        \n                    </div>\n                </div>\n\n            </div>\n\n            <div class="modal-footer">\n                <button class="btn btn-primary" ng-if="aHWM.HWM_ID != undefined" ng-click="save()">Save</button>\n                <button class="btn btn-danger" ng-if="aHWM.HWM_ID != undefined" ng-click="deleteHWM()">Delete</button>\n                <button class="btn btn-primary" ng-if="aHWM.HWM_ID == undefined" ng-click="create()">Create</button>\n                <button class="btn btn-warning" ng-click="cancel()">Cancel</button>\n            </div>\n        </fieldset>\n    </form></script><script type="text/ng-template" id="Sensormodal.html"><div class="modal-header">\n        <h3 class="modal-title">Deploy Sensor</h3>\n    </div>\n\n    <form class="form-horizontal" name="SensorForm">\n        <fieldset>\n            <div class="modal-body">\n\n                <!-- Event: -->\n                <div class="form-group" ng-class="{\'has-error\':SensorForm.EVENT_ID.$invalid && SensorForm.EVENT_ID.$dirty}">\n                    <label class="col-md-3 control-label" for="EVENT_ID">Event:</label>\n                    <div class="col-md-6">\n                        <div class="col-md-8">{{EventName}}</div>\n                        <div class="col-md-3" ng-show="userRole == \'Admin\' && whichButton == \'edit\'">\n                            <button type="button" ng-click="showChangeEventDD()" class="btn btn-primary">Change Event</button>\n                        </div>\n                    </div>\n                </div>\n\n                <!--Event dropdown for admin -->\n                <div ng-show="showEventDD">\n                    <div class="form-group">\n                        <label class="col-md-3 control-label" for="EVENT_ID">Events:</label>\n                        <div class="col-md-6">\n                            <select class="form-control" id="EVENT_ID" name="EVENT_ID" ng-model="adminChanged.EVENT_ID" ng-change="ChangeEvent()"\n                                    ng-options="e.EVENT_ID as (e.EVENT_NAME + \' --- \' + (e.EVENT_START_DATE | date: \'MM/dd/yyyy\') + \' to \' + ((e.EVENT_END_DATE || \'-Not Set-\') | date: \'MM/dd/yyyy\'))  for e in eventList | orderBy: \'-EVENT_START_DATE\'"\n                                <option value=""></option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Sensor Type:* -->\n                <div class="form-group required" ng-class="{\'has-error\':SensorForm.SENSOR_TYPE_ID.$invalid && SensorForm.SENSOR_TYPE_ID.$dirty}">\n                    <label class="col-md-3 control-label req" for="SENSOR_TYPE_ID">Sensor Type:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" id="SENSOR_TYPE_ID" name="SENSOR_TYPE_ID" ng-model="aSensor.SENSOR_TYPE_ID"\n                                ng-options="s.SENSOR_TYPE_ID as s.SENSOR for s in sensorTypeList" ng-change="getDepTypes()" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Sensor Brand:* -->\n                <div class="form-group required" ng-class="{\'has-error\':SensorForm.SENSOR_BRAND_ID.$invalid && SensorForm.SENSOR_BRAND_ID.$dirty}">\n                    <label class="col-md-3 control-label req" for="SENSOR_BRAND_ID">Sensor Brand:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" id="SENSOR_BRAND_ID" name="SENSOR_BRAND_ID" ng-model="aSensor.SENSOR_BRAND_ID"\n                                ng-options="sb.SENSOR_BRAND_ID as sb.BRAND_NAME for sb in sensorBrandList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Serial Number:* -->\n                <div class="form-group required" ng-class="{\'has-error\':SensorForm.SERIAL_NUMBER.$invalid && SensorForm.SERIAL_NUMBER.$dirty}">\n                    <label class="col-md-3 control-label req" for="SERIAL_NUMBER">Serial Number:</label>\n                    <div class="col-md-6">\n                        <input class="form-control" name="SERIAL_NUMBER" ng-model="aSensor.SERIAL_NUMBER" type="text" required />\n                    </div>\n                </div>\n\n                <!-- Housing Serial Number: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="HOUSING_SERIAL_NUMBER">Housing Serial Number:</label>\n                    <div class="col-md-6">\n                        <input class="form-control" name="HOUSING_SERIAL_NUMBER" ng-model="aSensor.HOUSING_SERIAL_NUMBER" type="text" />\n                    </div>\n                </div>\n\n                <!-- Housing Types: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="HOUSING_TYPE_ID">Housing Types:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" id="HOUSING_TYPE_ID" name="HOUSING_TYPE_ID" ng-model="aSensor.HOUSING_TYPE_ID"\n                                ng-options="ht.HOUSING_TYPE_ID as ht.TYPE_NAME for ht in houseTypeList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Vented (only if Sensor Type is Pressure Transducer)-->\n                <div ng-show="aSensor.SENSOR_TYPE_ID == 1">\n                    <div class="form-group">\n                        <label class="col-md-3 control-label">Vented:</label>\n                        <div class="col-md-6">\n                            <label class="radio-inline">\n                                <input type="radio" name="VENTED" ng-model="aSensor.VENTED" value="Yes" />Yes\n                            </label>\n                            <label class="radio-inline">\n                                <input type="radio" name="VENTED" ng-model="aSensor.VENTED" value="No" />No\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Deployment Type: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label req" for="DEPLOYMENT_TYPE_ID">Deployment Type:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" id="DEPLOYMENT_TYPE_ID" name="DEPLOYMENT_TYPE_ID" ng-model="aSensor.DEPLOYMENT_TYPE_ID"\n                                ng-options="dt.DEPLOYMENT_TYPE_ID as dt.METHOD for dt in filteredDeploymentTypes">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Location Description: -->\n                <div class="form-group" ng-class="{\'has-error\':SensorForm.LOCATION_DESCRIPTION.$invalid && SensorForm.LOCATION_DESCRIPTION.$dirty}">\n                    <label class="col-md-3 control-label" for="LOCATION_DESCRIPTION">Location Description:</label>\n                    <div class="col-md-6">\n                        <textarea class="form-control" id="LOCATION_DESCRIPTION" name="LOCATION_DESCRIPTION" type=" text" rows="3" ng-model="aSensor.LOCATION_DESCRIPTION" />\n                    </div>\n                </div>\n\n                <!-- Interval: -->\n                <div class="form-group" style="margin-bottom:0">\n                    <label class="col-md-3 control-label" for="INTERVAL">Interval:</label>\n                    <div class="col-md-6">\n                        <input class="form-control" ng-keypress="isNum($event)" name="INTERVAL" ng-model="aSensor.INTERVAL" type="text" />\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label class="col-md-3 control-label"></label>\n                    <div class="col-md-6">\n                        <label class="radio-inline">\n                            <input type="radio" name="intervalType" ng-model="IntervalType.type" value="Minutes" />Minutes\n                        </label>\n                        <label class="radio-inline">\n                            <input type="radio" name="intervalType" ng-model="IntervalType.type" value="Seconds" />Seconds\n                        </label>\n                    </div>\n                </div>\n\n                <!-- Deploy Time: * -->\n                <div class="form-group required" ng-class="{\'has-error\':SensorForm.TIME_STAMP.$invalid && SensorForm.TIME_STAMP.$dirty}">\n                    <label class="col-md-3 control-label req" style="margin-top:3%" for="TIME_STAMP">Deploy Time:</label>\n                    <div class="col-md-6">\n                        <datetimepicker hour-step="1" minute-step="1" ng-model="aSensStatus.TIME_STAMP" show-meridian="true"\n                                        date-format="MM/dd/yyyy" readonly-date="false" readonly-time="false" date-options="dateOptions"\n                                        hidden-time="false" hidden-date="false" show-spinners="true">\n                        </datetimepicker>\n                    </div>\n                </div>\n\n                <!-- Time Zone:* -->\n                <div class="form-group required">\n                    <label class="col-md-3 control-label" for="TIME_ZONE">Time Zone:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="TIME_ZONE" ng-model="aSensStatus.TIME_ZONE"\n                                ng-options="vcm for vcm in timeZoneList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                    <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Date/Time will be stored in UTC.">\n                        <span class="glyphicon glyphicon-question-sign"></span>\n                    </button>\n\n                </div>\n\n                <!-- Note: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="NOTES">Note:</label>\n                    <div class="col-md-6">\n                        <textarea class="form-control" name="NOTES" type=" text" rows="3" ng-model="aSensStatus.NOTES" elastic />\n                    </div>\n                </div>\n\n                <!-- Collection Member: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label">Deploy Member:</label>\n                    <div class="col-md-6"><input type="hidden" name="MEMBER_ID" ng-model="aSensStatus.MEMBER_ID"/>\n                        <span>{{Deployer.FNAME}} {{Deployer.LNAME}}</span>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class="modal-footer">\n                <div class="form-group">\n                    <div class="col-md-12">\n                        <span>\n                            <button ng-if="whichButton == \'deploy\' || whichButton == \'deployP\'" class="btn btn-primary" ng-click="deploy(SensorForm.$valid)">\n                                <span>Deploy</span>\n                            </button>\n                        </span>\n                        <span>\n                            <button ng-show="whichButton == \'edit\'" class="btn btn-primary" ng-click="save(SensorForm.$valid)">\n                                <span>Save</span>\n                            </button>\n                        </span>\n                        <span>\n                            <button ng-show="whichButton == \'edit\'" class="btn btn-danger" ng-click="deleteS(SensorForm.$valid)">\n                                <span>Delete</span>\n                            </button>\n                        </span>\n                        <span>\n                            <button type="button" class="btn btn-warning" ng-click="cancel()">\n                                <span>Cancel</span>\n                            </button>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form></script><script type="text/ng-template" id="SensorRetrievalModal.html"><div class="modal-header">\n        <h3 class="modal-title">Retrieve Sensor<button class="close" type="button" ng-click="cancel()" aria-hidden="true" style="color:gray;">&times;</button></h3>\n        \n    </div>\n\n    <form class="form-horizontal" name="SensorFormR">\n        <fieldset>\n            <div class="modal-body">\n                <label>Deployed Sensor Information</label>\n\n                <!-- Event: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Event:</div>\n                    <div class="col-md-6">{{EventName}}</div>\n                </div>\n                <!-- Sensor Type: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Sensor Type:</div>\n                    <div class="col-md-6">{{aSensor.Sensor_Type}}</div>\n                </div>\n                <!-- Sensor Brand: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Sensor Brand:</div>\n                    <div class="col-md-6">{{aSensor.Sensor_Brand}}</div>\n                </div>\n                <!-- Serial Number: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Serial Number:</div>\n                    <div class="col-md-6">{{aSensor.SERIAL_NUMBER}}</div>\n                </div>\n                <!-- Housing Serial Number: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Housing Serial Number:</div>\n                    <div class="col-md-6">{{aSensor.HOUSING_SERIAL_NUMBER}}</div>\n                </div>\n                <!-- Housing Types: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Housing Types:</div>\n                    <div class="col-md-6">{{aSensor.Housing_Type}}</div>\n                </div>\n                <!-- Vented (only if Sensor Type is Pressure Transducer)-->\n                <div ng-show="aSensor.SENSOR_TYPE_ID == 1">\n                    <div class="form-group">\n                        <div class="col-md-3 col-md-offset-1">Vented:</div>\n                        <div class="col-md-6">{{aSensor.VENTED}}</div>\n                    </div>\n                </div>\n                <!-- Deployment Type: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Deployment Type:</div>\n                    <div class="col-md-6">{{aSensor.Deployment_Type}}</div>\n                </div>\n                <!-- Location Description: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Location Description:</div>\n                    <div class="col-md-6">\n                        <textarea class="form-control" readonly="readonly" name="LOCATION_DESCRIPTION" type=" text" rows="2" ng-model="aSensor.LOCATION_DESCRIPTION" elastic />\n                    </div>\n                </div>\n                <!-- Interval: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Interval:</div>\n                    <div class="col-md-6">{{aSensor.INTERVAL}} seconds</div>\n                </div>\n                <!-- Deploy Date: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Deploy Date and Time:</div>\n                    <div class="col-md-6">{{depSensStatus.TIME_STAMP | date: \'MM/dd/yyyy hh:mm a\' }} {{depSensStatus.TIME_ZONE}}</div>\n                </div>\n                <!-- Note: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Note:</div>\n                    <div class="col-md-6">\n                        <textarea class="form-control" readonly="readonly" name="NOTES" type=" text" rows="2" ng-model="depSensStatus.NOTES" elastic />\n                    </div>\n                </div>\n                <!-- Deploy Member: -->\n                <div class="form-group">\n                    <div class="col-md-3 col-md-offset-1">Deploy Member:</div>\n                    <div class="col-md-6">{{Deployer.FNAME}} {{Deployer.LNAME}}</div>\n                </div>\n\n                <hr />\n                <label>Retrieval Information</label>\n                <!-- Status Type:* -->\n                <div class="form-group required" ng-class="{\'has-error\':SensorFormR.STATUS_TYPE_ID.$invalid && SensorFormR.STATUS_TYPE_ID.$dirty}">\n                    <label class="col-md-3 control-label req" for="STATUS_TYPE_ID">Status:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="STATUS_TYPE_ID" ng-model="aRetrieval.STATUS_TYPE_ID"\n                                ng-options="s.STATUS_TYPE_ID as s.STATUS for s in statusTypeList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Collection Condition:* -->\n                <div class="form-group required" ng-class="{\'has-error\':SensorFormR.INST_COLLECTION_ID.$invalid && SensorFormR.INST_COLLECTION_ID.$dirty}">\n                    <label class="col-md-3 control-label req" for="INST_COLLECTION_ID">Collection Conditions:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="INST_COLLECTION_ID" ng-model="aSensor.INST_COLLECTION_ID"\n                                ng-options="ins.ID as ins.CONDITION for ins in collectCondList" required>\n                            <option value=""></option>\n                        </select>\n                    </div>\n                </div>\n\n                <!-- Note: -->\n                <div class="form-group">\n                    <label class="col-md-3 control-label" for="NOTES">Note:</label>\n                    <div class="col-md-6">\n                        <textarea class="form-control" name="NOTES" type=" text" rows="3" ng-model="aRetrieval.NOTES" elastic />\n                    </div>\n                </div>\n\n\n                <!-- Retrieve Time: * -->\n                <div class="form-group required" ng-class="{\'has-error\':SensorFormR.TIME_STAMP.$invalid && SensorFormR.TIME_STAMP.$dirty}">\n                    <label class="col-md-3 control-label req" style="margin-top:3%" for="TIME_STAMP">Retrieve Date and Time:</label>\n                    <div class="col-md-6">\n                        <datetimepicker hour-step="1" minute-step="1" ng-model="aRetrieval.TIME_STAMP" show-meridian="true"\n                                        date-format="MM/dd/yyyy" readonly-date="false" readonly-time="false" date-options="dateOptions"\n                                        hidden-time="false" hidden-date="false" show-spinners="true">\n                        </datetimepicker>\n                    </div>\n                </div>\n\n                <!-- Time Zone:* -->\n                <div class="form-group required">\n                    <label class="col-md-3 control-label" for="TIME_ZONE">Time Zone:</label>\n                    <div class="col-md-6">\n                        <select class="form-control" name="TIME_ZONE" ng-model="aRetrieval.TIME_ZONE"\n                                ng-options="vcm for vcm in timeZoneList">\n                            <option value=""></option>\n                        </select>\n                    </div>\n                    <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Date/Time will be stored in UTC.">\n                        <span class="glyphicon glyphicon-question-sign"></span>\n                    </button>\n                </div>\n\n                <!-- Retrieve Member: -->\n                <div class="form-group required">\n                    <label class="col-md-3 control-label">Retrieve Member:</label>\n                    <div class="col-md-6">{{Retriever.FNAME}} {{Retriever.LNAME}}</div>\n                </div>\n            </div>\n\n            <div class="modal-footer">\n                <div class="form-group">\n                    <div class="col-md-12">\n                        <span>\n                            <button ng-if="whichButton == \'Retrieve\'" class="btn btn-primary" ng-click="retrieveS(SensorFormR.$valid)">\n                                <span>Retrieve</span>\n                            </button>\n                        </span>\n                        <span>\n                            <button type="button" class="btn btn-warning" ng-click="cancel()">\n                                <span>Cancel</span>\n                            </button>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form></script><script type="text/ng-template" id="fullSensormodal.html"><div class="modal-header">\n        <h3 class="modal-title">Full Sensor<button class="close" type="button" ng-click="cancel()" aria-hidden="true" style="color:gray;">&times;</button></h3>\n    </div>\n\n    <!--Deployed Sensor Part-->\n    <form editable-form name="editableDEPLOYEDform" onaftersave="saveDeployed()">\n\n    </form>\n    <!-- Event: \n    <div class="form-group">\n        <label class="col-md-3 control-label" for="EVENT_ID">Event:</label>\n        <div class="col-md-6">\n            <div class="col-md-8">{{EventName}}</div>            \n        </div>\n    </div>\n\n    <!-- Sensor Type:* \n    <div class="form-group required" ng-class="{\'has-error\':SensorForm.SENSOR_TYPE_ID.$invalid && SensorForm.SENSOR_TYPE_ID.$dirty}">\n        <label class="col-md-3 control-label req" for="SENSOR_TYPE_ID">Sensor Type:</label>\n        <div class="col-md-6">\n            <select class="form-control" id="SENSOR_TYPE_ID" name="SENSOR_TYPE_ID" ng-model="aSensor.SENSOR_TYPE_ID"\n                    ng-options="s.SENSOR_TYPE_ID as s.SENSOR for s in sensorTypeList" ng-change="getDepTypes()" required>\n                <option value=""></option>\n            </select>\n        </div>\n    </div>\n\n    <!-- Sensor Brand:* \n    <div class="form-group required" ng-class="{\'has-error\':SensorForm.SENSOR_BRAND_ID.$invalid && SensorForm.SENSOR_BRAND_ID.$dirty}">\n        <label class="col-md-3 control-label req" for="SENSOR_BRAND_ID">Sensor Brand:</label>\n        <div class="col-md-6">\n            <select class="form-control" id="SENSOR_BRAND_ID" name="SENSOR_BRAND_ID" ng-model="aSensor.SENSOR_BRAND_ID"\n                    ng-options="sb.SENSOR_BRAND_ID as sb.BRAND_NAME for sb in sensorBrandList" required>\n                <option value=""></option>\n            </select>\n        </div>\n    </div>\n\n    <!-- Serial Number:* \n    <div class="form-group required" ng-class="{\'has-error\':SensorForm.SERIAL_NUMBER.$invalid && SensorForm.SERIAL_NUMBER.$dirty}">\n        <label class="col-md-3 control-label req" for="SERIAL_NUMBER">Serial Number:</label>\n        <div class="col-md-6">\n            <input class="form-control" name="SERIAL_NUMBER" ng-model="aSensor.SERIAL_NUMBER" type="text" required />\n        </div>\n    </div>\n\n    <!-- Housing Serial Number: \n    <div class="form-group">\n        <label class="col-md-3 control-label" for="HOUSING_SERIAL_NUMBER">Housing Serial Number:</label>\n        <div class="col-md-6">\n            <input class="form-control" name="HOUSING_SERIAL_NUMBER" ng-model="aSensor.HOUSING_SERIAL_NUMBER" type="text" />\n        </div>\n    </div>\n\n    <!-- Housing Types: \n    <div class="form-group">\n        <label class="col-md-3 control-label" for="HOUSING_TYPE_ID">Housing Types:</label>\n        <div class="col-md-6">\n            <select class="form-control" id="HOUSING_TYPE_ID" name="HOUSING_TYPE_ID" ng-model="aSensor.HOUSING_TYPE_ID"\n                    ng-options="ht.HOUSING_TYPE_ID as ht.TYPE_NAME for ht in houseTypeList">\n                <option value=""></option>\n            </select>\n        </div>\n    </div>\n\n    <!-- Vented (only if Sensor Type is Pressure Transducer)\n    <div ng-show="aSensor.SENSOR_TYPE_ID == 1">\n        <div class="form-group">\n            <label class="col-md-3 control-label">Vented:</label>\n            <div class="col-md-6">\n                <label class="radio-inline">\n                    <input type="radio" name="VENTED" ng-model="aSensor.VENTED" value="Yes" />Yes\n                </label>\n                <label class="radio-inline">\n                    <input type="radio" name="VENTED" ng-model="aSensor.VENTED" value="No" />No\n                </label>\n            </div>\n        </div>\n    </div>\n\n    <!-- Deployment Type: \n    <div class="form-group">\n        <label class="col-md-3 control-label req" for="DEPLOYMENT_TYPE_ID">Deployment Type:</label>\n        <div class="col-md-6">\n            <select class="form-control" id="DEPLOYMENT_TYPE_ID" name="DEPLOYMENT_TYPE_ID" ng-model="aSensor.DEPLOYMENT_TYPE_ID"\n                    ng-options="dt.DEPLOYMENT_TYPE_ID as dt.METHOD for dt in filteredDeploymentTypes">\n                <option value=""></option>\n            </select>\n        </div>\n    </div>\n\n    <!-- Location Description: \n    <div class="form-group" ng-class="{\'has-error\':SensorForm.LOCATION_DESCRIPTION.$invalid && SensorForm.LOCATION_DESCRIPTION.$dirty}">\n        <label class="col-md-3 control-label" for="LOCATION_DESCRIPTION">Location Description:</label>\n        <div class="col-md-6">\n            <textarea class="form-control" id="LOCATION_DESCRIPTION" name="LOCATION_DESCRIPTION" type=" text" rows="3" ng-model="aSensor.LOCATION_DESCRIPTION" />\n        </div>\n    </div>\n\n    <!-- Interval: \n    <div class="form-group" style="margin-bottom:0">\n        <label class="col-md-3 control-label" for="INTERVAL">Interval:</label>\n        <div class="col-md-6">\n            <input class="form-control" ng-keypress="isNum($event)" name="INTERVAL" ng-model="aSensor.INTERVAL" type="text" />\n        </div>\n    </div>\n    <div class="form-group">\n        <label class="col-md-3 control-label"></label>\n        <div class="col-md-6">\n            <label class="radio-inline">\n                <input type="radio" name="intervalType" ng-model="IntervalType.type" value="Minutes" />Minutes\n            </label>\n            <label class="radio-inline">\n                <input type="radio" name="intervalType" ng-model="IntervalType.type" value="Seconds" />Seconds\n            </label>\n        </div>\n    </div>\n\n    <!-- Deploy Time: * \n    <div class="form-group required" ng-class="{\'has-error\':SensorForm.TIME_STAMP.$invalid && SensorForm.TIME_STAMP.$dirty}">\n        <label class="col-md-3 control-label req" style="margin-top:3%" for="TIME_STAMP">Deploy Time:</label>\n        <div class="col-md-6">\n            <datetimepicker hour-step="1" minute-step="1" ng-model="aSensStatus.TIME_STAMP" show-meridian="true"\n                            date-format="MM/dd/yyyy" readonly-date="false" readonly-time="false" date-options="dateOptions"\n                            hidden-time="false" hidden-date="false" show-spinners="true">\n            </datetimepicker>\n        </div>\n    </div>\n\n    <!-- Time Zone:* \n    <div class="form-group required">\n        <label class="col-md-3 control-label" for="TIME_ZONE">Time Zone:</label>\n        <div class="col-md-6">\n            <select class="form-control" name="TIME_ZONE" ng-model="aSensStatus.TIME_ZONE"\n                    ng-options="vcm for vcm in timeZoneList">\n                <option value=""></option>\n            </select>\n        </div>\n        <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Date/Time will be stored in UTC.">\n            <span class="glyphicon glyphicon-question-sign"></span>\n        </button>\n\n    </div>\n\n    <!-- Note: \n    <div class="form-group">\n        <label class="col-md-3 control-label" for="NOTES">Note:</label>\n        <div class="col-md-6">\n            <textarea class="form-control" name="NOTES" type=" text" rows="3" ng-model="aSensStatus.NOTES" elastic />\n        </div>\n    </div>\n\n    <!-- Collection Member: \n    <div class="form-group">\n        <label class="col-md-3 control-label">Deploy Member:</label>\n        <div class="col-md-6">\n            <input type="hidden" name="MEMBER_ID" ng-model="aSensStatus.MEMBER_ID" />\n            <span>{{Deployer.FNAME}} {{Deployer.LNAME}}</span>\n        </div>\n    </div>\n\n    <!-- End Deployed Sensor Part-->\n\n    <!--Retrieved Sensor Part-->\n\n    <!-- End Retrieved Sensor Part--></script>');

}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/verticalDatum.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Vertical Datum Name</th><th>Vertical Datum Abbreviation</th></tr></thead><tbody><tr ng-repeat="vd in vertDatList | orderBy: \'DATUM_ID\'"><td style="white-space: nowrap"><form editable-form name="VDrowform" onaftersave="saveVertDatum($data, vd.DATUM_ID)" ng-show="VDrowform.$visible" class="form-buttons form-inline" shown="inserted == vd"><button type="submit" ng-disabled="VDrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="VDrowform.$waiting" ng-click="VDrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!VDrowform.$visible"><button class="btn btn-primary" ng-click="VDrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteVertDatum(vd)">del</button></div></td><td><div style="display:none"><span editable-text="vd.DATUM_ID" e-form="VDrowform" e-name="DATUM_ID">{{vd.DATUM_ID}}</span></div><span editable-text="vd.DATUM_NAME" e-name="DATUM_NAME" e-form="VDrowform">{{ vd.DATUM_NAME || \'\' }}</span></td><td><span editable-text="vd.DATUM_ABBREVIATION" e-name="DATUM_ABBREVIATION" e-form="VDrowform">{{ vd.DATUM_ABBREVIATION || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addVDButtonShowing" class="btn btn-primary" ng-click="showAddVDClicked()">Add New Vertical Datum</button><div ng-show="showAddVDForm"><form class="form-horizontal" name="lookupForm.vertDFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="DATUM_NAME">Vertical Datum Name:</label><div class="col-md-6"><input class="form-control" id="DATUM_NAME" name="DATUM_NAME" type="text" placeholder="" ng-model="newVD.DATUM_NAME" required></div></div><div class="form-group required"><label class="col-md-3 control-label req" for="DATUM_ABBREVIATION">Vertical Datum Abbreviation:</label><div class="col-md-6"><input class="form-control" id="DATUM_ABBREVIATION" name="DATUM_ABBREVIATION" type="text" placeholder="" ng-model="newVD.DATUM_ABBREVIATION" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddVertDatum(lookupForm.vertDFm.$valid, newVD)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindVD()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'DATUM_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="DATUM_NAME">Vertical Datum Name&nbsp;<a ng-click="sort_by(\'DATUM_NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="DATUM_ABBREVIATION">Vertical Datum Abbreviation&nbsp;<a ng-click="sort_by(\'DATUM_ABBREVIATION\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="vd in vertDatList | orderBy:sortingOrder:reverse"><td>{{ vd.DATUM_NAME || \'\' }}</td><td>{{ vd.DATUM_ABBREVIATION || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/verticalCollectionMethod.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Vertical Collection Method</th></tr></thead><tbody><tr ng-repeat="VCM in vertColMethList | orderBy: \'VCOLLECT_METHOD\'"><td style="white-space: nowrap"><form editable-form name="VCMrowform" onaftersave="saveVertColMeth($data, VCM.VCOLLECT_METHOD_ID)" ng-show="VCMrowform.$visible" class="form-buttons form-inline" shown="inserted == VCM"><button type="submit" ng-disabled="VCMrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="VCMrowform.$waiting" ng-click="VCMrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!VCMrowform.$visible"><button class="btn btn-primary" ng-click="VCMrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteVertColMeth(VCM)">del</button></div></td><td><div style="display:none"><span editable-text="VCM.VCOLLECT_METHOD_ID" e-form="VCMrowform" e-name="VCOLLECT_METHOD_ID">{{VCM.VCOLLECT_METHOD_ID}}</span></div><span editable-text="VCM.VCOLLECT_METHOD" e-name="VCOLLECT_METHOD" e-form="VCMrowform">{{ VCM.VCOLLECT_METHOD || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addVCMButtonShowing" class="btn btn-primary" ng-click="showAddVCMClicked()">Add New Vertical Collection Method</button><div ng-show="showAddVCMForm"><form class="form-horizontal" name="lookupForm.vertMethodFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Vertical Collection Method:</label><div class="col-md-6"><input class="form-control" id="VCOLLECT_METHOD" name="VCOLLECT_METHOD" type="text" placeholder="" ng-model="newVCM.VCOLLECT_METHOD" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddVertColMeth(lookupForm.vertMethodFm.$valid, newVCM)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindVCM()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'VCOLLECT_METHOD\';</script><table class="table table-striped table-condensed"><thead><tr><th class="VCOLLECT_METHOD">Vertical Collection Method&nbsp;<a ng-click="sort_by(\'VCOLLECT_METHOD\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="VCM in vertColMethList | orderBy:sortingOrder:reverse"><td>{{ VCM.VCOLLECT_METHOD || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/statusType.html",'<div ng-if="accountRole ==\'Admin\' "><table class="table"><thead><tr><th style="width:0"></th><th>Sensor Status Type</th></tr></thead><tbody><tr ng-repeat="StatT in statTypeList | orderBy: \'STATUS_TYPE_ID\'"><td style="white-space: nowrap"><form editable-form name="StatTrowform" onaftersave="saveStatusType($data, StatT.STATUS_TYPE_ID)" ng-show="StatTrowform.$visible" class="form-buttons form-inline" shown="inserted == StatT"><button type="submit" ng-disabled="StatTrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="StatTrowform.$waiting" ng-click="StatTrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!StatTrowform.$visible"><button class="btn btn-primary" ng-click="StatTrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteStatusType(StatT)">del</button></div></td><td><div style="display:none"><span editable-text="StatT.STATUS_TYPE_ID" e-form="StatTrowform" e-name="STATUS_TYPE_ID">{{StatT.STATUS_TYPE_ID}}</span></div><span editable-text="StatT.STATUS" e-name="STATUS" e-form="StatTrowform">{{ StatT.STATUS || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addStatTButtonShowing" class="btn btn-primary" ng-click="showAddStatTClicked()">Add New Sensor Status Type</button><div ng-show="showAddStatTForm"><form class="form-horizontal" name="lookupForm.eventStatFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Sensor Status Type:</label><div class="col-md-6"><input class="form-control" id="STATUS" name="STATUS" type="text" placeholder="" ng-model="newStatT.STATUS" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddStatusType(lookupForm.eventStatFm.$valid, newStatT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindStatT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'STATUS\';</script><table class="table table-striped table-condensed"><thead><tr><th class="STATUS">Sensor Status Type&nbsp;<a ng-click="sort_by(\'STATUS\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="StatT in statTypeList | orderBy:sortingOrder:reverse"><td>{{ StatT.STATUS || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/sensorType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Sensor Type</th><th>Related Deployment Type(s)</th></tr></thead><tbody><tr ng-repeat="SenT in formattedSensTypeList | orderBy: \'SENSOR\'"><td style="white-space: nowrap"><form editable-form name="SENtrowform" onaftersave="saveSensorType($data, SenT.SENSOR_TYPE_ID)" ng-show="SENtrowform.$visible" class="form-buttons form-inline" shown="inserted == SenT"><button type="submit" ng-disabled="SENtrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="SENtrowform.$waiting" ng-click="SENtrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!SENtrowform.$visible"><button class="btn btn-primary" ng-click="SENtrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteSensorType(SenT)">del</button></div></td><td><div style="display:none"><span editable-text="SenT.SENSOR_TYPE_ID" e-form="SENtrowform" e-name="SENSOR_TYPE_ID">{{SenT.SENSOR_TYPE_ID}}</span></div><span editable-text="SenT.SENSOR" e-name="SENSOR" e-form="SENtrowform">{{ SenT.SENSOR || \'\' }}</span></td><td><span editable-checklist="SenT.DepTypes" e-name="DepTypes" e-form="SENtrowform" e-ng-click="checkListCheck(SenT.DepTypes, $data)" e-ng-options="d.DEPLOYMENT_TYPE_ID as d.METHOD for d in depTypeList">{{showDepTypes(SenT)}}</span></td></tr></tbody></table><hr><button ng-show="addSenTButtonShowing" class="btn btn-primary" ng-click="showAddSenTClicked()">Add New Sensor Type</button><div ng-show="showAddSenTForm"><form class="form-horizontal" name="lookupForm.sensTFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Sensor Type:</label><div class="col-md-6"><input class="form-control" id="SENSOR" name="SENSOR" type="text" placeholder="" ng-model="newSenT.SENSOR" required></div></div><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Related Deployment Type(s) (if any):</label><div class="col-md-6"><ul><li style="list-style:none" ng-repeat="dt in depTypeList"><input type="checkbox" name="allDepTypes" ng-model="dt.selected" ng-click="addDepTypeToNewSenT(dt)" ng-value="{{dt.DEPLOYMENT_TYPE_ID}}"> <span>{{ dt.METHOD }}</span></li></ul></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddSensorType(lookupForm.sensTFm.$valid, newSenT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindSenT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'SENSOR\';</script><table class="table table-striped table-condensed"><thead><tr><th class="SENSOR">Sensor Type&nbsp;<a ng-click="sort_by(\'SENSOR\')"><i class="glyphicon glyphicon-sort"></i></a></th><th>Related Deployment Type</th></tr></thead><tbody><tr ng-repeat="SenT in formattedSensTypeList | orderBy:sortingOrder:reverse"><td>{{ SenT.SENSOR || \'\' }}</td><td>{{ SenT.DepMETHODStrings || \'\'}}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/sensorBrand.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Sensor Brand</th></tr></thead><tbody><tr ng-repeat="sb in sensBrandList | orderBy: \'BRAND_NAME\'"><td style="white-space: nowrap"><form editable-form name="ESrowform" onaftersave="saveSensorBrand($data, sb.SENSOR_BRAND_ID)" ng-show="ESrowform.$visible" class="form-buttons form-inline" shown="inserted == sb"><button type="submit" ng-disabled="ESrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="ESrowform.$waiting" ng-click="ESrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!ESrowform.$visible"><button class="btn btn-primary" ng-click="ESrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteSensorBrand(sb)">del</button></div></td><td><div style="display:none"><span editable-text="es.SENSOR_BRAND_ID" e-form="ESrowform" e-name="SENSOR_BRAND_ID">{{sb.SENSOR_BRAND_ID}}</span></div><span editable-text="sb.BRAND_NAME" e-name="BRAND_NAME" e-form="ESrowform">{{ sb.BRAND_NAME || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addSBButtonShowing" class="btn btn-primary" ng-click="showAddSBClicked()">Add New Sensor Brand</button><div ng-show="showAddSBForm"><form class="form-horizontal" name="lookupForm.senBrandFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Sensor Brand:</label><div class="col-md-6"><input class="form-control" id="BRAND_NAME" name="BRAND_NAME" type="text" placeholder="" ng-model="newSB.BRAND_NAME" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddSensorBrand(lookupForm.senBrandFm.$valid, newSB)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindSB()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'BRAND_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="BRAND_NAME">Sensor Brand&nbsp;<a ng-click="sort_by(\'BRAND_NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="sb in sensBrandList | orderBy:sortingOrder:reverse"><td>{{ sb.BRAND_NAME || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/resourcesList.html",'<div class=""><h3>Resources</h3><div id="wrapper"><div id="sidebar-wrapper"><ul class="sidebar-nav"><li ng-class="{active: activeMenu == \'agency\'}"><a ui-sref="resources.ResourcesList.agency" ng-click="activeMenu = \'agency\'">Agencies</a></li><li ng-class="{active: activeMenu == \'contactT\'}"><a ui-sref="resources.ResourcesList.ContactType" ng-click="activeMenu = \'contactT\'">Contact Types</a></li><li ng-class="{active: activeMenu == \'depPrio\'}"><a ui-sref="resources.ResourcesList.DepPriority" ng-click="activeMenu = \'depPrio\'">Deployment Priority</a></li><li ng-class="{active: activeMenu == \'eventstat\'}"><a ui-sref="resources.ResourcesList.EventStatus" ng-click="activeMenu = \'eventstat\'">Event Status</a></li><li ng-class="{active: activeMenu == \'eventtype\'}"><a ui-sref="resources.ResourcesList.EventType" ng-click="activeMenu = \'eventtype\'">Event Types</a></li><li ng-class="{active: activeMenu == \'filetype\'}"><a ui-sref="resources.ResourcesList.FileType" ng-click="activeMenu = \'filetype\'">File Types</a></li><li ng-class="{active: activeMenu == \'horcolme\'}"><a ui-sref="resources.ResourcesList.HorCollMethd" ng-click="activeMenu = \'horcolme\'">Horizontal Collection Methods</a></li><li ng-class="{active: activeMenu == \'hordat\'}"><a ui-sref="resources.ResourcesList.HorDatum" ng-click="activeMenu = \'hordat\'">Horizontal Datums</a></li><li ng-class="{active: activeMenu == \'housety\'}"><a ui-sref="resources.ResourcesList.HousingType" ng-click="activeMenu = \'housety\'">Housing Types</a></li><li ng-class="{active: activeMenu == \'hwmqual\'}"><a ui-sref="resources.ResourcesList.HWMQual" ng-click="activeMenu = \'hwmqual\'">HWM Qualities</a></li><li ng-class="{active: activeMenu == \'hwmty\'}"><a ui-sref="resources.ResourcesList.HWMType" ng-click="activeMenu = \'hwmty\'">HWM Types</a></li><li ng-class="{active: activeMenu == \'inscolcond\'}"><a ui-sref="resources.ResourcesList.InstrCollCondition" ng-click="activeMenu = \'inscolcond\'">Instrument Collection Conditions</a></li><li ng-class="{active: activeMenu == \'mark\'}"><a ui-sref="resources.ResourcesList.Marker" ng-click="activeMenu = \'mark\'">Markers</a></li><li ng-class="{active: activeMenu == \'netname\'}"><a ui-sref="resources.ResourcesList.NetworkNames" ng-click="activeMenu = \'netname\'">Network Names</a></li><li ng-class="{active: activeMenu == \'opqual\'}"><a ui-sref="resources.ResourcesList.OPquality" ng-click="activeMenu = \'opqual\'">Objective Point Qualities</a></li><li ng-class="{active: activeMenu == \'optype\'}"><a ui-sref="resources.ResourcesList.OPType" ng-click="activeMenu = \'optype\'">Objective Point Types</a></li><li ng-class="{active: activeMenu == \'sensbrand\'}"><a ui-sref="resources.ResourcesList.SensorBrand" ng-click="activeMenu = \'sensbrand\'">Sensor Brands</a></li><li ng-class="{active: activeMenu == \'deptype\'}"><a ui-sref="resources.ResourcesList.SenDepType" ng-click="activeMenu = \'deptype\'">Sensor Deployment Types</a></li><li ng-class="{active: activeMenu == \'stattype\'}"><a ui-sref="resources.ResourcesList.StatusType" ng-click="activeMenu = \'stattype\'">Sensor Status Types</a></li><li ng-class="{active: activeMenu == \'senstype\'}"><a ui-sref="resources.ResourcesList.SensorType" ng-click="activeMenu = \'senstype\'">Sensor Types</a></li><li ng-class="{active: activeMenu == \'nettype\'}"><a ui-sref="resources.ResourcesList.NetworkType" ng-click="activeMenu = \'nettype\'">Site Location Types in Network</a></li><li ng-class="{active: activeMenu == \'vertcolmeth\'}"><a ui-sref="resources.ResourcesList.VertCollMethod" ng-click="activeMenu = \'vertcolmeth\'">Vertical Collection Methods</a></li><li ng-class="{active: activeMenu == \'vertdat\'}"><a ui-sref="resources.ResourcesList.VertDatum" ng-click="activeMenu = \'vertdat\'">Vertical Datums</a></li></ul></div><div id="page-content-wrapper"><div class="page-content"><div ui-view></div></div></div></div></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/resourcesHolderView.html","<div ui-view></div>")}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/objectivePointType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Objective Point Type</th></tr></thead><tbody><tr ng-repeat="opt in opTypeList | orderBy: \'OBJECTIVE_POINT_TYPE_ID\'"><td style="white-space: nowrap"><form editable-form name="OPTrowform" onaftersave="saveOPType($data, opt.OBJECTIVE_POINT_TYPE_ID)" ng-show="OPTrowform.$visible" class="form-buttons form-inline" shown="inserted == opt"><button type="submit" ng-disabled="OPTrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="OPTrowform.$waiting" ng-click="OPTrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!OPTrowform.$visible"><button class="btn btn-primary" ng-click="OPTrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteOPType(opt)">del</button></div></td><td><div style="display:none"><span editable-text="opt.OBJECTIVE_POINT_TYPE_ID" e-form="OPTrowform" e-name="OBJECTIVE_POINT_TYPE_ID">{{opt.OBJECTIVE_POINT_TYPE_ID}}</span></div><span editable-text="opt.OP_TYPE" e-name="OP_TYPE" e-form="OPTrowform">{{ opt.OP_TYPE || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addOPTButtonShowing" class="btn btn-primary" ng-click="showAddOPTClicked()">Add New Objective Point Type</button><div ng-show="showAddOPTForm"><form class="form-horizontal" name="lookupForm.opTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="OP_TYPE">Objective Point Type:</label><div class="col-md-6"><input class="form-control" id="OP_TYPE" name="OP_TYPE" type="text" placeholder="" ng-model="newOPT.OP_TYPE" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddOPType(lookupForm.opTypeFm.$valid, newOPT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindOPT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'OP_TYPE\';</script><table class="table table-striped table-condensed"><thead><tr><th class="OP_TYPE">Objective Point Type&nbsp;<a ng-click="sort_by(\'OP_TYPE\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="opt in opTypeList | orderBy:sortingOrder:reverse"><td>{{ opt.OP_TYPE || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/objectivePointQuality.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Objective Point Quality</th></tr></thead><tbody><tr ng-repeat="opq in opQualList | orderBy: \'QUALITY\'"><td style="white-space: nowrap"><form editable-form name="OPQrowform" onaftersave="saveOPQuality($data, opq.OP_QUALITY_ID)" ng-show="OPQrowform.$visible" class="form-buttons form-inline" shown="inserted == opq"><button type="submit" ng-disabled="OPQrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="OPQrowform.$waiting" ng-click="OPQrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!OPQrowform.$visible"><button class="btn btn-primary" ng-click="OPQrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteOPQuality(opq)">del</button></div></td><td><div style="display:none"><span editable-text="opq.OP_QUALITY_ID" e-form="OPQrowform" e-name="OP_QUALITY_ID">{{opq.OP_QUALITY_ID}}</span></div><span editable-text="opq.QUALITY" e-name="QUALITY" e-form="OPQrowform">{{ opq.QUALITY || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addOPQButtonShowing" class="btn btn-primary" ng-click="showAddOPQClicked()">Add New Objective Point Quality</button><div ng-show="showAddOPQForm"><form class="form-horizontal" name="lookupForm.opQualFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="QUALITY">Objective Point Quality:</label><div class="col-md-6"><input class="form-control" id="QUALITY" name="QUALITY" type="text" placeholder="" ng-model="newOPQ.QUALITY" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddOPQuality(lookupForm.opQualFm.$valid, newOPQ)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindOPQ()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'QUALITY\';</script><table class="table table-striped table-condensed"><thead><tr><th class="QUALITY">Objective Point Quality&nbsp;<a ng-click="sort_by(\'QUALITY\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="opq in opQualList | orderBy:sortingOrder:reverse"><td>{{ opq.QUALITY || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";{var e=(angular.module("SettingsControllers",["ngInputModified","ui.validate","angular.filter","xeditable","checklist-model","ngFileUpload"]),angular.module("STNControllers",[]));angular.module("ModalControllers",[])}e.constant("RegExp",{PASSWORD:/^(((?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[A-Z])(?=.*[!@@?#$%^&_:;-]))|((?=.*[a-z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))|((?=.*[A-Z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))).{8,}$/})}(),function(){"use strict";var e=angular.module("STNControllers");e.directive("print",["$compile",function(e){return{restrict:"AEC",link:function(e,t,n){n.nopopup?t.bind("click",function(){window.print()}):t.bind("click",function(){for(var e=document.getElementById(n.print),t=document.getElementsByTagName("link"),o="",a=0;a<t.length;a++)o+=t[a].outerHTML;var r=window.open("","","");r.document.write("<html><head><title></title>"),r.document.write(o),r.document.write("<style>label {font-weight: 600;} *{font-size: medium;}</style></head><body>"),r.document.write("<h2>Short Term Network Modeling</h2>"),r.document.write(e.innerHTML),r.document.write("</body></html>"),r.print(),r.close()})}}}]),e.directive("ngEnter",function(){return function(e,t,n){t.bind("keydown keypress",function(t){13===t.which&&(e.$apply(function(){e.$eval(n.ngEnter)}),t.preventDefault())})}}),e.directive("numericOnly",function(){return{require:"ngModel",link:function(e,t,n,o){o.$parsers.push(function(e){var t=e?e.replace(/[^\d.-]/g,""):null;return t!=e&&(o.$setViewValue(t),o.$render()),t})}}}),e.directive("datepickerPopup",function(){return{restrict:"EAC",require:"ngModel",link:function(e,t,n,o){o.$formatters.shift()}}}),e.directive("focus",function(){return function(e,t,n){t[0].focus()}}),e.directive("backButton",function(){return{restrict:"A",link:function(e,t,n){function o(){history.back(),e.$apply()}t.bind("click",o)}}}),e.directive("passwordValidate",["RegExp",function(e){return{require:"ngModel",link:function(t,n,o,a){n.unbind("keydown").unbind("change"),n.bind("blur",function(n){t.$apply(function(){return e.PASSWORD.test(n.target.value)?(a.$setValidity("passwordValidate",!0),n):void a.$setValidity("passwordValidate",!1)})})}}}]),e.directive("sameAs",function(e){return{require:"ngModel",restrict:"A",link:function(t,n,o,a){n.unbind("keydown").unbind("change"),n.bind("blur",function(n){t.$watch(function(){return e(o.sameAs)(t)===a.$modelValue},function(e){a.$setValidity("passwordMismatch",e)})})}}}),e.directive("elastic",["$timeout",function(e){return{restrict:"A",link:function(t,n){t.initialHeight=t.initialHeight||n[0].style.height;var o=function(){n[0].style.height=t.initialHeight,n[0].style.height=""+n[0].scrollHeight+"px"};n.on("input change",o),e(o,0)}}}]),e.directive("myInputMask",function(){return{restrict:"AC",link:function(e,t,n){t.inputmask(e.$eval(n.myInputMask)),t.on("change",function(){e.$eval(n.ngModel+"='"+t.val()+"'")})}}}),e.directive("fileModel",["$parse",function(e){return{restrict:"A",link:function(t,n,o){var a=e(o.fileModel),r=a.assign;n.bind("change",function(){t.$apply(function(){r(t,n[0].files[0])})})}}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/networkType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Site Location Type in Network</th></tr></thead><tbody><tr ng-repeat="nt in netTypeList | orderBy: \'NETWORK_TYPE_NAME\'"><td style="white-space: nowrap"><form editable-form name="ESrowform" onaftersave="saveNetType($data, nt.NETWORK_TYPE_ID)" ng-show="ESrowform.$visible" class="form-buttons form-inline" shown="inserted == nt"><button type="submit" ng-disabled="ESrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="ESrowform.$waiting" ng-click="ESrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!ESrowform.$visible"><button class="btn btn-primary" ng-click="ESrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteNetType(nt)">del</button></div></td><td><div style="display:none"><span editable-text="nt.NETWORK_TYPE_ID" e-form="ESrowform" e-name="NETWORK_TYPE_ID">{{nt.NETWORK_TYPE_ID}}</span></div><span editable-text="nt.NETWORK_TYPE_NAME" e-name="NETWORK_TYPE_NAME" e-form="ESrowform">{{ nt.NETWORK_TYPE_NAME || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addNTButtonShowing" class="btn btn-primary" ng-click="showAddNTClicked()">Add New Site Location Type in Network</button><div ng-show="showAddNTForm"><form class="form-horizontal" name="lookupForm.netTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Site Location Type in Network:</label><div class="col-md-6"><input class="form-control" id="NETWORK_TYPE_NAME" name="NETWORK_TYPE_NAME" type="text" placeholder="" ng-model="newNT.NETWORK_TYPE_NAME" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddNetType(lookupForm.netTypeFm.$valid, newNT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindNT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'NETWORK_TYPE_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="NETWORK_TYPE_NAME">Site Location Type in Network&nbsp;<a ng-click="sort_by(\'NETWORK_TYPE_NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="nt in netTypeList | orderBy:sortingOrder:reverse"><td>{{ nt.NETWORK_TYPE_NAME || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("siteSearchCtrl",["$scope","$cookies","$rootScope","$location","stateList","sensorTypes","networkNames","SITE",function(e,t,n,o,a,r,s,l){void 0===t.get("STNCreds")||""===t.get("STNCreds")?(e.auth=!1,o.path("/login")):(n.thisPage="Site Search",n.activeMenu="sites",e.$watch(function(){return t.get("SessionEventName")},function(n){e.sessionEvent=null!==t.get("SessionEventName")&&void 0!==t.get("SessionEventName")?t.get("SessionEventName"):"All Events"}),e.states=a,e.senTypes=r,e.netNames=s,e.Chosen={},e.chosenStates=[],e.siteResponse=!1,e.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},e.sort_by=function(t){e.sortingOrder==t&&(e.reverse=!e.reverse),e.sortingOrder=t,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+t+" i").removeClass().addClass(e.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},e.searchSites=function(){$(".page-loading").removeClass("hidden");var n=e.chosenStates.join();e.siteResponse=!1,e.siteList=[];var o=null!==t.get("SessionEventID")&&void 0!==t.get("SessionEventID")?t.get("SessionEventID"):0;l.getAll({Event:o,State:n,SensorType:e.Chosen.sensor,NetworkName:e.Chosen.network,HWMOnly:e.checkboxModel.hwmOnly,SensorOnly:e.checkboxModel.senOnly,RDGOnly:e.checkboxModel.rdgOnly,OPDefined:e.checkboxModel.opDefined},function(t){e.siteList=t,e.siteResponse=!0,$(".page-loading").addClass("hidden")},function(e){$(".page-loading").removeClass("hidden"),alert("Error: "+e.statusText)})},e.stateClick=function(t){if(t.selected===!0&&e.chosenStates.push(t.STATE_ABBREV),t.selected===!1){var n=e.chosenStates.indexOf(t.STATE_ABBREV);n>=0&&e.chosenStates.splice(n,1)}},e.clearFilters=function(){e.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},e.Chosen={},e.chosenStates=[],angular.forEach(e.states,function(e){e.selected=!1})})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/networkNames.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Network Name</th></tr></thead><tbody><tr ng-repeat="nn in netNameList | orderBy: \'NAME\'"><td style="white-space: nowrap"><form editable-form name="NNrowform" onaftersave="saveNetworkName($data, nn.NETWORK_NAME_ID)" ng-show="NNrowform.$visible" class="form-buttons form-inline" shown="inserted == nn"><button type="submit" ng-disabled="NNrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="NNrowform.$waiting" ng-click="NNrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!NNrowform.$visible"><button class="btn btn-primary" ng-click="NNrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteNetworkName(nn)">del</button></div></td><td><div style="display:none"><span editable-text="nn.NETWORK_NAME_ID" e-form="NNrowform" e-name="NETWORK_NAME_ID">{{nn.NETWORK_NAME_ID}}</span></div><span editable-text="nn.NAME" e-name="NAME" e-form="NNrowform">{{ nn.NAME || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addNNButtonShowing" class="btn btn-primary" ng-click="showAddNNClicked()">Add New Network Name</button><div ng-show="showAddNNForm"><form class="form-horizontal" name="lookupForm.netNameFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="NAME">Network Name:</label><div class="col-md-6"><input class="form-control" id="NAME" name="NAME" type="text" placeholder="" ng-model="newNN.NAME" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddNetworkName(lookupForm.netNameFm.$valid, newNN)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindNN()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="NAME">Network Name&nbsp;<a ng-click="sort_by(\'NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="nn in netNameList | orderBy:sortingOrder:reverse"><td>{{ nn.NAME || \'\' }}</td></tr></tbody></table></div>');

}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("siteModalCtrl",["$scope","$cookies","$q","$location","$state","$http","$timeout","$uibModal","$uibModalInstance","$filter","allDropDownParts","thisSiteStuff","SITE","SITE_HOUSING","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","LANDOWNER_CONTACT",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v,g){e.HorizontalDatumList=c[0],e.HorCollMethodList=c[1],e.StateList=c[2],e.AllCountyList=c[3],e.stateCountyList=[],e.allHousingTypeList=c[4],e.DepPriorityList=c[5],e.NetNameList=c[6],e.NetTypeList=c[7],e.ProposedSens=c[8],e.SensorDeployment=c[9],e.houseDirty=!1,e.netNameDirty=!1,e.netTypeDirty=!1,e.siteHouseTypesTable=[],e.aSite={},e.aSite.decDegORdms="dd",e.DMS={},e.originalSiteHousings=[],e.checked="",e.checkedName="Not Defined",e.landowner={},e.addLandowner=!1,e.disableSensorParts=!1,e.showSiteHouseTable=!1,e.siteHouseTypesTable=[],e.siteHousesModel={},e.siteHousesToRemove=[],e.siteNetworkNames=[],e.siteNetworkTypes=[];var T=function(e,t,n){var o=0;return 0>e?(o=-1*e+1*t/60+1*n/3600,(-1*o).toFixed(5)):(o=1*e+1*t/60+1*n/3600,o.toFixed(5))},h=function(e){var t=l.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function(e,t){e.ok=function(){t.close()}},size:"sm"});t.result.then(function(t){"latlong"==e?$("#LATITUDE_DD").focus():$("#LaDeg").focus()})},b=function(e){var t=l.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function(e,t){e.ok=function(){t.close()}},size:"sm"});t.result.then(function(t){"latlong"==e?$("#LONGITUDE_DD").focus():$("#LoDeg").focus()})};e.checkValue=function(t){"dms"==t?((e.DMS.LADeg<0||e.DMS.LADeg>73)&&h("dms"),(e.DMS.LODeg<-175||e.DMS.LODeg>-60)&&b("dms")):((e.aSite.LATITUDE_DD<0||e.aSite.LATITUDE_DD>73)&&h("latlong"),(e.aSite.LONGITUDE_DD<-175||e.aSite.LONGITUDE_DD>-60)&&b("latlong"))};var y=function(e){0>e&&(e=e.toString(),e=e.substring(1));var t=Math.floor(e),n=60*(e-t),o=Math.floor(n),a=(60*(n-o)).toFixed(3);return""+t+":"+o+":"+a};e.latLongChange=function(){if("dd"==e.aSite.decDegORdms){if(void 0!==e.DMS.LADeg){e.aSite.LATITUDE_DD=T(e.DMS.LADeg,e.DMS.LAMin,e.DMS.LASec),e.aSite.LONGITUDE_DD=T(e.DMS.LODeg,e.DMS.LOMin,e.DMS.LOSec)}}else if(void 0!==e.aSite.LATITUDE_DD){var t=y(e.aSite.LATITUDE_DD).toString(),n=t.split(":");e.DMS.LADeg=n[0],e.DMS.LAMin=n[1],e.DMS.LASec=n[2];var o=y(e.aSite.LONGITUDE_DD),a=o.split(":");e.DMS.LODeg=-1*a[0],e.DMS.LOMin=a[1],e.DMS.LOSec=a[2]}},e.netTypeChg=function(){e.netTypeDirty=!0},e.whichOne=function(t){if(e.netNameDirty=!0,"Not Defined"==t.NAME&&t.selected===!0){for(var n=0;n<e.NetNameList.length;n++)"Not Defined"!=e.NetNameList[n].NAME&&(e.NetNameList[n].selected=!1);e.checked="Not Defined"}"Not Defined"==t.NAME&&t.selected===!1&&(e.checked="")},e.dimAction=function(){if(1==e.aSite.SENSOR_NOT_APPROPRIATE){e.disableSensorParts=!0;for(var t=0;t<e.ProposedSens.length;t++)e.ProposedSens[t].selected=!1;e.aSite.IS_PERMANENT_HOUSING_INSTALLED="No"}else e.disableSensorParts=!1},e.save=function(n){n&&($(".page-loading").removeClass("hidden"),r.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),r.defaults.headers.common.Accept="application/json",e.addLandowner===!0?null!==e.aSite.LANDOWNERCONTACT_ID&&void 0!==e.aSite.LANDOWNERCONTACT_ID?g.update({id:e.aSite.LANDOWNERCONTACT_ID},e.landowner).$promise.then(function(){S()}):void 0!==e.landowner.FNAME||void 0!==e.landowner.LNAME||void 0!==e.landowner.TITLE||void 0!==e.landowner.ADDRESS||void 0!==e.landowner.CITY||void 0!==e.landowner.PRIMARYPHONE?g.save(e.landowner,function(t){e.aSite.LANDOWNERCONTACT_ID=t.LANDOWNERCONTACTID,S()},function(e){toastr.error("Error adding Landowner: "+e.statusText)}):S():S())};var S=function(){u.update({id:e.aSite.SITE_ID},e.aSite,function(t){var a=(n.defer(),[]),s=[];angular.forEach(e.siteHousesToRemove,function(e){var t=m["delete"]({id:e}).$promise;a.push(t)}),e.netNameDirty===!0&&angular.forEach(e.NetNameList,function(t){if(t.selected===!1){r.defaults.headers.common["X-HTTP-Method-Override"]="DELETE";var n={NETWORK_NAME_ID:t.NETWORK_NAME_ID,NAME:t.NAME},o=u.deleteSiteNetworkName({id:e.aSite.SITE_ID},n).$promise;a.push(o),delete r.defaults.headers.common["X-HTTP-Method-Override"]}}),e.netTypeDirty===!0&&angular.forEach(e.NetTypeList,function(t){if(t.selected===!1){r.defaults.headers.common["X-HTTP-Method-Override"]="DELETE";var n={NETWORK_TYPE_ID:t.NETWORK_TYPE_ID,NETWORK_TYPE_NAME:t.NETWORK_TYPE_NAME},o=u.deleteSiteNetworkType({id:e.aSite.SITE_ID},n).$promise;a.push(o),delete r.defaults.headers.common["X-HTTP-Method-Override"]}}),e.houseDirty===!0&&angular.forEach(e.siteHouseTypesTable,function(t){var n;n=void 0!==t.SITE_HOUSING_ID?m.update({id:t.SITE_HOUSING_ID},t).$promise:u.postSiteHousing({id:e.aSite.SITE_ID},t).$promise,s.push(n)}),angular.forEach(e.NetNameList,function(t){if(t.selected===!0){e.siteNetworkNames.push(t.NAME);var n={NETWORK_NAME_ID:t.NETWORK_NAME_ID,NAME:t.NAME},o=u.postSiteNetworkName({id:e.aSite.SITE_ID},n).$promise;s.push(o)}}),angular.forEach(e.NetTypeList,function(t){if(t.selected===!0){e.siteNetworkTypes.push(t.NETWORK_TYPE_NAME);var n={NETWORK_TYPE_ID:t.NETWORK_TYPE_ID,NETWORK_TYPE_NAME:t.NETWORK_TYPE_NAME},o=u.postSiteNetworkType({id:e.aSite.SITE_ID},n).$promise;s.push(o)}}),n.all(a).then(function(){n.all(s).then(function(){var t=[e.aSite,e.siteNetworkNames,e.siteNetworkTypes];i.close(t),$(".page-loading").addClass("hidden"),toastr.success("Site updated"),o.path("/Site/"+e.aSite.SITE_ID+"/SiteDashboard").replace(),e.apply})["catch"](function(e){console.error(e)})})["catch"](function(e){console.error(e)})},function(e){toastr.error("Error updating Site: "+e.statusText)})};e.create=function(n){n===!0&&($(".page-loading").removeClass("hidden"),r.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),r.defaults.headers.common.Accept="application/json",delete e.aSite.Creator,e.addLandowner===!0&&(void 0!==e.landowner.FNAME||void 0!==e.landowner.LNAME||void 0!==e.landowner.TITLE||void 0!==e.landowner.ADDRESS||void 0!==e.landowner.CITY||void 0!==e.landowner.PRIMARYPHONE)?g.save(e.landowner,function(t){e.aSite.LANDOWNERCONTACT_ID=t.LANDOWNERCONTACTID,A()},function(e){$(".page-loading").addClass("hidden"),toastr.error("Error posting landowner: "+e.statusText)}):A())};var A=function(){var t=0;u.save(e.aSite,function(a){t=a.SITE_ID;var r=(n.defer(),[]);if(angular.forEach(e.siteHouseTypesTable,function(e){e.SITE_ID=t,delete e.TYPE_NAME;var n=u.postSiteHousing({id:t},e).$promise;r.push(n)}),angular.forEach(e.NetNameList,function(e){if(e.selected===!0){({NETWORK_NAME_ID:e.NETWORK_NAME_ID,NAME:e.NAME})}}),angular.forEach(e.NetTypeList,function(e){if(e.selected===!0){({NETWORK_TYPE_ID:e.NETWORK_TYPE_ID,NETWORK_TYPE_NAME:e.NETWORK_TYPE_NAME})}}),e.disableSensorParts===!1)for(var s=0;s<e.ProposedSens.length;s++)if(e.ProposedSens[s].selected===!0){var l=e.SensorDeployment.filter(function(t){return t.DEPLOYMENT_TYPE_ID==e.ProposedSens[s].DEPLOYMENT_TYPE_ID})[0].SENSOR_TYPE_ID,d={DEPLOYMENT_TYPE_ID:e.ProposedSens[s].DEPLOYMENT_TYPE_ID,SITE_ID:t,SENSOR_TYPE_ID:l},c=f.save(d).$promise.then(function(t){var n={INSTRUMENT_ID:t.INSTRUMENT_ID,STATUS_TYPE_ID:4,COLLECTION_TEAM_ID:e.aSite.MEMBER_ID,TIME_STAMP:new Date,TIME_ZONE:"UTC"};v.save(n).$promise}).$promise;r.push(c)}n.all(r).then(function(n){i.dismiss("cancel"),$(".page-loading").addClass("hidden"),o.path("/Site/"+t+"/SiteDashboard").replace(),e.apply})},function(e){toastr.error("Error creating Site: "+e.statusText)})};if(void 0!==p){if(e.aSite=angular.copy(p[0]),e.aSite.SENSOR_NOT_APPROPRIATE>0){e.disableSensorParts=!0;for(var D=0;D<e.ProposedSens.length;D++)e.ProposedSens[D].selected=!1;e.aSite.IS_PERMANENT_HOUSING_INSTALLED="No"}var _=e.StateList.filter(function(t){return t.STATE_ABBREV==e.aSite.STATE})[0];if(e.stateCountyList=e.AllCountyList.filter(function(e){return e.STATE_ID==_.STATE_ID}),p[1].length>0){e.originalSiteHousings=p[1],e.showSiteHouseTable=!0,e.siteHouseTypesTable=p[2],e.landowner=p[5],e.addLandowner=void 0!==e.landowner.FNAME||void 0!==e.landowner.LNAME||void 0!==e.landowner.ADDRESS||void 0!==e.landowner.PRIMARYPHONE?!0:!1;for(var N=0;N<e.allHousingTypeList.length;N++){for(var M=0;M<e.originalSiteHousings.length;M++)e.originalSiteHousings[M].HOUSING_TYPE_ID==e.allHousingTypeList[N].HOUSING_TYPE_ID?(e.allHousingTypeList[N].selected=!0,M=e.originalSiteHousings.length):e.allHousingTypeList[N].selected=!1;0===e.originalSiteHousings.length&&(e.allHousingTypeList[N].selected=!1)}}if(p[3].length>0){for(var I=0;I<e.NetNameList.length;I++)for(var R=0;R<p[3].length;R++)p[3][R].NETWORK_NAME_ID==e.NetNameList[I].NETWORK_NAME_ID?(e.NetNameList[I].selected=!0,R=p[3].length):e.NetNameList[I].selected=!1,0===p[3].length&&(e.NetNameList[I].selected=!1);e.NetNameList[0].selected===!0&&(e.checked="Not Defined")}if(p[4].length>0)for(var O=0;O<e.NetTypeList.length;O++)for(var w=0;w<p[4].length;w++)p[4][w].NETWORK_TYPE_ID==e.NetTypeList[O].NETWORK_TYPE_ID?(e.NetTypeList[O].selected=!0,w=p[4].length):e.NetTypeList[O].selected=!1,0===p[4].length&&(e.NetTypeList[O].selected=!1)}else r.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),r.defaults.headers.common.Accept="application/json",E.query({id:t.get("mID")},function(t){e.aSite.Creator=t.FNAME+" "+t.LNAME,e.aSite.MEMBER_ID=t.MEMBER_ID,e.aSite.IS_PERMANENT_HOUSING_INSTALLED="No",e.aSite.ACCESS_GRANTED="Not Needed"},function(e){toastr.error("Error getting Member info: "+e.statusText)});e.isNum=function(e){var t=e||window.event,n=t.keyCode||t.which;46!=n&&45!=n&&n>31&&(48>n||n>57)&&(t.returnValue=!1,t.preventDefault&&t.preventDefault())},e.HouseTypeClick=function(t){if(e.houseDirty=!0,t.selected===!0){var n={TYPE_NAME:t.TYPE_NAME,HOUSING_TYPE_ID:t.HOUSING_TYPE_ID,LENGTH:t.LENGTH,MATERIAL:t.MATERIAL,NOTES:t.NOTES,AMOUNT:1};e.siteHouseTypesTable.push(n),e.showSiteHouseTable=!0}if(t.selected===!1){if(void 0!==e.aSite.SITE_ID){var o=e.siteHouseTypesTable.filter(function(e){return e.TYPE_NAME==t.TYPE_NAME})[0].SITE_HOUSING_ID;e.siteHousesToRemove.push(o)}var a=e.siteHouseTypesTable.indexOf(e.siteHouseTypesTable.filter(function(e){return e.TYPE_NAME==t.TYPE_NAME})[0]);e.siteHouseTypesTable.splice(a,1),0===e.siteHouseTypesTable.length&&(e.showSiteHouseTable=!1)}},e.getAddress=function(){var t=new google.maps.Geocoder,n=new google.maps.LatLng(e.aSite.LATITUDE_DD,e.aSite.LONGITUDE_DD);t.geocode({latLng:n},function(t,n){if(n==google.maps.GeocoderStatus.OK){var o=t[0].address_components,a={};$.each(o,function(e,t){$.each(t.types,function(e,n){a[n]=t.long_name})}),e.aSite.ADDRESS=void 0!==a.street_number?a.street_number+" "+a.route:a.route,e.aSite.CITY=a.locality;var r=e.StateList.filter(function(e){return e.STATE_NAME==a.administrative_area_level_1})[0];void 0!==r?(e.aSite.STATE=r.STATE_ABBREV,e.stateCountyList=e.AllCountyList.filter(function(e){return e.STATE_ID==r.STATE_ID}),e.aSite.COUNTY=a.administrative_area_level_2,e.aSite.ZIP=a.postal_code,u.query({Latitude:e.aSite.LATITUDE_DD,Longitude:e.aSite.LONGITUDE_DD,Buffer:5e-4},function(e){var t=e.Sites,n=l.open({template:'<div class="modal-header"><h3 class="modal-title">Sites nearby</h3></div><div class="modal-body"><p>There are: {{num}} sites nearby.</p><p ng-if="num > 0"><span>To use one of these sites instead, click on the site name.</span><ul><li ng-repeat="s in siteListNear" style="list-style:none"><a ui-sref="site.dashboard({id: s.SITE_ID})" ng-click="$close()">{{s.SITE_NO}}</a></li></ul></p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:function(e,n){e.ok=function(){n.close()},e.num=t.length,e.siteListNear=t},size:"sm"});n.result.then(function(){$(".page-loading").addClass("hidden")})},function(e){toastr.error("Error: "+e.statusText)}).$promise):toastr.error("The Latitude/Longitude did not return a location within the U.S.")}else toastr.error("There was an error getting address. Please try again.")})},e.showLandOwnerPart=function(){e.addLandowner=!0},e.updateCountyList=function(t){var n=e.StateList.filter(function(e){return e.STATE_ABBREV==t})[0];e.stateCountyList=allCounties.filter(function(e){return e.STATE_ID==n.STATE_ID})},e.cancel=function(){i.dismiss("cancel")}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/marker.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Marker</th></tr></thead><tbody><tr ng-repeat="m in markList | orderBy: \'MARKER1\'"><td style="white-space: nowrap"><form editable-form name="Mrowform" onaftersave="saveMarker($data, m.MARKER_ID)" ng-show="Mrowform.$visible" class="form-buttons form-inline" shown="inserted == m"><button type="submit" ng-disabled="Mrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="Mrowform.$waiting" ng-click="Mrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!Mrowform.$visible"><button class="btn btn-primary" ng-click="Mrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteMarker(m)">del</button></div></td><td><div style="display:none"><span editable-text="m.MARKER_ID" e-form="Mrowform" e-name="MARKER_ID">{{m.MARKER_ID}}</span></div><span editable-text="m.MARKER1" e-name="MARKER1" e-form="Mrowform">{{ m.MARKER1 || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addMButtonShowing" class="btn btn-primary" ng-click="showAddMClicked()">Add New Marker</button><div ng-show="showAddMForm"><form class="form-horizontal" name="lookupForm.markFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="MARKER1">Marker:</label><div class="col-md-6"><input class="form-control" id="MARKER1" name="MARKER1" type="text" placeholder="" ng-model="newM.MARKER1" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddMarker(lookupForm.markFm.$valid, newM)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindM()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'MARKER1\';</script><table class="table table-striped table-condensed"><thead><tr><th class="MARKER1">Marker&nbsp;<a ng-click="sort_by(\'MARKER1\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="m in markList | orderBy:sortingOrder:reverse"><td>{{ m.MARKER1 || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("siteCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteNetworkNames","thisSiteNetworkTypes","thisSiteHousings","thisSiteOPs","thisSiteSensors","thisSiteHWMs","thisSiteFiles","thisSitePeaks","SITE","LANDOWNER_CONTACT","MEMBER","DEPLOYMENT_TYPE","INSTRUMENT","INSTRUMENT_STATUS","SITE_HOUSING","NETWORK_NAME","allHorDatums","allHorCollMethods","allStates","allCounties","allDeployPriorities","allHousingTypes","allNetworkNames","allNetworkTypes","allDeployTypes","allSensDeps",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v,g,T,h,b,y,S,A,D,_,N,M,I,R,O,w,P,C,L,k){if(void 0===n.get("STNCreds")||""===n.get("STNCreds"))e.auth=!1,o.path("/login");else if(t.thisPage="Site Dashboard",e.aSite={},e.status={mapOpen:!1,siteOpen:!0,opOpen:!1,sensorOpen:!1,hwmOpen:!1,filesOpen:!1,peakOpen:!1},e.thisSiteHouseTypeModel=[],e.openSiteCreate=function(){var t=[N,M,I,R,w,O,P,C,L,k],n=s.open({templateUrl:"SITEmodal.html",controller:"siteModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropDownParts:function(){return t},thisSiteStuff:function(){if(void 0!==e.aSite.SITE_ID){var t=void 0!==e.originalSiteHousings?e.originalSiteHousings:[],n=e.thisSiteHouseTypeModel.length>0?e.thisSiteHouseTypeModel:[],o=void 0!==c?c:[],a=void 0!==p?p:[],r=void 0!==e.landowner?e.landowner:{},s=[e.aSite,t,n,o,a,r];return s}}}});n.result.then(function(t){e.aSite=t[0],e.siteNetworkNames=t[1],e.siteNetworkTypes=t[2]})},void 0!==d)if(void 0!==d.SITE_ID){if(e.aSite=d,e.aSite.decDegORdms="dd",e.aSite.HorizontalDatum=e.aSite.HDATUM_ID>0?N.filter(function(t){return t.DATUM_ID==e.aSite.HDATUM_ID})[0].DATUM_NAME:"---",e.aSite.HorizontalCollectMethod=void 0!==e.aSite.HCOLLECT_METHOD_ID&&e.aSite.HCOLLECT_METHOD_ID>0?M.filter(function(t){return t.HCOLLECT_METHOD_ID==e.aSite.HCOLLECT_METHOD_ID})[0].HCOLLECT_METHOD:"---",e.aSite.PriorityName=void 0!==e.aSite.PRIORITY_ID&&e.aSite.PRIORITY_ID>0?O.filter(function(t){return t.PRIORITY_ID==e.aSite.PRIORITY_ID})[0].PRIORITY_NAME:"---",u.length>0){e.originalSiteHousings=angular.copy(u),e.showSiteHouseTable=!0;for(var x=0;x<e.originalSiteHousings.length;x++){var H=w.filter(function(t){return t.HOUSING_TYPE_ID==e.originalSiteHousings[x].HOUSING_TYPE_ID})[0].TYPE_NAME,F={TYPE_NAME:H,HOUSING_TYPE_ID:e.originalSiteHousings[x].HOUSING_TYPE_ID,SITE_HOUSING_ID:e.originalSiteHousings[x].SITE_HOUSING_ID,LENGTH:e.originalSiteHousings[x].LENGTH,MATERIAL:e.originalSiteHousings[x].MATERIAL,NOTES:e.originalSiteHousings[x].NOTES,AMOUNT:e.originalSiteHousings[x].AMOUNT};e.thisSiteHouseTypeModel.push(F)}}if(e.siteNetworkNames=[],c.length>0)for(var W=0;W<c.length;W++){var U=P.filter(function(e){return e.NETWORK_NAME_ID==c[W].NETWORK_NAME_ID})[0];e.siteNetworkNames.push(U.NAME)}if(e.siteNetworkTypes=[],p.length>0)for(var Y=0;Y<p.length;Y++){var V=C.filter(function(e){return e.NETWORK_TYPE_ID==p[Y].NETWORK_TYPE_ID})[0];e.siteNetworkTypes.push(V.NETWORK_TYPE_NAME)}e.sensorNotAppr=null!==e.aSite.SENSOR_NOT_APPROPRIATE||e.aSite.SENSOR_NOT_APPROPRIATE>0?"Yes":"No",null!==e.aSite.MEMBER_ID&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",b.query({id:e.aSite.MEMBER_ID}).$promise.then(function(t){e.aSite.Creator=t.FNAME+" "+t.LNAME},function(t){e.aSite.Creator="Not recorded"}).$promise),null!==e.aSite.LANDOWNERCONTACT_ID&&void 0!==e.aSite.LANDOWNERCONTACT_ID&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",T.getSiteLandOwner({id:e.aSite.SITE_ID},function(t){e.landowner=t,e.addLandowner=!0},function(e){toastr.error("Error: "+e.statusText)}).$promise)}else toastr.error("This site does not exist"),$(".page-loading").addClass("hidden"),o.path("/Home").replace(),e.apply;else e.openSiteCreate()}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/instrumentCollectionCondition.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Instrument Collection Condition</th></tr></thead><tbody><tr ng-repeat="icc in instColCondList | orderBy: \'CONDITION\'"><td style="white-space: nowrap"><form editable-form name="ICCrowform" onaftersave="saveInstColCond($data, icc.ID)" ng-show="ICCrowform.$visible" class="form-buttons form-inline" shown="inserted == icc"><button type="submit" ng-disabled="ICCrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="ICCrowform.$waiting" ng-click="ICCrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!ICCrowform.$visible"><button class="btn btn-primary" ng-click="ICCrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteInstColCond(icc)">del</button></div></td><td><div style="display:none"><span editable-text="icc.ID" e-form="ICCrowform" e-name="ID">{{icc.ID}}</span></div><span editable-text="icc.CONDITION" e-name="CONDITION" e-form="ICCrowform">{{ icc.CONDITION || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addICCButtonShowing" class="btn btn-primary" ng-click="showAddICCClicked()">Add New Instrument Collection Condition</button><div ng-show="showAddICCForm"><form class="form-horizontal" name="lookupForm.iccFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Instrument Collection Condition:</label><div class="col-md-6"><input class="form-control" id="CONDITION" name="CONDITION" type="text" placeholder="" ng-model="newICC.CONDITION" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddInstColCond(lookupForm.iccFm.$valid, newICC)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindICC()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'CONDITION\';</script><table class="table table-striped table-condensed"><thead><tr><th class="CONDITION">Instrument Collection Condition&nbsp;<a ng-click="sort_by(\'CONDITION\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="icc in instColCondList | orderBy:sortingOrder:reverse"><td>{{ icc.CONDITION || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("SettingsControllers");e.controller("settingsCtrl",["$scope","$rootScope","$cookies","$location","$state",function(e,t,n,o,a){void 0===n.get("STNCreds")||""===n.get("STNCreds")?(e.auth=!1,o.path("/login")):(t.thisPage="Settings",t.activeMenu="settings",e.settings="Welcome to the new STN Settings Page!!",e.changeView=function(e){a.go(e)})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/hwmType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>HWM Type</th></tr></thead><tbody><tr ng-repeat="hwmt in hwmTypeList | orderBy: \'HWM_TYPE\'"><td style="white-space: nowrap"><form editable-form name="HWMTrowform" onaftersave="saveHwmType($data, hwmt.HWM_TYPE_ID)" ng-show="HWMTrowform.$visible" class="form-buttons form-inline" shown="inserted == hwmt"><button type="submit" ng-disabled="HWMTrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="HWMTrowform.$waiting" ng-click="HWMTrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!HWMTrowform.$visible"><button class="btn btn-primary" ng-click="HWMTrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteHwmType(hwmt)">del</button></div></td><td><div style="display:none"><span editable-text="hwmt.HWM_TYPE_ID" e-form="HWMTrowform" e-name="HWM_TYPE_ID">{{hwmt.HWM_TYPE_ID}}</span></div><span editable-text="hwmt.HWM_TYPE" e-name="HWM_TYPE" e-form="HWMTrowform">{{ hwmt.HWM_TYPE || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addHWMTButtonShowing" class="btn btn-primary" ng-click="showAddHWMTClicked()">Add New HWM Type</button><div ng-show="showAddHWMTForm"><form class="form-horizontal" name="lookupForm.hwmTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="HWM_TYPE">HWM Type:</label><div class="col-md-6"><input class="form-control" id="HWM_TYPE" name="HWM_TYPE" type="text" placeholder="" ng-model="newHWMT.HWM_TYPE" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddHwmType(lookupForm.hwmTypeFm.$valid, newHWMT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindHWMT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'HWM_TYPE\';</script><table class="table table-striped table-condensed"><thead><tr><th class="HWM_TYPE">HWM Type&nbsp;<a ng-click="sort_by(\'HWM_TYPE\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="hwmt in hwmTypeList | orderBy:sortingOrder:reverse"><td>{{ hwmt.HWM_TYPE || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("SettingsControllers");e.controller("resourcesCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$filter","$uibModal","AGENCY","CONTACT_TYPE","DEPLOYMENT_PRIORITY","EVENT_STATUS","EVENT_TYPE","FILE_TYPE","HORIZONTAL_COLL_METHODS","HORIZONTAL_DATUM","HOUSING_TYPE","HWM_QUALITY","HWM_TYPE","INST_COLL_CONDITION","MARKER","NETWORK_NAME","OP_QUALITY","OP_TYPE","SENSOR_BRAND","DEPLOYMENT_TYPE","SENSOR_TYPE","NETWORK_TYPE","STATUS_TYPE","VERTICAL_COLL_METHOD","VERTICAL_DATUM","allStates","allAgencies","allContactTypes","allDeployPriorities","allEventStats","allEventTypes","allFileTypes","allHorCollMethods","allHorDatums","allHouseTypes","allHWMqualities","allHWMtypes","allInstCollectConditions","allMarkers","allNetworkNames","allObjPtQualities","allObjPtTypes","allSensorBrands","allDeploymentTypes","allStatusTypes","allSensorTypes","allNetworkTypes","allVerticalCollMethods","allVerticalDatums",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v,g,T,h,b,y,S,A,D,_,N,M,I,R,O,w,P,C,L,k,x,H,F,W,U,Y,V,B,G,q,Q,j,z,K,Z,J,X,ee,te){void 0===n.get("STNCreds")||""===n.get("STNCreds")?(e.auth=!1,o.path("/login")):(t.thisPage="Settings/Resources",e.accountRole=n.get("usersRole"),e.sort_by=function(t){e.sortingOrder==t&&(e.reverse=!e.reverse),e.sortingOrder=t,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+t+" i").removeClass().addClass(e.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},e.lookupForm={},e.showAddAgForm=!1,e.addAgButtonShowing=!0,e.activeMenu="",e.stateList=w,e.agencyList=P,e.showAddAgForm=!1,e.addAgButtonShowing=!0,e.newAg={},e.showAddAgClicked=function(){e.showAddAgForm=!0,e.addAgButtonShowing=!1},e.NeverMindAg=function(){e.newAg={},e.showAddAgForm=!1,e.addAgButtonShowing=!0},e.AddAgency=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",i.save(e.newAg,function(t){e.agencyList.push(t),e.newAg={},e.showAddAgForm=!1,e.addAgButtonShowing=!0,toastr.success("Agency Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveAgency=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",i.update({id:t},e,function(e){o=e,toastr.success("Agency Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteAgency=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Agency"}}});o.result.then(function(o){var a=e.agencyList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),i["delete"]({id:t.AGENCY_ID},t,function(t){e.agencyList.splice(a,1),toastr.success("Agency Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.showStateAbbrev=function(t){var n=[];return t.STATE&&(n=s("filter")(e.stateList,{STATE_ABBREV:t.STATE})),n.length?n[0].STATE_ABBREV:""},e.contactTypeList=C,e.showAddCTForm=!1,e.addCTButtonShowing=!0,e.newCT={},e.showAddCTClicked=function(){e.showAddCTForm=!0,e.addCTButtonShowing=!1},e.NeverMindCT=function(){e.newCT={},e.showAddCTForm=!1,e.addCTButtonShowing=!0},e.AddContactType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",d.save(e.newCT,function(t){e.contactTypeList.push(t),e.newCT={},e.showAddCTForm=!1,e.addCTButtonShowing=!0,toastr.success("Contact Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveContactType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",d.update({id:t},e,function(e){o=e,toastr.success("Contact Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteContactType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Contact Type"}}});o.result.then(function(o){var a=e.contactTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),d["delete"]({id:t.CONTACT_TYPE_ID},t,function(t){e.contactTypeList.splice(a,1),toastr.success("Contact Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.deployPriorityList=L,e.showAddDPForm=!1,e.addDPButtonShowing=!0,e.newDP={},e.showAddDPClicked=function(){e.showAddDPForm=!0,e.addDPButtonShowing=!1},e.NeverMindDP=function(){e.newDP={},e.showAddDPForm=!1,e.addDPButtonShowing=!0},e.AddDepPriority=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",c.save(e.newDP,function(t){e.deployPriorityList.push(t),e.newDP={},e.showAddDPForm=!1,e.addDPButtonShowing=!0,toastr.success("Deployment Priority Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveDepPriority=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",c.update({id:t},e,function(e){o=e,toastr.success("Deployment Priority Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteDepPriority=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Deployment Priority"}}});o.result.then(function(o){var a=e.deployPriorityList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),c["delete"]({id:t.PRIORITY_ID},t,function(t){e.deployPriorityList.splice(a,1),toastr.success("Deployment Priority Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.eventStatList=k,e.showAddESForm=!1,e.addESButtonShowing=!0,e.newES={},e.showAddESClicked=function(){e.showAddESForm=!0,e.addESButtonShowing=!1},e.NeverMindES=function(){e.newES={},e.showAddESForm=!1,e.addESButtonShowing=!0},e.AddEventStat=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",p.save(e.newES,function(t){e.eventStatList.push(t),e.newES={},e.showAddESForm=!1,e.addESButtonShowing=!0,toastr.success("Event Status Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveEventStat=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",p.update({id:t},e,function(e){o=e,toastr.success("Event Status Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteEventStat=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Event Status"}}});o.result.then(function(o){var a=e.eventStatList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),p["delete"]({id:t.EVENT_STATUS_ID},t,function(t){e.eventStatList.splice(a,1),toastr.success("Event Status Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.eventTypeList=x,e.showAddETForm=!1,e.addETButtonShowing=!0,e.newET={},e.showAddETClicked=function(){e.showAddETForm=!0,e.addETButtonShowing=!1},e.NeverMindET=function(){e.newET={},e.showAddETForm=!1,e.addETButtonShowing=!0},e.AddEventType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),
r.defaults.headers.common.Accept="application/json",u.save(e.newET,function(t){e.eventTypeList.push(t),e.newET={},e.showAddETForm=!1,e.addETButtonShowing=!0,toastr.success("Event Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveEventType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",u.update({id:t},e,function(e){o=e,toastr.success("Event Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteEventType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Event Type"}}});o.result.then(function(o){var a=e.eventTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),u["delete"]({id:t.EVENT_TYPE_ID},t,function(t){e.eventTypeList.splice(a,1),toastr.success("Event Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.fileTypeList=H,e.showAddFTForm=!1,e.addFTButtonShowing=!0,e.newFT={},e.showAddFTClicked=function(){e.showAddFTForm=!0,e.addFTButtonShowing=!1},e.NeverMindFT=function(){e.newFT={},e.showAddFTForm=!1,e.addFTButtonShowing=!0},e.AddFileType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",m.save(e.newFT,function(t){e.fileTypeList.push(t),e.newFT={},e.showAddFTForm=!1,e.addFTButtonShowing=!0,toastr.success("File Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveFileType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",m.update({id:t},e,function(e){o=e,toastr.success("File Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteFileType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"File Type"}}});o.result.then(function(o){var a=e.fileTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),m["delete"]({id:t.FILETYPE_ID},t,function(t){e.fileTypeList.splice(a,1),toastr.success("File Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.horColMethList=F,e.showAddHCMForm=!1,e.addHCMButtonShowing=!0,e.newHCM={},e.showAddHCMClicked=function(){e.showAddHCMForm=!0,e.addHCMButtonShowing=!1},e.NeverMindHCM=function(){e.newHCM={},e.showAddHCMForm=!1,e.addHCMButtonShowing=!0},e.AddHorCollMethod=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",E.save(e.newHCM,function(t){e.horColMethList.push(t),e.newHCM={},e.showAddHCMForm=!1,e.addHCMButtonShowing=!0,toastr.success("Horizontal Collection Method Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveHorCollMethod=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",E.update({id:t},e,function(e){o=e,toastr.success("Horizontal Collection Method Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteHorCollMethod=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Horizontal Collection Method"}}});o.result.then(function(o){var a=e.horColMethList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),E["delete"]({id:t.HCOLLECT_METHOD_ID},t,function(t){e.horColMethList.splice(a,1),toastr.success("Horizontal Collection Method Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.horDatList=W,e.showAddHDForm=!1,e.addHDButtonShowing=!0,e.newHD={},e.showAddHDClicked=function(){e.showAddHDForm=!0,e.addHDButtonShowing=!1},e.NeverMindHD=function(){e.newHD={},e.showAddHDForm=!1,e.addHDButtonShowing=!0},e.AddHorDatum=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",f.save(e.newHD,function(t){e.horDatList.push(t),e.newHD={},e.showAddHDForm=!1,e.addHDButtonShowing=!0,toastr.success("Horizontal Datum Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveHorDatum=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",f.update({id:t},e,function(e){o=e,toastr.success("Horizontal Datum Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteHorDatum=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Horizontal Datum"}}});o.result.then(function(o){var a=e.horDatList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),f["delete"]({id:t.DATUM_ID},t,function(t){e.horDatList.splice(a,1),toastr.success("Horizontal Datum Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.houseTypeList=U,e.showAddHTForm=!1,e.addHTButtonShowing=!0,e.newHT={},e.showAddHTClicked=function(){e.showAddHTForm=!0,e.addHTButtonShowing=!1},e.NeverMindHT=function(){e.newHT={},e.showAddHTForm=!1,e.addHTButtonShowing=!0},e.AddHouseType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",v.save(e.newHT,function(t){e.houseTypeList.push(t),e.newHT={},e.showAddHTForm=!1,e.addHTButtonShowing=!0,toastr.success("Housing Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveHouseType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",v.update({id:t},e,function(e){o=e,toastr.success("Housing Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteHouseType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Housing Type"}}});o.result.then(function(o){var a=e.houseTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),v["delete"]({id:t.HOUSING_TYPE_ID},t,function(t){e.houseTypeList.splice(a,1),toastr.success("Housing Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.hwmQualList=Y,e.showAddHWMQForm=!1,e.addHWMQButtonShowing=!0,e.newHWMQ={},e.showAddHWMQClicked=function(){e.showAddHWMQForm=!0,e.addHWMQButtonShowing=!1},e.NeverMindHWMQ=function(){e.newHWMQ={},e.showAddHWMQForm=!1,e.addHWMQButtonShowing=!0},e.AddHwmQuality=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",g.save(e.newHWMQ,function(t){e.hwmQualList.push(t),e.newHWMQ={},e.showAddHWMQForm=!1,e.addHWMQButtonShowing=!0,toastr.success("HWM Quality Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveHwmQuality=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",g.update({id:t},e,function(e){o=e,toastr.success("HWM Quality Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteHwmQuality=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"HWM Quality"}}});o.result.then(function(o){var a=e.hwmQualList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),g["delete"]({id:t.HWM_QUALITY_ID},t,function(t){e.hwmQualList.splice(a,1),toastr.success("HWM Quality Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.hwmTypeList=V,e.showAddHWMTForm=!1,e.addHWMTButtonShowing=!0,e.newHWMT={},e.showAddHWMTClicked=function(){e.showAddHWMTForm=!0,e.addHWMTButtonShowing=!1},e.NeverMindHWMT=function(){e.newHWMT={},e.showAddHWMTForm=!1,e.addHWMTButtonShowing=!0},e.AddHwmType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",T.save(e.newHWMT,function(t){e.hwmTypeList.push(t),e.newHWMT={},e.showAddHWMTForm=!1,e.addHWMTButtonShowing=!0,toastr.success("HWM Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveHwmType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",T.update({id:t},e,function(e){o=e,toastr.success("HWM Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteHwmType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"HWM Type"}}});o.result.then(function(o){var a=e.hwmTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),T["delete"]({id:t.HWM_TYPE_ID},t,function(t){e.hwmTypeList.splice(a,1),toastr.success("HWM Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.instColCondList=B,e.showAddICCForm=!1,e.addICCButtonShowing=!0,e.newICC={},e.showAddICCClicked=function(){e.showAddICCForm=!0,e.addICCButtonShowing=!1},e.NeverMindICC=function(){e.newICC={},e.showAddICCForm=!1,e.addICCButtonShowing=!0},e.AddInstColCond=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",h.save(e.newICC,function(t){e.instColCondList.push(t),e.newICC={},e.showAddICCForm=!1,e.addICCButtonShowing=!0,toastr.success("Instrument Collection Condition Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveInstColCond=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",h.update({id:t},e,function(e){o=e,toastr.success("Instrument Collection Condition Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteInstColCond=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Instrument Collection Condition"}}});o.result.then(function(o){var a=e.instColCondList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),h["delete"]({id:t.ID},t,function(t){e.instColCondList.splice(a,1),toastr.success("Instrument Collection Condition Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.markList=G,e.showAddMForm=!1,e.addMButtonShowing=!0,e.newM={},e.showAddMClicked=function(){e.showAddMForm=!0,e.addMButtonShowing=!1},e.NeverMindM=function(){e.newM={},e.showAddMForm=!1,e.addMButtonShowing=!0},e.AddMarker=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",b.save(e.newM,function(t){e.markList.push(t),e.newM={},e.showAddMForm=!1,e.addMButtonShowing=!0,toastr.success("Marker Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveMarker=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",b.update({id:t},e,function(e){o=e,toastr.success("Marker Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteMarker=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Marker"}}});o.result.then(function(o){var a=e.markList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),b["delete"]({id:t.MARKER_ID},t,function(t){e.markList.splice(a,1),toastr.success("Marker Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.netNameList=q,e.showAddNNForm=!1,e.addNNButtonShowing=!0,e.newNN={},e.showAddNNClicked=function(){e.showAddNNForm=!0,e.addNNButtonShowing=!1},e.NeverMindNN=function(){e.newNN={},e.showAddNNForm=!1,e.addNNButtonShowing=!0},e.AddNetworkName=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",y.save(e.newNN,function(t){e.netNameList.push(t),e.newNN={},e.showAddNNForm=!1,e.addNNButtonShowing=!0,toastr.success("Network Name Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveNetworkName=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",y.update({id:t},e,function(e){o=e,toastr.success("Network Name Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteNetworkName=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Network Name"}}});o.result.then(function(o){var a=e.netNameList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),y["delete"]({id:t.NETWORK_NAME_ID},t,function(t){e.netNameList.splice(a,1),toastr.success("Network Name Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.opQualList=Q,e.showAddOPQForm=!1,e.addOPQButtonShowing=!0,e.newOPQ={},e.showAddOPQClicked=function(){e.showAddOPQForm=!0,e.addOPQButtonShowing=!1},e.NeverMindOPQ=function(){e.newOPQ={},e.showAddOPQForm=!1,e.addOPQButtonShowing=!0},e.AddOPQuality=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",S.save(e.newOPQ,function(t){e.opQualList.push(t),e.newOPQ={},e.showAddOPQForm=!1,e.addOPQButtonShowing=!0,toastr.success("Objective Point Quality Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveOPQuality=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",S.update({id:t},e,function(e){o=e,toastr.success("Objective Point Quality Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteOPQuality=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Objective Point Quality"}}});o.result.then(function(o){var a=e.opQualList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),S["delete"]({id:t.OP_QUALITY_ID},t,function(t){e.opQualList.splice(a,1),toastr.success("Objective Point Quality Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.opTypeList=j,e.showAddOPTForm=!1,e.addOPTButtonShowing=!0,e.newOPT={},e.showAddOPTClicked=function(){e.showAddOPTForm=!0,e.addOPTButtonShowing=!1},e.NeverMindOPT=function(){e.newOPT={},e.showAddOPTForm=!1,e.addOPTButtonShowing=!0},e.AddOPType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",A.save(e.newOPT,function(t){e.opTypeList.push(t),e.newOPT={},e.showAddOPTForm=!1,e.addOPTButtonShowing=!0,toastr.success("Objective Point Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveOPType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",A.update({id:t},e,function(e){o=e,toastr.success("Objective Point Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteOPType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Objective Point Type"}}});o.result.then(function(o){var a=e.opTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),A["delete"]({id:t.OBJECTIVE_POINT_TYPE_ID},t,function(t){e.opTypeList.splice(a,1),toastr.success("Objective Point Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.sensBrandList=z,e.showAddSBForm=!1,e.addSBButtonShowing=!0,e.newSB={},e.showAddSBClicked=function(){e.showAddSBForm=!0,e.addSBButtonShowing=!1},e.NeverMindSB=function(){e.newSB={},e.showAddSBForm=!1,e.addSBButtonShowing=!0},e.AddSensorBrand=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",D.save(e.newSB,function(t){e.sensBrandList.push(t),e.newSB={},e.showAddSBForm=!1,e.addSBButtonShowing=!0,toastr.success("Sensor Brand Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveSensorBrand=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",D.update({id:t},e,function(e){o=e,toastr.success("Sensor Brand Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteSensorBrand=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Sensor Brand"}}});o.result.then(function(o){var a=e.sensBrandList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),D["delete"]({id:t.SENSOR_BRAND_ID},t,function(t){e.sensBrandList.splice(a,1),toastr.success("Sensor Brand Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.depTypeList=K,e.showAddDTForm=!1,e.addDTButtonShowing=!0,e.newDT={},e.showAddDTClicked=function(){e.showAddDTForm=!0,e.addDTButtonShowing=!1},e.NeverMindDT=function(){e.newDT={},e.showAddDTForm=!1,e.addDTButtonShowing=!0},e.AddDepType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",_.save(e.newDT,function(t){e.depTypeList.push(t),e.newDT={},e.showAddDTForm=!1,e.addDTButtonShowing=!0,toastr.success("Deployment Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveDepType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",_.update({id:t},e,function(e){o=e,toastr.success("Deployment Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteDepType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Deployment Type"}}});o.result.then(function(o){var a=e.depTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),_["delete"]({id:t.DEPLOYMENT_TYPE_ID},t,function(t){e.depTypeList.splice(a,1),toastr.success("Deployment Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.statTypeList=Z,e.showAddStatTForm=!1,e.addStatTButtonShowing=!0,e.newStatT={},e.showAddStatTClicked=function(){e.showAddStatTForm=!0,e.addStatTButtonShowing=!1},e.NeverMindStatT=function(){e.newStatT={},e.showAddStatTForm=!1,e.addStatTButtonShowing=!0},e.AddStatusType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",I.save(e.newStatT,function(t){e.statTypeList.push(t),e.newStatTT={},e.showAddStatTForm=!1,e.addStatTButtonShowing=!0,toastr.success("Status Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveStatusType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",I.update({id:t},e,function(e){o=e,toastr.success("Status Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteStatusType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Status Type"}}});o.result.then(function(o){var a=e.statTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),I["delete"]({id:t.STATUS_TYPE_ID},t,function(t){e.statTypeList.splice(a,1),toastr.success("Status Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.sensTypeList=J,e.newDepTypeRelating=[],e.commaSepDepMETHODS=[],e.formattedSensTypeList=[],e.sensTypeList.forEach(function(t){N.getSensorDeploymentTypes({id:t.SENSOR_TYPE_ID},function(n){var o=n;t.DepTypes=[];var a=[];t.DepMETHODStrings="",o.length>0&&o.forEach(function(e){t.DepTypes.push(e.DEPLOYMENT_TYPE_ID),a.push(e.METHOD),t.DepMETHODStrings=a.join(", ")}),e.formattedSensTypeList.push(t)}).$promise}),e.showDepTypes=function(t){var n=[];return angular.forEach(e.depTypeList,function(e){t.DepTypes.indexOf(e.DEPLOYMENT_TYPE_ID)>=0&&n.push(e.METHOD)}),n.length?n.join(", "):""},e.removeTheseDepTypes=[],e.checkListCheck=function(t,n){n.length<t.length&&angular.forEach(t,function(t){if(n.indexOf(t)<0){var o=e.depTypeList.filter(function(e){return e.DEPLOYMENT_TYPE_ID==t})[0];if(e.removeTheseDepTypes.length>0)for(var a=0;a<e.removeTheseDepTypes.length;a++)e.removeTheseDepTypes[a].DEPLOYMENT_TYPE_ID==o.DEPLOYMENT_TYPE_ID?a=e.newDepTypeRelating.length:e.removeTheseDepTypes.push(o);else e.removeTheseDepTypes.push(o)}})},e.showAddSenTForm=!1,e.addSenTButtonShowing=!0,e.newSenT={},e.showAddSenTClicked=function(){e.showAddSenTForm=!0,e.addSenTButtonShowing=!1},e.NeverMindSenT=function(){e.newSenT={},e.newDepTypeRelating=[],angular.forEach(e.depTypeList,function(e){e.selected=!1}),e.showAddSenTForm=!1,e.addSenTButtonShowing=!0},e.addDepTypeToNewSenT=function(t){if(t.selected===!0){if(e.newDepTypeRelating.length>0)for(var n=0;n<e.newDepTypeRelating.length;n++)e.newDepTypeRelating[n].DEPLOYMENT_TYPE_ID==t.DEPLOYMENT_TYPE_ID?n=e.newDepTypeRelating.length:(e.newDepTypeRelating.push(t),n=e.newDepTypeRelating.length);0===e.newDepTypeRelating.length&&e.newDepTypeRelating.push(t)}},e.AddSensorType=function(t){if(t){var o={},a=[];r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",N.save(e.newSenT,function(t){o=t,e.newSenT={},e.showAddSenTForm=!1,e.addSenTButtonShowing=!0,e.newDepTypeRelating.length>0&&angular.forEach(e.newDepTypeRelating,function(e){delete e.selected,a.push(e.DEPLOYMENT_TYPE_ID),N.addSensorDeploymentType({id:o.SENSOR_TYPE_ID},e,function(e){},function(e){e.statusText})}),o.DepTypes=a,e.formattedSensTypeList.push(o),toastr.success("Sensor Type Added")},function(e){toastr.error("Error: "+e.statusText)})}},e.saveSensorType=function(t,o){var a=!1;r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json";var s=({SENSOR_TYPE_ID:t.SENSOR_TYPE_ID,SENSOR:t.SENSOR},[]);return angular.forEach(e.depTypeList,function(e){if(t.DepTypes.indexOf(e.DEPLOYMENT_TYPE_ID)>=0){var n={DEPLOYMENT_TYPE_ID:e.DEPLOYMENT_TYPE_ID,METHOD:e.METHOD};s.push(n)}}),N.update({id:o},t,function(e){a=e,angular.forEach(s,function(e){N.addSensorDeploymentType({id:o},e,function(e){toastr.success("Deployment Type is now related")},function(e){e.statusText})}),toastr.success("Sensor Type Updated")},function(e){a=!1,toastr.error("Error: "+e.statusText)}).$promise.then(angular.forEach(e.removeTheseDepTypes,function(e){N.removeSensorDeploymentType({id:o},e,function(e){toastr.success("Deployment Type is no longer related")},function(e){e.statusText})})),a},e.deleteSensorType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Sensor Type"}}});o.result.then(function(o){var a=e.formattedSensTypeList.indexOf(t),s={SENSOR_TYPE_ID:t.SENSOR_TYPE_ID,SENSOR:t.SENSOR};r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),angular.forEach(e.depTypeList,function(e){if(t.DepTypes.indexOf(e.DEPLOYMENT_TYPE_ID)>=0){var n={DEPLOYMENT_TYPE_ID:e.DEPLOYMENT_TYPE_ID,METHOD:e.METHOD};N.removeSensorDeploymentType({id:s.SENSOR_TYPE_ID},n,function(e){})}}),N["delete"]({id:s.SENSOR_TYPE_ID},s,function(t){e.formattedSensTypeList.splice(a,1),toastr.success("Sensor Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.netTypeList=X,e.showAddNTForm=!1,e.addNTButtonShowing=!0,e.newNT={},e.showAddNTClicked=function(){e.showAddNTForm=!0,e.addNTButtonShowing=!1},e.NeverMindNT=function(){e.newNT={},e.showAddNTForm=!1,e.addNTButtonShowing=!0},e.AddNetType=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",M.save(e.newNT,function(t){e.netTypeList.push(t),e.newNT={},e.showAddNTForm=!1,e.addNTButtonShowing=!0,toastr.success("Network Type Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveNetType=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",M.update({id:t},e,function(e){o=e,toastr.success("Network Type Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteNetType=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Network Type"}}});o.result.then(function(o){var a=e.netTypeList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),M["delete"]({id:t.NETWORK_TYPE_ID},t,function(t){e.netTypeList.splice(a,1),toastr.success("Network Type Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.vertColMethList=ee,e.showAddVCMForm=!1,e.addVCMButtonShowing=!0,e.newVCM={},e.showAddVCMClicked=function(){e.showAddVCMForm=!0,e.addVCMButtonShowing=!1},e.NeverMindVCM=function(){e.newVCM={},e.showAddVCMForm=!1,e.addVCMButtonShowing=!0},e.AddVertColMeth=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",R.save(e.newVCM,function(t){e.vertColMethList.push(t),e.newVCM={},e.showAddVCMForm=!1,e.addVCMButtonShowing=!0,toastr.success("Vertical Collection Method Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveVertColMeth=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",R.update({id:t},e,function(e){o=e,toastr.success("Vertical Collection Method Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteVertColMeth=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Vertical Collection Method"}}});o.result.then(function(o){var a=e.vertColMethList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),R["delete"]({id:t.VCOLLECT_METHOD_ID},t,function(t){e.vertColMethList.splice(a,1),toastr.success("Vertical Collection Method Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})},e.vertDatList=te,e.showAddVDForm=!1,e.addVDButtonShowing=!0,e.newVD={},e.showAddVDClicked=function(){e.showAddVDForm=!0,e.addVDButtonShowing=!1},e.NeverMindVD=function(){e.newVD={},e.showAddVDForm=!1,e.addVDButtonShowing=!0},e.AddVertDatum=function(t){t&&(r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",O.save(e.newVD,function(t){e.vertDatList.push(t),e.newVD={},e.showAddVDForm=!1,e.addVDButtonShowing=!0,toastr.success("Vertical Datum Added")},function(e){toastr.error("Error: "+e.statusText)}))},e.saveVertDatum=function(e,t){var o=!1;return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",O.update({id:t},e,function(e){o=e,toastr.success("Vertical Datum Updated")},function(e){o=!1,toastr.error("Error: "+e.statusText)}),o},e.deleteVertDatum=function(t){var o=l.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return t},what:function(){return"Vertical Datum"}}});o.result.then(function(o){var a=e.vertDatList.indexOf(t);r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),O["delete"]({id:t.DATUM_ID},t,function(t){e.vertDatList.splice(a,1),toastr.success("Vertical Datum Removed")},function(e){toastr.error("Error: "+e.statusText)})},function(){})})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/hwmQuality.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>HWM Quality</th></tr></thead><tbody><tr ng-repeat="hwmq in hwmQualList | orderBy: \'HWM_QUALITY_ID\'"><td style="white-space: nowrap"><form editable-form name="HWMQrowform" onaftersave="saveHwmQuality($data, hwmq.HWM_QUALITY_ID)" ng-show="HWMQrowform.$visible" class="form-buttons form-inline" shown="inserted == hwmq"><button type="submit" ng-disabled="HWMQrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="HWMQrowform.$waiting" ng-click="HWMQrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!HWMQrowform.$visible"><button class="btn btn-primary" ng-click="HWMQrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteHwmQuality(hwmq)">del</button></div></td><td><div style="display:none"><span editable-text="hwmq.HWM_QUALITY_ID" e-form="HWMQrowform" e-name="HWM_QUALITY_ID">{{hwmq.HWM_QUALITY_ID}}</span></div><span editable-text="hwmq.HWM_QUALITY" e-name="HWM_QUALITY" e-form="HWMQrowform">{{ hwmq.HWM_QUALITY || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addHWMQButtonShowing" class="btn btn-primary" ng-click="showAddHWMQClicked()">Add New HWM Quality</button><div ng-show="showAddHWMQForm"><form class="form-horizontal" name="lookupForm.hwmQualFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">HWM Quality:</label><div class="col-md-6"><input class="form-control" id="HWM_QUALITY" name="HWM_QUALITY" type="text" placeholder="" ng-model="newHWMQ.HWM_QUALITY" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddHwmQuality(lookupForm.hwmQualFm.$valid, newHWMQ)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindHWMQ()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'HWM_QUALITY\';</script><table class="table table-striped table-condensed"><thead><tr><th class="HWM_QUALITY">HWM Quality&nbsp;<a ng-click="sort_by(\'HWM_QUALITY\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="hwmq in hwmQualList | orderBy:sortingOrder:reverse"><td>{{ hwmq.HWM_QUALITY || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/housingType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Housing Type</th></tr></thead><tbody><tr ng-repeat="ht in houseTypeList | orderBy: \'HOUSING_TYPE_ID\'"><td style="white-space: nowrap"><form editable-form name="HTrowform" onaftersave="saveHouseType($data, ht.HOUSING_TYPE_ID)" ng-show="HTrowform.$visible" class="form-buttons form-inline" shown="inserted == ht"><button type="submit" ng-disabled="HTrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="HTrowform.$waiting" ng-click="HTrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!HTrowform.$visible"><button class="btn btn-primary" ng-click="HTrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteHouseType(ht)">del</button></div></td><td><div style="display:none"><span editable-text="ht.HOUSING_TYPE_ID" e-form="HTrowform" e-name="HOUSING_TYPE_ID">{{ht.HOUSING_TYPE_ID}}</span></div><span editable-text="ht.TYPE_NAME" e-name="TYPE_NAME" e-form="HTrowform">{{ ht.TYPE_NAME || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addHTButtonShowing" class="btn btn-primary" ng-click="showAddHTClicked()">Add New Housing Type</button><div ng-show="showAddHTForm"><form class="form-horizontal" name="lookupForm.houseTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="TYPE_NAME">Housing Type:</label><div class="col-md-6"><input class="form-control" id="TYPE_NAME" name="TYPE_NAME" type="text" placeholder="" ng-model="newHT.TYPE_NAME" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddHouseType(lookupForm.houseTypeFm.$valid, newHT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindHT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'TYPE_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="TYPE_NAME">Housing Type&nbsp;<a ng-click="sort_by(\'TYPE_NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="ht in houseTypeList | orderBy:sortingOrder:reverse"><td>{{ ht.TYPE_NAME || \'\' }}</td></tr></tbody></table></div>');

}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("sensorModalCtrl",["$scope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","allDropdowns","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m){$(".page-loading").addClass("hidden"),e.sensorTypeList=s[0],e.sensorBrandList=s[1],e.houseTypeList=s[2],e.sensorDeployList=s[3],e.eventList=s[4],e.depTypeList=l,e.filteredDeploymentTypes=[],e.timeZoneList=["UTC","PST","MST","CST","EST"],e.userRole=n.get("usersRole"),e.showEventDD=!1,e.adminChanged={},e.IntervalType={},e.whichButton="",e.dateOptions={startingDay:1,showWeeks:!1};var E=function(e){var t,n=[];t=void 0!==e?new Date(e):new Date;var o=t.toString().substring(35),a="";switch(o.substr(0,3)){case"Cen":a="CST";break;case"Eas":a="EST";break;case"Mou":a="MST";break;case"Pac":a="PST"}return n=[t,a]};e.showChangeEventDD=function(){e.showEventDD=!e.showEventDD},e.ChangeEvent=function(){e.EventName=e.eventList.filter(function(t){return t.EVENT_ID==e.adminChanged.EVENT_ID})[0].EVENT_NAME},e.getDepTypes=function(){e.filteredDeploymentTypes=[];for(var t=e.sensorDeployList.filter(function(t){return t.SENSOR_TYPE_ID==e.aSensor.SENSOR_TYPE_ID}),n=0;n<t.length;n++)for(var o=0;o<e.depTypeList.length;o++)t[n].DEPLOYMENT_TYPE_ID==e.depTypeList[o].DEPLOYMENT_TYPE_ID&&(e.filteredDeploymentTypes.push(e.depTypeList[o]),o=e.depTypeList.length)},e.LoggedInMember=p.filter(function(e){return e.MEMBER_ID==n.get("mID")})[0],e.aSensor={},e.aSensStatus={},e.thisSensorSite=d,e.cancel=function(){a.dismiss("cancel")},e.isNum=function(e){var t=e||window.event,n=t.keyCode||t.which;46!=n&&45!=n&&n>31&&(48>n||n>57)&&(t.returnValue=!1,t.preventDefault&&t.preventDefault())};var f=function(){if("UTC"!=e.aSensStatus.TIME_ZONE){var t=new Date(e.aSensStatus.TIME_STAMP).toUTCString();e.aSensStatus.TIME_STAMP=t,e.aSensStatus.TIME_ZONE="UTC"}else{var n=e.aSensStatus.TIME_STAMP.toString().indexOf("GMT")+3;e.aSensStatus.TIME_STAMP=e.aSensStatus.TIME_STAMP.toString().substring(0,n)}};if(e.save=function(){if(e.SensorForm.$valid){var r={},s={};void 0!==e.adminChanged.EVENT_ID&&(e.aSensor.EVENT_ID=e.adminChanged.EVENT_ID),"Minutes"==e.IntervalType.type&&(e.aSensor.INTERVAL=60*e.aSensor.INTERVAL),f(),o.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),o.defaults.headers.common.Accept="application/json",u.update({id:e.aSensor.INSTRUMENT_ID},e.aSensor).$promise.then(function(n){r=n,r.Deployment_Type=e.depTypeList.filter(function(t){return t.DEPLOYMENT_TYPE_ID==e.aSensor.DEPLOYMENT_TYPE_ID})[0].METHOD,r.Housing_Type=e.houseTypeList.filter(function(t){return t.HOUSING_TYPE_ID==e.aSensor.HOUSING_TYPE_ID})[0].TYPE_NAME,r.Sensor_Brand=e.sensorBrandList.filter(function(t){return t.SENSOR_BRAND_ID==e.aSensor.SENSOR_BRAND_ID})[0].BRAND_NAME,r.Sensor_Type=e.sensorTypeList.filter(function(t){return t.SENSOR_TYPE_ID==e.aSensor.SENSOR_TYPE_ID})[0].SENSOR,m.update({id:e.aSensStatus.INSTRUMENT_STATUS_ID},e.aSensStatus).$promise.then(function(n){s=n;var o={Instrument:r,InstrumentStats:[s]};t(function(){toastr.success("Sensor updated");var t=e.whichButton,n=[o,t];a.close(n)})})})}},e.deploy=function(){if(this.SensorForm.$valid){"Minutes"==e.IntervalType.type&&(e.aSensor.INTERVAL=60*e.aSensor.INTERVAL),e.aSensor.EVENT_ID=n.get("SessionEventID"),e.aSensor.SITE_ID=d.SITE_ID,f(),e.aSensStatus.STATUS_TYPE_ID=1,e.aSensStatus.COLLECTION_TEAM_ID=n.get("mID");var r={},s={};o.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),o.defaults.headers.common.Accept="application/json",void 0!==e.aSensor.INSTRUMENT_ID?u.update({id:e.aSensor.INSTRUMENT_ID},e.aSensor).$promise.then(function(n){r=n,r.Deployment_Type=e.aSensor.Deployment_Type,e.aSensStatus.INSTRUMENT_ID=n.INSTRUMENT_ID,m.save(e.aSensStatus).$promise.then(function(n){s=n;var o={Instrument:r,InstrumentStats:[s,e.previousStateStatus]};t(function(){toastr.success("Sensor deployed");var t="deployP"==e.whichButton?"proposedDeployed":"newDeployed",n=[o,t];a.close(n)})})}):u.save(e.aSensor).$promise.then(function(t){r=t,r.Deployment_Type=null!==t.DEPLOYMENT_TYPE_ID?e.depTypeList.filter(function(e){return e.DEPLOYMENT_TYPE_ID==t.DEPLOYMENT_TYPE_ID})[0].METHOD:"",e.aSensStatus.INSTRUMENT_ID=t.INSTRUMENT_ID,m.save(e.aSensStatus).$promise.then(function(t){createdSenStat=t;var n={Instrument:r,InstrumentStats:[createdSenStat]};toastr.success("Sensor deployed");var o="deployP"==e.whichButton?"proposedDeployed":"newDeployed",s=[n,o];a.close(s)})})}},e.deleteS=function(){var t=r.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return e.aSensor},what:function(){return"Sensor"}}});t.result.then(function(e){o.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),u["delete"]({id:e.INSTRUMENT_ID}).$promise.then(function(){toastr.success("Sensor Removed");var e=["de","deleted"];a.close(e)},function(e){toastr.error("Error: "+e.statusText)})},function(){})},"empty"!=i)if(e.aSensor=angular.copy(i.Instrument),e.aSensStatus=angular.copy(i.InstrumentStats[0]),e.getDepTypes(),e.IntervalType.type="Seconds","Proposed"==i.InstrumentStats[0].Status){e.previousStateStatus=angular.copy(i.InstrumentStats[0]),e.whichButton="deployP",e.aSensor.INTERVAL=0===e.aSensor.INTERVAL?"":e.aSensor.INTERVAL,e.aSensStatus.Status="Deployed";var v=E();e.aSensStatus.TIME_STAMP=v[0],e.aSensStatus.TIME_ZONE=v[1],e.aSensStatus.MEMBER_ID=n.get("mID"),e.EventName=n.get("SessionEventName"),e.Deployer=e.LoggedInMember}else e.whichButton="edit",e.EventName=e.eventList.filter(function(t){return t.EVENT_ID==e.aSensor.EVENT_ID})[0].EVENT_NAME,e.aSensStatus.TIME_STAMP=new Date(e.aSensStatus.TIME_STAMP),e.Deployer=null!==e.aSensStatus.MEMBER_ID||void 0!==e.aSensStatus.MEMBER_ID?p.filter(function(t){return t.MEMBER_ID==e.aSensStatus.MEMBER_ID})[0]:{};else{e.whichButton="deploy",e.IntervalType.type="Seconds";var g=E();e.aSensStatus.TIME_STAMP=g[0],e.aSensStatus.TIME_ZONE=g[1],e.aSensStatus.MEMBER_ID=n.get("mID"),e.EventName=n.get("SessionEventName"),e.Deployer=e.LoggedInMember}}]),e.controller("sensorRetrievalModalCtrl",["$scope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","thisSensor","SensorSite","siteOPs","allEventList","allMembers","allStatusTypes","allInstCollCond","INSTRUMENT","INSTRUMENT_STATUS",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E){$(".page-loading").addClass("hidden"),e.aSensor=s.Instrument,e.EventName=d.filter(function(t){return t.EVENT_ID==e.aSensor.EVENT_ID})[0].EVENT_NAME,e.depSensStatus=s.InstrumentStats[0],e.Deployer=c.filter(function(t){return t.MEMBER_ID==e.depSensStatus.MEMBER_ID})[0],e.whichButton="Retrieve",e.statusTypeList=p.filter(function(e){return"Retrieved"==e.STATUS||"Lost"==e.STATUS}),e.collectCondList=u,e.timeZoneList=["UTC","PST","MST","CST","EST"],e.userRole=n.get("usersRole"),e.aRetrieval={TIME_STAMP:new Date,TIME_ZONE:"CST",INSTRUMENT_ID:e.aSensor.INSTRUMENT_ID,MEMBER_ID:n.get("mID")},e.Retriever=c.filter(function(e){return e.MEMBER_ID==n.get("mID")})[0],e.cancel=function(){a.dismiss("cancel")},e.retrieveS=function(r){if(r){o.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),o.defaults.headers.common.Accept="application/json";var s={},l={};m.update({id:e.aSensor.INSTRUMENT_ID},e.aSensor).$promise.then(function(n){s=n,s.Deployment_Type=e.aSensor.Deployment_Type,E.save(e.aRetrieval).$promise.then(function(n){l=n;var o={Instrument:s,InstrumentStats:[l,e.depSensStatus]};t(function(){toastr.success("Sensor retrieved");var e="retrieved",t=[o,e];a.close(t)})})})}}}]),e.controller("fullSensorModalCtrl",["$scope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","allDepDropdowns","allStatusTypes","allInstCollCond","allEvents","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v){$(".page-loading").addClass("hidden"),e.sensorTypeList=s[0],e.sensorBrandList=s[1],e.houseTypeList=s[2],e.sensorDeployList=s[3],e.depTypeList=c,e.filteredDeploymentTypes=[],e.timeZoneList=["UTC","PST","MST","CST","EST"],e.userRole=n.get("usersRole"),e.IntervalType={},e.thisSensorSite=u,e.sensor=p.Instrument,e.retrievedInstStatus=p.InstrumentStats[0],2===e.retrievedInstStatus.STATUS_TYPE_ID&&(e.statusTypeList=l.filter(function(e){return"Lost"==e.STATUS})),3===e.retrievedInstStatus.STATUS_TYPE_ID&&(e.statusTypeList=l.filter(function(e){return"Retrieved"==e.STATUS})),e.dateOptions={startingDay:1,showWeeks:!1},e.isNum=function(e){var t=e||window.event,n=t.keyCode||t.which;46!=n&&45!=n&&n>31&&(48>n||n>57)&&(t.returnValue=!1,t.preventDefault&&t.preventDefault())};e.getDepTypes=function(){e.filteredDeploymentTypes=[];for(var t=e.sensorDeployList.filter(function(t){return t.SENSOR_TYPE_ID==e.sensor.SENSOR_TYPE_ID}),n=0;n<t.length;n++)for(var o=0;o<e.depTypeList.length;o++)t[n].DEPLOYMENT_TYPE_ID==e.depTypeList[o].DEPLOYMENT_TYPE_ID&&(e.filteredDeploymentTypes.push(e.depTypeList[o]),o=e.depTypeList.length)},e.cancel=function(){a.dismiss("cancel")};var g=function(){if("UTC"!=e.aSensStatus.TIME_ZONE){var t=new Date(e.aSensStatus.TIME_STAMP).toUTCString();e.aSensStatus.TIME_STAMP=t,e.aSensStatus.TIME_ZONE="UTC"}else{var n=e.aSensStatus.TIME_STAMP.toString().indexOf("GMT")+3;e.aSensStatus.TIME_STAMP=e.aSensStatus.TIME_STAMP.toString().substring(0,n)}};e.save=function(r,s){if(r){var l={},i={};"Minutes"==e.IntervalType.type&&(e.sensor.INTERVAL=60*e.sensor.INTERVAL),g(),o.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),o.defaults.headers.common.Accept="application/json",f.update({id:e.sensor.INSTRUMENT_ID},e.sensor).$promise.then(function(n){l=n,l.Deployment_Type=e.depTypeList.filter(function(t){return t.DEPLOYMENT_TYPE_ID==e.sensor.DEPLOYMENT_TYPE_ID})[0].METHOD,l.Housing_Type=e.houseTypeList.filter(function(t){return t.HOUSING_TYPE_ID==e.sensor.HOUSING_TYPE_ID})[0].TYPE_NAME,l.Sensor_Brand=e.sensorBrandList.filter(function(t){return t.SENSOR_BRAND_ID==e.sensor.SENSOR_BRAND_ID})[0].BRAND_NAME,l.Sensor_Type=e.sensorTypeList.filter(function(t){return t.SENSOR_TYPE_ID==e.sensor.SENSOR_TYPE_ID})[0].SENSOR,v.update({id:e.aSensStatus.INSTRUMENT_STATUS_ID},e.aSensStatus).$promise.then(function(n){i=n;var o={Instrument:l,InstrumentStats:[i]};t(function(){toastr.success("Sensor updated");var t=e.whichButton,n=[o,t];a.close(n)})})})}}}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("sensorCtrl",["$scope","$q","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteSensors","allSensorBrands","allDeployTypes","allSensorTypes","allSensDeps","allHousingTypes","allEvents","INSTRUMENT","INSTRUMENT_STATUS","SITE","MEMBER","DEPLOYMENT_TYPE","STATUS_TYPE","INST_COLL_CONDITION",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v,g,T,h,b,y,S,A){if(void 0===n.get("STNCreds")||""===n.get("STNCreds"))e.auth=!1,o.path("/login");else{e.sensorCount={total:c.length},e.deployTypeList=angular.copy(u);for(var D=0,_=0;_<e.deployTypeList.length;_++)"Temperature"===e.deployTypeList[_].METHOD&&(D=e.deployTypeList[_].DEPLOYMENT_TYPE_ID,e.deployTypeList[_].METHOD="Temperature (Met sensor)");e.deployTypeList.push({DEPLOYMENT_TYPE_ID:D,METHOD:"Temperature (Pressure Transducer)"}),e.sensDepTypes=E,e.showProposed=!1,e.SiteSensors=c,e.showHideProposed=function(){e.showProposed=!e.showProposed},e.AddProposed=function(){for(var t={},o=new Date,a=0;a<e.deployTypeList.length;a++)e.deployTypeList[a].selected===!0&&(t="Temp"==e.deployTypeList[a].METHOD.substring(0,4)?{DEPLOYMENT_TYPE_ID:e.deployTypeList[a].DEPLOYMENT_TYPE_ID,SITE_ID:d.SITE_ID,SENSOR_TYPE_ID:"Temperature (Pressure Transducer)"==e.deployTypeList[a].METHOD?1:2,EVENT_ID:void 0!==n.get("SessionEventID")?n.get("SessionEventID"):null,Deployment_Type:e.deployTypeList[a].METHOD}:{DEPLOYMENT_TYPE_ID:e.deployTypeList[a].DEPLOYMENT_TYPE_ID,SITE_ID:d.SITE_ID,SENSOR_TYPE_ID:e.sensDepTypes.filter(function(t){return t.DEPLOYMENT_TYPE_ID==e.deployTypeList[a].DEPLOYMENT_TYPE_ID})[0].SENSOR_TYPE_ID,EVENT_ID:void 0!==n.get("SessionEventID")?n.get("SessionEventID"):null,Deployment_Type:e.deployTypeList[a].METHOD},r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",g.save(t).$promise.then(function(a){t.INSTRUMENT_ID=a.INSTRUMENT_ID;var r={INSTRUMENT_ID:a.INSTRUMENT_ID,STATUS_TYPE_ID:4,MEMBER_ID:n.get("mID"),TIME_STAMP:o,TIME_ZONE:"UTC"};T.save(r).$promise.then(function(n){n.Status="Proposed";for(var o={Instrument:t,InstrumentStats:[n]},a=0;a<e.deployTypeList.length;a++)e.deployTypeList[a].selected=!1;i(function(){e.showProposed=!1,e.SiteSensors.push(o),e.sensorCount={total:e.SiteSensors.length}})})}))},e.showRetrieveModal=function(t){var o=e.SiteSensors.indexOf(t);$(".page-loading").removeClass("hidden");var a=s.open({templateUrl:"SensorRetrievalModal.html",controller:"sensorRetrievalModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{desiredAction:function(){return actionDesired},thisSensor:function(){return 0!==t?t:"empty"},SensorSite:function(){return d},allEventList:function(){return v},siteOPs:function(){return h.getSiteOPs({id:d.SITE_ID}).$promise},allMembers:function(){return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",b.getAll().$promise},allStatusTypes:function(){return S.getAll().$promise},allInstCollCond:function(){return A.getAll().$promise}}});a.result.then(function(n){if("retrieved"==n[1]&&(e.SiteSensors[o]=n[0]),"deletedR"==n[1]){var a=e.SiteSensors.indexOf(t);e.SiteSensors.splice(a,1),e.sensorCount.total=e.SiteSensors.length}})},e.showSensorModal=function(t){{var o=[m,p,f,E,v];e.SiteSensors.indexOf(t)}$(".page-loading").removeClass("hidden");var a=s.open({templateUrl:"Sensormodal.html",controller:"sensorModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropdowns:function(){return o},allDepTypes:function(){return y.getAll().$promise},thisSensor:function(){return 0!==t?t:"empty"},SensorSite:function(){return d},siteOPs:function(){return h.getSiteOPs({id:d.SITE_ID}).$promise},allMembers:function(){return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",b.getAll().$promise}}});a.result.then(function(n){var o=e.SiteSensors.indexOf(t);"proposedDeployed"==n[1]&&(e.SiteSensors[o]=n[0]),"newDeployed"==n[1]&&(e.SiteSensors.push(n[0]),c.push(n[0]),e.sensorCount.total=e.SiteSensors.length),"edit"==n[1]&&(e.SiteSensors[o]=n[0]),"deleted"==n[1]&&(e.SiteSensors.splice(o,1),e.sensorCount.total=e.SiteSensors.length)})},e.showFullSensorModal=function(t){{var o=[m,p,f,E];e.SiteSensors.indexOf(t)}$(".page-loading").removeClass("hidden");var a=s.open({templateUrl:"fullSensormodal.html",controller:"fullSensorModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDepDropdowns:function(){return o},allStatusTypes:function(){return S.getAll().$promise},allInstCollCond:function(){return A.getAll().$promise},allEvents:function(){return v},allDepTypes:function(){return y.getAll().$promise},thisSensor:function(){return 0!==t?t:"empty"},SensorSite:function(){return d},siteOPs:function(){return h.getSiteOPs({id:d.SITE_ID}).$promise},allMembers:function(){return r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json",b.getAll().$promise}}});a.result.then(function(e){})},e.$watch(function(){return n.get("SessionEventName")},function(t){e.sessionEventName=void 0!==t?t:"All Events",e.sessionEventExists="All Events"!=e.sessionEventName?!0:!1,void 0!==t?(e.SiteSensors=c.filter(function(e){return e.Instrument.EVENT_ID==n.get("SessionEventID")||4==e.InstrumentStats[0].STATUS_TYPE_ID}),e.sensorCount={total:e.SiteSensors.length}):(e.SiteSensors=c,e.sensorCount={total:e.SiteSensors.length})})}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/horizontalDatum.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Horizontal Datum</th><th>Horizontal Abbreviation</th></tr></thead><tbody><tr ng-repeat="hd in horDatList | orderBy: \'DATUM_NAME\'"><td style="white-space: nowrap"><form editable-form name="HDrowform" onaftersave="saveHorDatum($data, hd.DATUM_ID)" ng-show="HDrowform.$visible" class="form-buttons form-inline" shown="inserted == hd"><button type="submit" ng-disabled="HDrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="HDrowform.$waiting" ng-click="HDrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!HDrowform.$visible"><button class="btn btn-primary" ng-click="HDrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteHorDatum(hd)">del</button></div></td><td><div style="display:none"><span editable-text="hd.DATUM_ID" e-form="HDrowform" e-name="DATUM_ID">{{hd.DATUM_ID}}</span></div><span editable-text="hd.DATUM_NAME" e-name="DATUM_NAME" e-form="HDrowform">{{ hd.DATUM_NAME || \'\' }}</span></td><td><span editable-text="hd.DATUM_ABBREVIATION" e-name="DATUM_ABBREVIATION" e-form="HDrowform">{{ hd.DATUM_ABBREVIATION || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addHDButtonShowing" class="btn btn-primary" ng-click="showAddHDClicked()">Add New Horizontal Datum</button><div ng-show="showAddHDForm"><form class="form-horizontal" name="lookupForm.horDatumFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="DATUM_NAME">Horizontal Datum Name:</label><div class="col-md-6"><input class="form-control" id="DATUM_NAME" name="DATUM_NAME" type="text" placeholder="" ng-model="newHD.DATUM_NAME" required></div></div><div class="form-group"><label class="col-md-3 control-label" for="DATUM_ABBREVIATION">Horizontal Datum Abbreviation:</label><div class="col-md-6"><input class="form-control" id="DATUM_ABBREVIATION" name="DATUM_ABBREVIATION" type="text" placeholder="" ng-model="newHD.DATUM_ABBREVIATION"></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddHorDatum(lookupForm.horDatumFm.$valid, newHD)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindHD()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'DATUM_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="DATUM_NAME">Horizontal Datum&nbsp;<a ng-click="sort_by(\'DATUM_NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="DATUM_ABBREVIATION">Horizontal Abbreviation&nbsp;<a ng-click="sort_by(\'DATUM_ABBREVIATION\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="hd in horDatList | orderBy:sortingOrder:reverse"><td>{{ hd.DATUM_NAME || \'\' }}</td><td>{{ hd.DATUM_ABBREVIATION || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("submitReportCtrl",["$scope","$http","$cookies","$uibModal","$state","CONTACT","REPORT",function(e,t,n,o,a,r,s){e.$parent.needToComplete!==!0&&(e.$parent.newReport={}),e.$parent.needToComplete=!1,void 0===e.newReport.REPORTING_METRICS_ID&&(e.disabled=!0),e.getEventName=function(t){var n,o=e.events.filter(function(e){return e.EVENT_ID==t})[0];return n=o.EVENT_NAME};var l=function(o){t.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),t.defaults.headers.common.Accept="application/json",r.getContactModel({ContactModelByReport:o},function(t){e.DeployStaff=t.filter(function(e){return"Deployed Staff"==e.TYPE})[0],e.GenStaff=t.filter(function(e){return"General"==e.TYPE})[0],e.InlandStaff=t.filter(function(e){return"Inland Flood"==e.TYPE})[0],e.CoastStaff=t.filter(function(e){return"Coastal Flood"==e.TYPE})[0],e.WaterStaff=t.filter(function(e){return"Water Quality"==e.TYPE})[0]}).$promise,e.disabled=!1},i=function(t){r.addReportContact({contactTypeId:1,reportId:t},e.DeployStaff,function(e){toastr.success("Deploy Staff Updated")},function(e){alert("Error: "+e.statusText)}).$promise,void 0!==e.GenStaff.LNAME&&r.addReportContact({contactTypeId:2,reportId:t},e.GenStaff,function(e){toastr.success("General Staff Updated")},function(e){alert("Error: "+e.statusText)}).$promise,void 0!==e.InlandStaff.LNAME&&r.addReportContact({contactTypeId:3,reportId:t},e.InlandStaff,function(e){toastr.success("Inland Staff Updated")},function(e){alert("Error: "+e.statusText)}).$promise,void 0!==e.CoastStaff.LNAME&&r.addReportContact({contactTypeId:4,reportId:t},e.CoastStaff,function(e){toastr.success("Coastal Staff Updated")},function(e){alert("Error: "+e.statusText)}).$promise,void 0!==e.WaterStaff.LNAME&&r.addReportContact({contactTypeId:5,reportId:t},e.WaterStaff,function(e){toastr.success("Water Staff Updated")},function(e){alert("Error: "+e.statusText)}).$promise},d=function(){for(var t=0,n=0;n<e.memberIncompletes.length;n++)e.memberIncompletes[n].REPORTING_METRICS_ID==e.newReport.REPORTING_METRICS_ID&&(t=n,n=e.memberIncompletes.length);e.memberIncompletes.splice(t,1)},c=function(){t.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),t.defaults.headers.common.Accept="application/json",void 0!==e.newReport.REPORTING_METRICS_ID?s.update({id:e.newReport.REPORTING_METRICS_ID},e.newReport,function(t){toastr.success("Report Updated"),e.newReport.EVENT_NAME=e.getEventName(e.newReport.EVENT_ID),1==e.newReport.COMPLETE&&(d(),e.isCompleted=!0),i(e.newReport.REPORTING_METRICS_ID)},function(e){toastr.error("Error: "+e.statusText)}).$promise.then(function(){e.fullReportForm.submit.$setPristine(),e.fullReportForm.submit.EVENT_ID.$viewValue=void 0,a.go("reporting.reportDash")}):s.save(e.newReport,function(t){toastr.success("Report Created"),e.reports.push(t),1==e.newReport.COMPLETE&&(d(),e.isCompleted=!0,e.newReport.EVENT_NAME=e.getEventName(e.newReport.EVENT_ID)),e.newReport.REPORTING_METRICS_ID=t.REPORTING_METRICS_ID,i(e.newReport.REPORTING_METRICS_ID)},function(e){toastr.error("Error: "+e.statusText)}).$promise.then(function(){e.fullReportForm.submit.$setPristine(),e.fullReportForm.submit.EVENT_ID.$viewValue=void 0,a.go("reporting.reportDash")})};e.populateYestTots=function(){if(void 0!==e.newReport.REPORT_DATE&&void 0!==e.newReport.STATE&&void 0!==e.newReport.EVENT_ID){var o=new Date(e.newReport.REPORT_DATE),a=e.newReport.STATE,r=e.newReport.EVENT_ID;e.disabled=!1,e.newReport={REPORT_DATE:e.newReport.REPORT_DATE,STATE:a,EVENT_ID:r},e.DeployStaff={},e.GenStaff={},e.InlandStaff={},e.CoastStaff={},e.WaterStaff={};var i=new Date(o);i.setDate(o.getDate()-1),i.setHours(0,0,0,0);var d=e.reports.filter(function(t){var n=new Date(t.REPORT_DATE).setHours(0,0,0,0);return t.EVENT_ID==e.newReport.EVENT_ID&&t.STATE==e.newReport.STATE&&new Date(n).getTime()==i.getTime()})[0];t.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),t.defaults.headers.common.Accept="application/json",void 0!==d&&d.length>0?(e.newReport.SW_YEST_FIELDPERS=d.SW_TOD_FIELDPERS,e.newReport.WQ_YEST_FIELDPERS=d.WQ_TOD_FIELDPERS,e.newReport.SW_YEST_OFFICEPERS=d.SW_TOD_OFFICEPERS,e.newReport.WQ_YEST_OFFICEPERS=d.WQ_TOD_OFFICEPERS,l(d.REPORTING_METRICS_ID)):(e.newReport.SW_YEST_FIELDPERS=0,e.newReport.WQ_YEST_FIELDPERS=0,e.newReport.SW_YEST_OFFICEPERS=0,e.newReport.WQ_YEST_OFFICEPERS=0),s.getDailyReportTots({Date:e.newReport.REPORT_DATE,Event:e.newReport.EVENT_ID,State:e.newReport.STATE},function(t){e.newReport.DEP_RAPDEPL_GAGE=t.DEP_RAPDEPL_GAGE,e.newReport.REC_RAPDEPL_GAGE=t.REC_RAPDEPL_GAGE,e.newReport.LOST_RAPDEPL_GAGE=t.LOST_RAPDEPL_GAGE,e.newReport.DEP_WTRLEV_SENSOR=t.DEP_WTRLEV_SENSOR,e.newReport.REC_WTRLEV_SENSOR=t.REC_WTRLEV_SENSOR,e.newReport.LOST_WTRLEV_SENSOR=t.LOST_WTRLEV_SENSOR,e.newReport.DEP_WV_SENS=t.DEP_WV_SENS,e.newReport.REC_WV_SENS=t.REC_WV_SENS,e.newReport.LOST_WV_SENS=t.LOST_WV_SENS,e.newReport.DEP_BAROMETRIC=t.DEP_BAROMETRIC,e.newReport.REC_BAROMETRIC=t.REC_BAROMETRIC,e.newReport.LOST_BAROMETRIC=t.LOST_BAROMETRIC,e.newReport.DEP_METEOROLOGICAL=t.DEP_METEOROLOGICAL,e.newReport.REC_METEOROLOGICAL=t.REC_METEOROLOGICAL,e.newReport.LOST_METEOROLOGICAL=t.LOST_METEOROLOGICAL,e.newReport.HWM_FLAGGED=t.HWM_FLAGGED,e.newReport.HWM_COLLECTED=t.HWM_COLLECTED},function(e){alert("Error: "+e.statusText)})}else alert("Please choose a date, event and state first.")},e.saveReport=function(t){if(t===!1)alert("All fields are required"),angular.element("[name='"+e.fullReportForm.submit.$name+"']").find(".ng-invalid:visible:first").focus();else if(void 0===e.newReport.COMPLETE||0===e.newReport.COMPLETE){var n=o.open({templateUrl:"saveReportModal.html",controller:"confirmReportModalCtrl",size:"sm"});n.result.then(function(){e.newReport.COMPLETE=0,e.newReport.MEMBER_ID=e.MemberLoggedIn.MEMBER_ID,c()})}else e.newReport.MEMBER_ID=e.MemberLoggedIn.MEMBER_ID,c()},e.getIncompleteReport=function(){var t=this.ir.REPORTING_METRICS_ID;s.query({id:t},function(n){e.newReport=n,e.fullReportForm.submit.$setDirty(),l(t)}).$promise}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/horizontalCollectionMethod.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Horizontal Collection Method</th></tr></thead><tbody><tr ng-repeat="hcm in horColMethList | orderBy: \'HCOLLECT_METHOD\'"><td style="white-space: nowrap"><form editable-form name="HCMrowform" onaftersave="saveHorCollMethod($data, hcm.HCOLLECT_METHOD_ID)" ng-show="HCMrowform.$visible" class="form-buttons form-inline" shown="inserted == hcm"><button type="submit" ng-disabled="HCMrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="HCMrowform.$waiting" ng-click="HCMrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!HCMrowform.$visible"><button class="btn btn-primary" ng-click="HCMrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteHorCollMethod(hcm)">del</button></div></td><td><div style="display:none"><span editable-text="hcm.HCOLLECT_METHOD_ID" e-form="HCMrowform" e-name="HCOLLECT_METHOD_ID">{{hcm.HCOLLECT_METHOD_ID}}</span></div><span editable-text="hcm.HCOLLECT_METHOD" e-name="HCOLLECT_METHOD" e-form="HCMrowform">{{ hcm.HCOLLECT_METHOD || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addHCMButtonShowing" class="btn btn-primary" ng-click="showAddHCMClicked()">Add New Horizontal Collection Method</button><div ng-show="showAddHCMForm"><form class="form-horizontal" name="lookupForm.eventStatFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="HCOLLECT_METHOD">Horizontal Collection Method:</label><div class="col-md-6"><input class="form-control" id="HCOLLECT_METHOD" name="HCOLLECT_METHOD" type="text" placeholder="" ng-model="newHCM.HCOLLECT_METHOD" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddHorCollMethod(lookupForm.eventStatFm.$valid, newHCM)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindHCM()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'HCOLLECT_METHOD\';</script><table class="table table-striped table-condensed"><thead><tr><th class="HCOLLECT_METHOD">Horizontal Collection Method&nbsp;<a ng-click="sort_by(\'HCOLLECT_METHOD\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="hcm in horColMethList | orderBy:sortingOrder:reverse"><td>{{ hcm.HCOLLECT_METHOD || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/fileType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>File Type</th></tr></thead><tbody><tr ng-repeat="ft in fileTypeList | orderBy: \'FILETYPE\'"><td style="white-space: nowrap"><form editable-form name="FTrowform" onaftersave="saveFileType($data, ft.FILETYPE_ID)" ng-show="FTrowform.$visible" class="form-buttons form-inline" shown="inserted == ft"><button type="submit" ng-disabled="FTrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="FTrowform.$waiting" ng-click="FTrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!FTrowform.$visible"><button class="btn btn-primary" ng-click="FTrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteFileType(ft)">del</button></div></td><td><div style="display:none"><span editable-text="ft.FILETYPE_ID" e-form="FTrowform" e-name="FILETYPE_ID">{{ft.FILETYPE_ID}}</span></div><span editable-text="ft.FILETYPE" e-name="FILETYPE" e-form="FTrowform">{{ ft.FILETYPE || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addFTButtonShowing" class="btn btn-primary" ng-click="showAddFTClicked()">Add New File Type</button><div ng-show="showAddFTForm"><form class="form-horizontal" name="lookupForm.fileTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="FILETYPE">File Type:</label><div class="col-md-6"><input class="form-control" id="FILETYPE" name="FILETYPE" type="text" placeholder="" ng-model="newFT.FILETYPE" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddFileType(lookupForm.fileTypeFm.$valid, newFT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindFT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'FILETYPE\';</script><table class="table table-striped table-condensed"><thead><tr><th class="FILETYPE">File Type&nbsp;<a ng-click="sort_by(\'FILETYPE\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="ft in fileTypeList | orderBy:sortingOrder:reverse"><td>{{ ft.FILETYPE || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("reportModalCtrl",["$scope","$uibModalInstance","report","submitPerson","contacts",function(e,t,n,o,a){e.ReportView={},e.ReportView.Report=n,e.ReportView.submitter=o,e.ReportView.deployStaff=a.filter(function(e){return"Deployed Staff"==e.TYPE}),e.ReportView.generalStaff=a.filter(function(e){return"General"==e.TYPE}),e.ReportView.inlandStaff=a.filter(function(e){return"Inland Flood"==e.TYPE}),e.ReportView.coastStaff=a.filter(function(e){return"Coastal Flood"==e.TYPE}),e.ReportView.waterStaff=a.filter(function(e){return"Water Quality"==e.TYPE}),e.ok=function(){t.dismiss("cancel")}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/eventType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Event Type</th></tr></thead><tbody><tr ng-repeat="et in eventTypeList | orderBy: \'TYPE\'"><td style="white-space: nowrap"><form editable-form name="ETrowform" onaftersave="saveEventType($data, et.EVENT_TYPE_ID)" ng-show="ETrowform.$visible" class="form-buttons form-inline" shown="inserted == et"><button type="submit" ng-disabled="ETrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="ETrowform.$waiting" ng-click="ETrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!ETrowform.$visible"><button class="btn btn-primary" ng-click="ETrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteEventType(et)">del</button></div></td><td><div style="display:none"><span editable-text="et.EVENT_TYPE_ID" e-form="ETrowform" e-name="EVENT_TYPE_ID">{{et.EVENT_TYPE_ID}}</span></div><span editable-text="et.TYPE" e-name="TYPE" e-form="ETrowform">{{ et.TYPE|| \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addETButtonShowing" class="btn btn-primary" ng-click="showAddETClicked()">Add New Event Type</button><div ng-show="showAddETForm"><form class="form-horizontal" name="lookupForm.eventTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="TYPE">Event Type:</label><div class="col-md-6"><input class="form-control" id="TYPE" name="TYPE" type="text" placeholder="" ng-model="newET.TYPE" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddEventType(lookupForm.eventTypeFm.$valid, newET)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindET()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'TYPE\';</script><table class="table table-striped table-condensed"><thead><tr><th class="TYPE">Event Type&nbsp;<a ng-click="sort_by(\'TYPE\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="et in eventTypeList | orderBy:sortingOrder:reverse"><td>{{ et.TYPE || \'\' }}</td></tr></tbody></table></div>');

}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("reportingDashCtrl",["$scope","$cookies","$filter","$uibModal","$state","$http","CONTACT","MEMBER","allReportsAgain",function(e,t,n,o,a,r,s,l,i){function d(t){for(var n=[],o=0;o<t.length;o++){var a=t[o],r=e.events.filter(function(e){return e.EVENT_ID==a.EVENT_ID})[0];a.EVENT_NAME=r.EVENT_NAME,n.push(a)}return n}e.reportsToDate=i,e.todayRpts=[],e.yesterdayRpts=[],e.pickDateRpts=[],e.pickAdateReports=!1,e.today=new Date,e.today.setHours(0,0,0,0),e.yesterday=new Date(e.today),e.yesterday.setDate(e.today.getDate()-1),e.THIS_DATE={},e.ViewReport=function(n){var a=o.open({templateUrl:"ViewReport.html",controller:"reportModalCtrl",size:"lg",windowClass:"rep-dialog",resolve:{report:function(){return n},submitPerson:function(){r.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),r.defaults.headers.common.Accept="application/json";var o={};return l.query({id:n.MEMBER_ID},function(t){o.mem=t;var n=e.agencies.filter(function(e){return e.AGENCY_ID==o.mem.AGENCY_ID})[0];o.AGENCY_NAME=n.AGENCY_NAME,o.AGENCY_ADDRESS=n.ADDRESS+", "+n.CITY+" "+n.STATE+" "+n.ZIP}).$promise,o},contacts:function(){return r.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),r.defaults.headers.common.Accept="application/json",s.getContactModel({ContactModelByReport:n.REPORTING_METRICS_ID}).$promise}}});a.result.then(function(e){})};var c=e.reportsToDate.filter(function(t){var n=new Date(t.REPORT_DATE).setHours(0,0,0,0);return new Date(n).getTime()==e.today.getTime()});e.todayRpts=d(c);var p=e.reportsToDate.filter(function(t){var n=new Date(t.REPORT_DATE).setHours(0,0,0,0);return new Date(n).getTime()==e.yesterday.getTime()});e.yesterdayRpts=d(p),e.getReportsByDate=function(){if(void 0!==e.THIS_DATE.date){var t=new Date(e.THIS_DATE.date).setHours(0,0,0,0),n=e.reportsToDate.filter(function(e){var n=new Date(e.REPORT_DATE).setHours(0,0,0,0);return new Date(n).getTime()==new Date(t).getTime()});e.pickDateRpts=d(n),e.pickAdateReports=!0}else alert("Pick a date first.")},e.CompleteThisReport=function(n){e.$parent.newReport=n,e.$parent.disabled=!1,e.$parent.needToComplete=!0,r.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),r.defaults.headers.common.Accept="application/json",s.getContactModel({ContactModelByReport:n.REPORTING_METRICS_ID},function(t){e.$parent.DeployStaff=t.filter(function(e){return"Deployed Staff"==e.TYPE})[0],e.$parent.GenStaff=t.filter(function(e){return"General"==e.TYPE})[0],e.$parent.InlandStaff=t.filter(function(e){return"Inland Flood"==e.TYPE})[0],e.$parent.CoastStaff=t.filter(function(e){return"Coastal Flood"==e.TYPE})[0],e.$parent.WaterStaff=t.filter(function(e){return"Water Quality"==e.TYPE})[0]}).$promise.then(function(){a.go("reporting.submitReport")})},e.getProjectAlertText=function(t){e.ProjectAlertParts={},e.ProjectAlertParts.Report=t,e.ProjectAlertParts.totYestFieldPers=t.SW_YEST_FIELDPERS+t.WQ_YEST_FIELDPERS,e.ProjectAlertParts.totYestOfficPers=t.SW_YEST_OFFICEPERS+t.WQ_YEST_OFFICEPERS,e.ProjectAlertParts.measureCts=t.TOT_CHECK_MEAS+t.TOT_DISCHARGE_MEAS;var a=e.reportsToDate.filter(function(e){return e.EVENT_ID==t.EVENT_ID}),r=n("countBy")(a,"STATE");e.ProjectAlertParts.stateCount=0,angular.forEach(r,function(t){e.ProjectAlertParts.stateCount++}),e.ProjectAlertParts.Event=e.events.filter(function(e){return e.EVENT_ID==t.EVENT_ID})[0];var s=o.open({templateUrl:1==e.ProjectAlertParts.Event.EVENT_TYPE_ID?"FloodPA.html":"HurricanePA.html",controller:"ProjAlertModalCtrl",size:"md",windowClass:"rep-dialog",resolve:{ProjAlert:function(){return e.ProjectAlertParts}}});s.result.then(function(e){})}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/eventStatus.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Event Status</th></tr></thead><tbody><tr ng-repeat="es in eventStatList | orderBy: \'EVENT_STATUS_ID\'"><td style="white-space: nowrap"><form editable-form name="ESrowform" onaftersave="saveEventStat($data, es.EVENT_STATUS_ID)" ng-show="ESrowform.$visible" class="form-buttons form-inline" shown="inserted == es"><button type="submit" ng-disabled="ESrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="ESrowform.$waiting" ng-click="ESrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!ESrowform.$visible"><button class="btn btn-primary" ng-click="ESrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteEventStat(es)">del</button></div></td><td><div style="display:none"><span editable-text="es.EVENT_STATUS_ID" e-form="ESrowform" e-name="EVENT_STATUS_ID">{{es.EVENT_STATUS_ID}}</span></div><span editable-text="es.STATUS" e-name="STATUS" e-form="ESrowform">{{ es.STATUS || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addESButtonShowing" class="btn btn-primary" ng-click="showAddESClicked()">Add New Event Status</button><div ng-show="showAddESForm"><form class="form-horizontal" name="lookupForm.eventStatFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="STATUS">Event Status:</label><div class="col-md-6"><input class="form-control" id="STATUS" name="STATUS" type="text" placeholder="" ng-model="newES.STATUS" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddEventStat(lookupForm.eventStatFm.$valid, newES)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindES()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'STATUS\';</script><table class="table table-striped table-condensed"><thead><tr><th class="STATUS">Event Status&nbsp;<a ng-click="sort_by(\'STATUS\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="es in eventStatList | orderBy:sortingOrder:reverse"><td>{{ es.STATUS || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("reportingCtrl",["$scope","$rootScope","$cookies","$location","$http","$uibModal","incompleteReports","allEvents","allStates","allReports","allEventTypes","allEventStatus","allAgencies","REPORT","MEMBER",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E){void 0===n.get("STNCreds")||""===n.get("STNCreds")?(e.auth=!1,o.path("/login")):(t.thisPage="Reporting",t.activeMenu="report",t.$on("$stateChangeStart",function(t,n,o,a,r){var s=!1;switch(a.url){case"/SubmitReport":void 0!==e.fullReportForm.submit&&(s=e.fullReportForm.submit.$dirty,s=void 0!==e.fullReportForm.submit.EVENT_ID.$viewValue?!0:s)}s&&(console.log("toState.name: "+n.name),console.log("fromState.name: "+a.name),confirm("Are you sure you want to leave the Submit Report Tab? Any unsaved information will be lost.")?console.log("go to: "+n.name):(console.log("stay at state: "+a.name),$(".page-loading").addClass("hidden"),t.preventDefault()))}),e.datepickrs={},e.open=function(t,n){t.preventDefault(),t.stopPropagation(),e.datepickrs[n]=!0},e.formatDate=function(e){var t=new Date(e),n=t.getMonth()+1;n=10>n?"0"+n:n;var o=t.getDate(),a=t.getFullYear(),r=n+"/"+o+"/"+a;return r},e.fullReportForm={},e.newReport={},e.DeployStaff={},e.GenStaff={},e.InlandStaff={},e.CoastStaff={},e.WaterStaff={},e.disabled=!0,e.needToComplete=!1,e.memberIncompletes=s.filter(function(e){return 0===e.COMPLETE}),e.events=l,e.states=i,e.reports=d,a.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),a.defaults.headers.common.Accept="application/json",E.query({id:n.get("mID")},function(t){e.MemberLoggedIn=t;var n=u.filter(function(t){return t.AGENCY_ID==e.MemberLoggedIn.AGENCY_ID})[0];e.MemberLoggedIn.AGENCY_NAME=n.AGENCY_NAME,e.MemberLoggedIn.AGENCY_ADDRESS=n.ADDRESS+", "+n.CITY+" "+n.STATE+" "+n.ZIP}).$promise,E.getAll().$promise.then(function(t){e.members=t}),e.agencies=u,e.eventTypes=c,e.eventStats=p,e.Statemodel={},e.genSummary={},e.filteredReports=[],e.genRepChange=function(){e.EventName=e.events.filter(function(t){return t.EVENT_ID==e.genSummary.EVENT_ID})[0];var t=[],n=[];angular.forEach(e.Statemodel.value,function(e){t.push(e.STATE_NAME),n.push(e.STATE_ABBREV)}),e.StateNames=t.join(", "),e.StateAbbrevs=n.join(",")},e.MetricDisplayModel=[],e.displayMetricSum=function(t){if(t){e.MetricDisplayModel=[],e.GenRepEventModel={},e.totalRow={},e.totalRow.notAcctForEmps=0,e.totalRow.cumPField=0,e.totalRow.yesPField=0,e.totalRow.todPField=0,e.totalRow.tomPField=0,e.totalRow.cumPOffice=0,e.totalRow.yesPOffice=0,e.totalRow.todPOffice=0,e.totalRow.tomPOffice=0,e.totalRow.truck=0,e.totalRow.boat=0,e.totalRow.other=0,e.totalRow.gageVisits=0,e.totalRow.gagesDown=0,e.totalRow.disCtoDate=0,e.totalRow.disCPlanned=0,e.totalRow.CheckMeasToDate=0,e.totalRow.CheckMeasPlanned=0,e.totalRow.indMeas=0,e.totalRow.ratExt=0,e.totalRow.peaksOfRec=0,e.totalRow.QWGageVis=0,e.totalRow.contQWGageVis=0,e.totalRow.contQWGageDown=0,e.totalRow.disQWSamples=0,e.totalRow.sedSamples=0,e.totalRow.rdgPlan=0,e.totalRow.rdgDep=0,e.totalRow.rdgRec=0,e.totalRow.rdgLost=0,e.totalRow.waterPlan=0,e.totalRow.waterDep=0,e.totalRow.waterRec=0,e.totalRow.waterLost=0,e.totalRow.wavePlan=0,e.totalRow.waveDep=0,e.totalRow.waveRec=0,e.totalRow.waveLost=0,e.totalRow.baroPlan=0,e.totalRow.baroDep=0,e.totalRow.baroRec=0,e.totalRow.baroLost=0,e.totalRow.metPlan=0,e.totalRow.metDep=0,e.totalRow.metRec=0,e.totalRow.metLost=0,e.totalRow.hwmFlag=0,e.totalRow.hwmCol=0;var n=[];angular.forEach(e.Statemodel.value,function(e){n.push(e.STATE_ABBREV)});var o=n.join(", "),a=e.formatDate(e.genSummary.SUM_DATE);m.getFilteredReports({Event:e.EventName.EVENT_ID,States:o,Date:a}).$promise.then(function(t){for(var n=0;n<t.length;n++){var o={};o.report=t[n];for(var a=0,s=0,l=0,i=0,d=0;d<t.length;d++)a+=t[d].SW_YEST_FIELDPERS;for(var c=0;c<t.length;c++)s+=t[c].WQ_YEST_FIELDPERS;for(var p=0;p<t.length;p++)l+=t[p].SW_YEST_OFFICEPERS;for(var u=0;u<t.length;u++)i+=t[u].WQ_YEST_OFFICEPERS;o.FieldPYesSWTot=a,o.FieldPYesWQTot=s,o.OfficePYesSWTot=l,o.OfficePYesWQTot=i,e.totalRow.notAcctForEmps+=o.report.SW_FIELDPERS_NOTACCT+o.report.WQ_FIELDPERS_NOTACCT,e.totalRow.cumPField+=o.FieldPYesSWTot+o.FieldPYesWQTot,e.totalRow.yesPField+=o.report.SW_YEST_FIELDPERS+o.report.WQ_YEST_FIELDPERS,e.totalRow.todPField+=o.report.SW_TOD_FIELDPERS+o.report.WQ_TOD_FIELDPERS,e.totalRow.tomPField+=o.report.SW_TMW_FIELDPERS+o.report.WQ_TMW_FIELDPERS,e.totalRow.cumPOffice+=o.OfficePYesSWTot+o.OfficePYesWQTot,e.totalRow.yesPOffice+=o.report.SW_YEST_OFFICEPERS+o.report.WQ_YEST_OFFICEPERS,e.totalRow.todPOffice+=o.report.SW_TOD_OFFICEPERS+o.report.WQ_TOD_OFFICEPERS,e.totalRow.tomPOffice+=o.report.SW_TMW_OFFICEPERS+o.report.WQ_TMW_OFFICEPERS,e.totalRow.truck+=o.report.SW_AUTOS_DEPL+o.report.WQ_AUTOS_DEPL,e.totalRow.boat+=o.report.SW_BOATS_DEPL+o.report.WQ_BOATS_DEPL,e.totalRow.other+=o.report.SW_OTHER_DEPL+o.report.WQ_OTHER_DEPL,e.totalRow.gageVisits+=o.report.GAGE_VISIT,e.totalRow.gagesDown+=o.report.GAGE_DOWN,e.totalRow.disCtoDate+=o.report.TOT_DISCHARGE_MEAS,e.totalRow.disCPlanned+=o.report.PLAN_DISCHARGE_MEAS,e.totalRow.CheckMeasToDate+=o.report.TOT_CHECK_MEAS,e.totalRow.CheckMeasPlanned+=o.report.PLAN_CHECK_MEAS,e.totalRow.indMeas=o.report.PLAN_INDIRECT_MEAS,e.totalRow.ratExt=o.report.RATING_EXTENS,e.totalRow.peaksOfRec+=o.report.GAGE_PEAK_RECORD,e.totalRow.QWGageVis+=o.report.QW_GAGE_VISIT,e.totalRow.contQWGageVis=o.report.QW_CONT_GAGEVISIT,e.totalRow.contQWGageDown=o.report.QW_GAGE_DOWN,e.totalRow.disQWSamples+=o.report.QW_DISCR_SAMPLES,e.totalRow.sedSamples+=o.report.COLL_SEDSAMPLES,e.totalRow.rdgPlan+=o.report.PLAN_RAPDEPL_GAGE,e.totalRow.rdgDep+=o.report.DEP_RAPDEPL_GAGE,e.totalRow.rdgRec+=o.report.REC_RAPDEPL_GAGE,e.totalRow.rdgLost+=o.report.LOST_RAPDEPL_GAGE,e.totalRow.waterPlan+=o.report.PLAN_WTRLEV_SENSOR,e.totalRow.waterDep+=o.report.DEP_WTRLEV_SENSOR,e.totalRow.waterRec+=o.report.REC_WTRLEV_SENSOR,e.totalRow.waterLost+=o.report.LOST_WTRLEV_SENSOR,e.totalRow.wavePlan+=o.report.PLAN_WV_SENS,e.totalRow.waveDep+=o.report.DEP_WV_SENS,e.totalRow.waveRec+=o.report.REC_WV_SENS,e.totalRow.waveLost+=o.report.LOST_WV_SENS,e.totalRow.baroPlan+=o.report.PLAN_BAROMETRIC,e.totalRow.baroDep+=o.report.DEP_BAROMETRIC,e.totalRow.baroRec+=o.report.REC_BAROMETRIC,e.totalRow.baroLost+=o.report.LOST_BAROMETRIC,e.totalRow.metPlan+=o.report.PLAN_METEOROLOGICAL,e.totalRow.metDep+=o.report.DEP_METEOROLOGICAL,e.totalRow.metRec+=o.report.REC_METEOROLOGICAL,e.totalRow.metLost+=o.report.LOST_METEOROLOGICAL,e.totalRow.hwmFlag+=o.report.HWM_FLAGGED,e.totalRow.hwmCol=o.report.HWM_COLLECTED,e.MetricDisplayModel.push(o)}e.GenRepEventModel={},e.GenRepEventModel.Event=e.EventName,e.GenRepEventModel.EventType=e.eventTypes.filter(function(t){return t.EVENT_TYPE_ID==e.EventName.EVENT_TYPE_ID})[0],e.GenRepEventModel.EventStat=e.eventStats.filter(function(t){return t.EVENT_STATUS_ID==e.EventName.EVENT_STATUS_ID})[0],e.GenRepEventModel.Coordinator=e.members.filter(function(t){return t.MEMBER_ID==e.GenRepEventModel.Event.EVENT_COORDINATOR})[0],e.GenRepEventModel.CoordAgency=e.agencies.filter(function(t){return t.AGENCY_ID==e.GenRepEventModel.Coordinator.AGENCY_ID})[0];var m=r.open({templateUrl:"MetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{thisReport:function(){return e.MetricDisplayModel},thisEvent:function(){return e.GenRepEventModel},theTotalRow:function(){return e.totalRow}},controller:function(e,t,n,o,a){e.Report=n,e.Event=o,e.totals=a,e.ok=function(){t.dismiss("cancel")}}});m.result.then(function(){})})}},e.displayContactsSum=function(t){if(t){var o=[];angular.forEach(e.Statemodel.value,function(e){o.push(e.STATE_ABBREV)});var s=o.join(", "),l=e.formatDate(e.genSummary.SUM_DATE);e.reportModel=[],a.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),a.defaults.headers.common.Accept="application/json",m.getReportwithContacts({Event:e.EventName.EVENT_ID,States:s,Date:l}).$promise.then(function(t){for(var n=0;n<t.length;n++){var o={};o.repID=t[n].Report.REPORTING_METRICS_ID,o.State=t[n].Report.STATE,o.REPORT_DATE=t[n].Report.REPORT_DATE;var a=e.members.filter(function(e){return e.MEMBER_ID==t[n].Report.MEMBER_ID})[0],s=e.agencies.filter(function(e){return e.AGENCY_ID==a.AGENCY_ID}),l={};l.FNAME=a.FNAME,l.FNAME=a.FNAME,l.EMAIL=a.EMAIL,l.PHONE=a.PHONE,l.AGENCYNAME=s.AGENCY_NAME,l.AGENCYADD=s.CITY+" "+s.STATE+" "+s.ZIP,o.submitter=l,o.depC=t[n].ReportContacts.filter(function(e){return"Deployed Staff"==e.TYPE})[0],o.genC=t[n].ReportContacts.filter(function(e){return"General"==e.TYPE})[0],o.inlC=t[n].ReportContacts.filter(function(e){return"Inland Flood"==e.TYPE})[0],o.coastC=t[n].ReportContacts.filter(function(e){return"Coastal Flood"==e.TYPE})[0],o.waterC=t[n].ReportContacts.filter(function(e){return"Water Quality"==e.TYPE})[0],e.reportModel.push(o)}setTimeout(function(){i()},3e3);var i=function(){var t=r.open({templateUrl:"ContactMetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{theseReports:function(){return e.reportModel},thisEvent:function(){return e.GenRepEventModel={},e.GenRepEventModel.Event=e.EventName,e.GenRepEventModel.EventType=e.eventTypes.filter(function(t){return t.EVENT_TYPE_ID==e.EventName.EVENT_TYPE_ID})[0],e.GenRepEventModel.EventStat=e.eventStats.filter(function(t){return t.EVENT_STATUS_ID==e.EventName.EVENT_STATUS_ID})[0],e.GenRepEventModel.Coordinator=e.members.filter(function(t){return t.MEMBER_ID==e.EventName.EVENT_COORDINATOR})[0],e.GenRepEventModel.CoordAgency=e.agencies.filter(function(t){return t.AGENCY_ID==e.GenRepEventModel.Coordinator.AGENCY_ID})[0],e.GenRepEventModel}},controller:function(e,t,n,o,a){e.Reports=o,e.Event=a,e.ok=function(){n.dismiss("cancel")}}});t.result.then(function(){})}})}},e.getCSVfile=function(t){t&&(a.defaults.headers.common.Accept="text/csv",m.getReportsCSV({Event:e.genSummary.EVENT_ID,States:e.StateAbbrevs,Date:e.genSummary.SUM_DATE}).$promise.then(function(e){var t=angular.element("<a/>"),n=e.join(""),o=new Blob([n],{type:"application/csv"}),a=URL.createObjectURL(o);t.href=a,t.download="report.csv",t.click()}),function(){console.log("error")})})}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("ProjAlertModalCtrl",["$scope","$uibModalInstance","ProjAlert",function(e,t,n){e.ProjAlertParts=n,e.ok=function(){t.dismiss("cancel")}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/deploymentType.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Sensor Deployment Type</th></tr></thead><tbody><tr ng-repeat="dt in depTypeList | orderBy: \'METHOD\'"><td style="white-space: nowrap"><form editable-form name="DTrowform" onaftersave="saveDepType($data, dt.DEPLOYMENT_TYPE_ID)" ng-show="DTrowform.$visible" class="form-buttons form-inline" shown="inserted == dt"><button type="submit" ng-disabled="DTrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="DTrowform.$waiting" ng-click="DTrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!DTrowform.$visible"><button class="btn btn-primary" ng-click="DTrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteDepType(dt)">del</button></div></td><td><div style="display:none"><span editable-text="dt.DEPLOYMENT_TYPE_ID" e-form="DTrowform" e-name="DEPLOYMENT_TYPE_ID">{{dt.DEPLOYMENT_TYPE_ID}}</span></div><span editable-text="dt.METHOD" e-name="METHOD" e-form="DTrowform">{{ dt.METHOD || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addDTButtonShowing" class="btn btn-primary" ng-click="showAddDTClicked()">Add New Sensor Deployment Type</button><div ng-show="showAddDTForm"><form class="form-horizontal" name="lookupForm.detTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="METHOD">Sensor Deployment Type:</label><div class="col-md-6"><input class="form-control" id="METHOD" name="METHOD" type="text" placeholder="" ng-model="newDT.METHOD" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddDepType(lookupForm.detTypeFm.$valid, newDT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindDT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'PRIORITY_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="METHOD">Sensor Deployment Type&nbsp;<a ng-click="sort_by(\'METHOD\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="dt in depTypeList | orderBy:sortingOrder:reverse"><td>{{ dt.METHOD || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("confirmReportModalCtrl",["$scope","$uibModalInstance",function(e,t){e.ok=function(){t.close()},e.cancel=function(){t.dismiss("cancel")}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/deploymentPriority.html",'<div ng-if="accountRole == \'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Deployment Priority</th></tr></thead><tbody><tr ng-repeat="dp in deployPriorityList | orderBy: \'PRIORITY_ID\'"><td style="white-space: nowrap"><form editable-form name="DProwform" onaftersave="saveDepPriority($data, dp.PRIORITY_ID)" ng-show="DProwform.$visible" class="form-buttons form-inline" shown="inserted == dp"><button type="submit" ng-disabled="DProwform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="DProwform.$waiting" ng-click="DProwform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!DProwform.$visible"><button class="btn btn-primary" ng-click="DProwform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteDepPriority(dp)">del</button></div></td><td><div style="display:none"><span editable-text="dp.PRIORITY_ID" e-form="DProwform" e-name="PRIORITY_ID">{{dp.PRIORITY_ID}}</span></div><span editable-text="dp.PRIORITY_NAME" e-name="PRIORITY_NAME" e-form="DProwform">{{ dp.PRIORITY_NAME || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addDPButtonShowing" class="btn btn-primary" ng-click="showAddDPClicked()">Add New Deployment Priority</button><div ng-show="showAddDPForm"><form class="form-horizontal" name="lookupForm.deploymentPriorityFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="TYPE">Deployment Priority:</label><div class="col-md-6"><input class="form-control" id="PRIORITY_NAME" name="PRIORITY_NAME" type="text" placeholder="" ng-model="newDP.PRIORITY_NAME" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddDepPriority(lookupForm.deploymentPriorityFm.$valid, newDP)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindDP()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'PRIORITY_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="PRIORITY_NAME">Deployment Priority&nbsp;<a ng-click="sort_by(\'PRIORITY_NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="dp in deployPriorityList | orderBy:sortingOrder:reverse"><td>{{ dp.PRIORITY_NAME || \'\' }}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("peakCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSitePeaks",function(e,t,n,o,a,r,s,l,i,d){void 0===t.get("STNCreds")||""===t.get("STNCreds")?(e.auth=!1,n.path("/login")):e.peakCount={total:d.length}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/contactType.html",'<div ng-if="accountRole ==\'Admin\'"><table class="table"><thead><tr><th style="width:0"></th><th>Contact Type</th></tr></thead><tbody><tr ng-repeat="ct in contactTypeList | orderBy: \'TYPE\'"><td style="white-space: nowrap"><form editable-form name="CTrowform" onaftersave="saveContactType($data, ct.CONTACT_TYPE_ID)" ng-show="CTrowform.$visible" class="form-buttons form-inline" shown="inserted == ct"><button type="submit" ng-disabled="CTrowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="CTrowform.$waiting" ng-click="CTrowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!CTrowform.$visible"><button class="btn btn-primary" ng-click="CTrowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteContactType(ct)">del</button></div></td><td><div style="display:none"><span editable-text="ct.CONTACT_TYPE_ID" e-form="CTrowform" e-name="CONTACT_TYPE_ID">{{ct.CONTACT_TYPE_ID}}</span></div><span editable-text="ct.TYPE" e-name="TYPE" e-form="CTrowform">{{ ct.TYPE || \'\' }}</span></td></tr></tbody></table><hr><button ng-show="addCTButtonShowing" class="btn btn-primary" ng-click="showAddCTClicked()">Add New Contact Type</button><div ng-show="showAddCTForm"><form class="form-horizontal" name="lookupForm.contactTypeFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="TYPE">Contact Type:</label><div class="col-md-6"><input class="form-control" id="TYPE" name="TYPE" type="text" placeholder="" ng-model="newCT.TYPE" required></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddContactType(lookupForm.contactTypeFm.$valid, newCT)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindCT()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'AGENCY_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="TYPE">Contact Type&nbsp;<a ng-click="sort_by(\'TYPE\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="ct in contactTypeList | orderBy:sortingOrder:reverse"><td>{{ ct.TYPE || \'\' }}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("resources/agency.html",'<div ng-if="accountRole ==\'Admin\'"><table class="table"><thead><tr><th></th><th>Agency Name</th><th>Address</th><th>City</th><th>State</th><th>Zip</th><th>Phone</th></tr></thead><tbody><tr ng-repeat="a in agencyList | orderBy: \'AGENCY_NAME\'"><td style="white-space: nowrap"><form editable-form name="Arowform" onaftersave="saveAgency($data, a.AGENCY_ID)" ng-show="Arowform.$visible" class="form-buttons form-inline" shown="inserted == a"><button type="submit" ng-disabled="Arowform.$waiting" class="btn btn-primary">save</button> <button type="button" ng-disabled="Arowform.$waiting" ng-click="Arowform.$cancel()" class="btn btn-default">cancel</button></form><div class="buttons" ng-show="!Arowform.$visible"><button class="btn btn-primary" ng-click="Arowform.$show()">edit</button> <button class="btn btn-danger" ng-click="deleteAgency(a)">del</button></div></td><td><div style="display:none"><span editable-text="a.AGENCY_ID" e-form="Arowform" e-name="AGENCY_ID">{{a.AGENCY_ID}}</span></div><span editable-text="a.AGENCY_NAME" e-name="AGENCY_NAME" e-form="Arowform">{{ a.AGENCY_NAME || \'\' }}</span></td><td><span editable-text="a.ADDRESS" e-name="ADDRESS" e-form="Arowform">{{ a.ADDRESS || \'\' }}</span></td><td><span editable-text="a.CITY" e-name="CITY" e-form="Arowform">{{ a.CITY || \'\' }}</span></td><td><span editable-select="a.STATE" e-name="STATE" e-form="Arowform" e-ng-options="s.STATE_ABBREV as s.STATE_ABBREV for s in stateList | orderBy: \'STATE_NAME\'">{{showStateAbbrev(a)}}</span></td><td><span editable-text="a.ZIP" e-name="ZIP" e-form="Arowform">{{a.ZIP || \'\'}}</span></td><td><span editable-text="a.PHONE" e-my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" e-name="PHONE" e-form="Arowform">{{a.PHONE || \'\'}}</span></td></tr></tbody></table><hr><button ng-show="addAgButtonShowing" class="btn btn-primary" ng-click="showAddAgClicked()">Add New Agency</button><div ng-show="showAddAgForm"><form class="form-horizontal" name="lookupForm.agencyFm"><fieldset><div class="form-group required"><label class="col-md-3 control-label req" for="AGENCY_NAME">Agency Name:</label><div class="col-md-6"><input class="form-control" id="AGENCY_NAME" name="AGENCY_NAME" type="text" placeholder="" ng-model="newAg.AGENCY_NAME" required></div></div><div class="form-group"><label class="col-md-3 control-label" for="ADDRESS">Address:</label><div class="col-md-6"><input class="form-control" id="ADDRESS" name="ADDRESS" type="text" placeholder="" ng-model="newAg.ADDRESS"></div></div><div class="form-group"><label class="col-md-3 control-label" for="CITY">City:</label><div class="col-md-6"><input class="form-control" id="CITY" name="CITY" type="text" placeholder="" ng-model="newAg.CITY"></div></div><div class="form-group"><label class="col-md-3 control-label" for="STATE">State:</label><div class="col-md-6"><select class="form-control" id="STATE" name="STATE" ng-model="newAg.STATE" ng-options="s.STATE_ABBREV as s.STATE_ABBREV for s in stateList | orderBy: \'STATE_NAME\'"><option value=""></option></select></div></div><div class="form-group"><label class="col-md-3 control-label" for="ZIP">Zip:</label><div class="col-md-6"><input class="form-control" id="ZIP" name="ZIP" type="text" placeholder="" ng-model="newAg.ZIP"></div></div><div class="form-group"><label class="col-md-3 control-label req" for="PHONE">Phone:</label><div class="col-md-6"><input class="form-control" id="PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="newAg.PHONE"></div></div><div class="form-group"><div class="col-md-2 col-md-offset-2"><span><button class="btn btn-primary" ng-click="AddAgency(lookupForm.agencyFm.$valid, newAg)">Add</button></span></div></div></fieldset></form><button class="btn btn-default center-block" style="margin-top:-48px" ng-click="NeverMindAg()">Never Mind</button></div></div><div ng-if="accountRole !=\'Admin\'"><script>var sortingOrder = \'AGENCY_NAME\';</script><table class="table table-striped table-condensed"><thead><tr><th class="AGENCY_NAME">Agency Name&nbsp;<a ng-click="sort_by(\'AGENCY_NAME\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="ADDRESS">Address&nbsp;<a ng-click="sort_by(\'ADDRESS\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="CITY">City&nbsp;<a ng-click="sort_by(\'CITY\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="STATE">State&nbsp;<a ng-click="sort_by(\'STATE\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="ZIP">Zip&nbsp;<a ng-click="sort_by(\'ZIP\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="PHONE">Phone&nbsp;<a ng-click="sort_by(\'PHONE\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="a in agencyList | orderBy:sortingOrder:reverse"><td>{{ a.AGENCY_NAME || \'\' }}</td><td>{{ a.ADDRESS || \'\' }}</td><td>{{ a.CITY || \'\' }}</td><td>{{a.STATE}}</td><td>{{a.ZIP || \'\'}}</td><td>{{a.PHONE || \'\'}}</td></tr></tbody></table></div>')}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("OPmodalCtrl",["$scope","$cookies","$http","$uibModalInstance","$uibModal","allDropdowns","thisOP","thisOPControls","opSite","OBJECTIVE_POINT","OP_CONTROL_IDENTIFIER",function(e,t,n,o,a,r,s,l,i,d,c){e.OPTypeList=r[0],e.HDList=r[1],e.HCollectMethodList=r[2],e.VDatumList=r[3],e.VCollectMethodList=r[4],e.OPQualityList=r[5],e.OP={},e.removeOPCarray=[],e.thisOPsite=i,e.addedIdentifiers=[],e.showControlIDinput=!1,e.DMS={},e.OPFiles=[],e.photoFiles=[],e.UnquantChecked=function(){1==e.OP.UNQUANTIFIED&&(e.OP.UNCERTAINTY="")};var p=function(e){var t=new Date;""!==e&&void 0!==e&&(t=new Date(e));var n=t.getFullYear(),o=t.getMonth(),a=("0"+t.getDate()).slice(-2),r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],s=new Date(r[o]+" "+a+", "+n);return s};"empty"!=s?(e.OP=angular.copy(s),e.OP.DATE_ESTABLISHED=p(e.OP.DATE_ESTABLISHED),null!==e.OP.DATE_RECOVERED&&(e.OP.DATE_RECOVERED=p(e.OP.DATE_RECOVERED)),l.length>0&&(e.addedIdentifiers=l,e.showControlIDinput=!0),d.getOPFiles({id:e.OP.OBJECTIVE_POINT_ID},function(t){e.OPFiles=t},function(e){toastr.error("Error getting OP files: "+e.statusText)})):(e.OP.LATITUDE_DD=i.LATITUDE_DD,e.OP.LONGITUDE_DD=i.LONGITUDE_DD,e.OP.HDATUM_ID=i.HDATUM_ID,e.OP.DATE_ESTABLISHED=p("")),e.OP.decDegORdms="dd",e.OP.FTorMETER="ft",e.OP.FTorCM="ft",e.addNewIdentifier=function(){e.addedIdentifiers.push({OBJECTIVE_POINT_ID:e.OP.OBJECTIVE_POINT_ID,IDENTIFIER:"",IDENTIFIER_TYPE:""}),e.showControlIDinput=!0},e.datepickrs={},e.open=function(t,n){t.preventDefault(),t.stopPropagation(),e.datepickrs[n]=!0},e.isNum=function(e){var t=e||window.event,n=t.keyCode||t.which;46!=n&&45!=n&&n>31&&(48>n||n>57)&&(t.returnValue=!1,t.preventDefault&&t.preventDefault())};var u=function(e,t,n){var o=0;return 0>e?(o=-1*e+1*t/60+1*n/3600,(-1*o).toFixed(5)):(o=1*e+1*t/60+1*n/3600,o.toFixed(5))},m=function(e){0>e&&(e=e.toString(),e=e.substring(1));var t=Math.floor(e),n=60*(e-t),o=Math.floor(n),a=(60*(n-o)).toFixed(3);return""+t+":"+o+":"+a};e.latLongChange=function(){if("dd"==e.OP.decDegORdms)void 0!==e.DMS.LADeg&&(e.OP.LATITUDE_DD=u(e.DMS.LADeg,e.DMS.LAMin,e.DMS.LASec),
e.OP.LONGITUDE_DD=u(e.DMS.LODeg,e.DMS.LOMin,e.DMS.LOSec),e.DMS={});else if(void 0!==e.OP.LATITUDE_DD){var t=m(e.OP.LATITUDE_DD).toString(),n=t.split(":");e.DMS.LADeg=n[0],e.DMS.LAMin=n[1],e.DMS.LASec=n[2];var o=m(e.OP.LONGITUDE_DD),a=o.split(":");e.DMS.LODeg=-1*a[0],e.DMS.LOMin=a[1],e.DMS.LOSec=a[2],e.OP.LATITUDE_DD=void 0,e.OP.LONGITUDE_DD=void 0}};var E=function(e){var t={OBJECTIVE_POINT_ID:void 0!==e.OBJECTIVE_POINT_ID?e.OBJECTIVE_POINT_ID:0,NAME:e.NAME,DESCRIPTION:e.DESCRIPTION,ELEV_FT:void 0!==e.ELEV_FT?e.ELEV_FT:null,DATE_ESTABLISHED:e.DATE_ESTABLISHED,OP_IS_DESTROYED:void 0!==e.OP_IS_DESTROYED?e.OP_IS_DESTROYED:0,OP_NOTES:void 0!==e.OP_NOTES?e.OP_NOTES:null,SITE_ID:e.SITE_ID,VDATUM_ID:void 0!==e.VDATUM_ID?e.VDATUM_ID:0,LATITUDE_DD:e.LATITUDE_DD,LONGITUDE_DD:e.LONGITUDE_DD,HDATUM_ID:void 0!==e.HDATUM_ID?e.HDATUM_ID:0,HCOLLECT_METHOD_ID:void 0!==e.HCOLLECT_METHOD_ID?e.HCOLLECT_METHOD_ID:0,VCOLLECT_METHOD_ID:void 0!==e.VCOLLECT_METHOD_ID?e.VCOLLECT_METHOD_ID:0,OP_TYPE_ID:e.OP_TYPE_ID,DATE_RECOVERED:void 0!==e.DATE_RECOVERED?e.DATE_RECOVERED:null,UNCERTAINTY:void 0!==e.UNCERTAINTY?e.UNCERTAINTY:null,UNQUANTIFIED:void 0!==e.UNQUANTIFIED?e.UNQUANTIFIED:null,OP_QUALITY_ID:void 0!==e.OP_QUALITY_ID?e.OP_QUALITY_ID:null};return t};e.cancel=function(){o.dismiss("cancel")};var f=function(t){"meter"==t.FTorMETER&&(e.OP.FTorMETER="ft",e.OP.ELEV_FT=3.2808*e.OP.ELEV_FT),"cm"==t.FTorCM&&(e.OP.FTorCM="ft",e.OP.UNCERTAINTY=e.OP.UNCERTAINTY/30.48),"dms"==t.decDegORdms&&(e.OP.decDegORdms="dd",e.OP.LATITUDE_DD=u(e.DMS.LADeg,e.DMS.LAMin,e.DMS.LASec),e.OP.LONGITUDE_DD=u(e.DMS.LODeg,e.DMS.LOMin,e.DMS.LOSec),e.DMS={},e.OP.SITE_ID=e.thisOPsite.SITE_ID)};e.create=function(){if(this.OPForm.$valid){n.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),n.defaults.headers.common.Accept="application/json";var a={};f(e.OP);var r=E(e.OP);d.save(r,function(t){if(toastr.success("Objective Point created"),a=t,e.addedIdentifiers.length>0)for(var n=0;n<e.addedIdentifiers.length;n++)d.createOPControlID({id:t.OBJECTIVE_POINT_ID},e.addedIdentifiers[n]).$promise}).$promise.then(function(){var e=[a,"created"];o.close(e)})}},e.RemoveID=function(t){var n=e.addedIdentifiers.indexOf(t);void 0!==t.OP_CONTROL_IDENTIFIER_ID?(e.removeOPCarray.push(t),e.addedIdentifiers.splice(n,1)):e.addedIdentifiers.splice(n,1)},e.save=function(){if(e.OPForm.$valid){n.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),n.defaults.headers.common.Accept="application/json";var a={};if(e.addedIdentifiers.length>0)for(var r=0;r<e.addedIdentifiers.length;r++)void 0!==e.addedIdentifiers[r].OP_CONTROL_IDENTIFIER_ID?c.update({id:e.addedIdentifiers[r].OP_CONTROL_IDENTIFIER_ID},e.addedIdentifiers[r]).$promise:d.createOPControlID({id:e.OP.OBJECTIVE_POINT_ID},e.addedIdentifiers[r]).$promise;if(e.removeOPCarray.length>0)for(var s=0;s<e.removeOPCarray.length;s++)c["delete"]({id:e.removeOPCarray[s].OP_CONTROL_IDENTIFIER_ID}).$promise;f(e.OP);var l=E(e.OP);d.update({id:l.OBJECTIVE_POINT_ID},l,function(e){toastr.success("Objective Point updated"),a=e}).$promise.then(function(){var e=[a,"updated"];o.close(e)})}},e.deleteOP=function(){var r=a.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return e.OP},what:function(){return"Objective Point"}}});r.result.then(function(e){n.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),d["delete"]({id:e.OBJECTIVE_POINT_ID},e).$promise.then(function(){toastr.success("Objective Point Removed");var e=["de","deleted"];o.close(e)},function(e){toastr.error("Error: "+e.statusText)})},function(){})}}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("objectivePointCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","OBJECTIVE_POINT","thisSite","thisSiteOPs","allOPTypes","allHorDatums","allHorCollMethods","allVertDatums","allVertColMethods","allOPQualities",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v){void 0===t.get("STNCreds")||""===t.get("STNCreds")?(e.auth=!1,n.path("/login")):(e.opCount={total:c.length},e.SiteObjectivePoints=c,e.showOPModal=function(t){var n=[p,u,m,E,f,v],o=(e.SiteObjectivePoints.indexOf(t),r.open({templateUrl:"OPmodal.html",controller:"OPmodalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropdowns:function(){return n},thisOP:function(){return 0!==t?t:"empty"},thisOPControls:function(){return 0!==t?i.getOPControls({id:t.OBJECTIVE_POINT_ID}).$promise:void 0},opSite:function(){return d}}}));o.result.then(function(n){if("created"==n[1]&&(e.SiteObjectivePoints.push(n[0]),e.opCount.total=e.SiteObjectivePoints.length),"updated"==n[1]){var o=e.SiteObjectivePoints.indexOf(t);e.SiteObjectivePoints[o]=n[0]}if("deleted"==n[1]){var a=e.SiteObjectivePoints.indexOf(t);e.SiteObjectivePoints.splice(a,1),e.opCount.total=e.SiteObjectivePoints.length}})})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("sensor/sensorList.html",'<uib-accordion close-others="false"><uib-accordion-group is-open="status.sensorOpen"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.sensorOpen, \'glyphicon-chevron-right\': !status.sensorOpen}"></i> <span>Sensors</span> <span class="badge pull-right">{{sensorCount.total}}</span></uib-accordion-heading><div class="col-md-12" ng-show="!sessionEventExists" style="border:solid 1px red">To deploy or retrieve a sensor, first choose an Event above.</div><label class="col-md-9">-- Proposed Sensors --</label><div class="btn-group pull-right"><div class="btn-group"><button type="button" class="borderLess" ng-click="showHideProposed()" tooltip-placement="right" uib-tooltip="Show/Hide Proposed Sensors"><span class="glyphicon glyphicon-plus"></span></button></div></div><div class="col-md-10" style="border:1px solid gray; padding:3px" ng-show="showProposed"><ul style="padding-left:0"><li style="list-style:none" ng-repeat="ps in deployTypeList"><input type="checkbox" ng-model="ps.selected" ng-click="" ng-value="{{ps.selected}}"> <span>{{ps.METHOD}}</span></li></ul><div class="col-md-12 center-block"><button type="button" class="btn btn-primary center-block" ng-click="AddProposed()">Add</button></div></div><br clear="all"><div ng-repeat="s in SiteSensors"><div ng-if="s.InstrumentStats[0].STATUS_TYPE_ID == 4"><ul><li style="list-style:none;padding-bottom: 15px"><span class="col-sm-10 borderLess">{{s.Instrument.Deployment_Type}} Sensor</span><div ng-show="sessionEventExists" class="pull-right"><button type="button" class="btn btn-primary" style="padding:0" ng-click="showSensorModal(s)" tooltip-placement="right" uib-tooltip="Deploy this proposed sensor"><span>Deploy</span></button></div></li></ul></div></div><label class="col-md-9">-- Deployed Sensors --</label><div ng-show="sessionEventExists" class="btn-group pull-right"><div class="btn-group"><button type="button" class="borderLess" ng-click="showSensorModal(0)" tooltip-placement="right" uib-tooltip="Deploy a new Sensor"><span class="glyphicon glyphicon-plus"></span></button></div></div><br clear="all"><div ng-repeat="s in SiteSensors"><div ng-if="s.InstrumentStats[0].STATUS_TYPE_ID == 1"><ul><li style="list-style:none;padding-bottom: 15px"><span class="col-sm-9 borderLess"><a class="btn borderLess" ng-click="showSensorModal(s)">{{s.Instrument.Deployment_Type}} Sensor</a></span><div ng-show="sessionEventExists" class="pull-right"><button type="button" class="btn btn-primary" style="padding:0" ng-click="showRetrieveModal(s)" tooltip-placement="right" uib-tooltip="Retrieve this sensor"><span>Retrieve</span></button></div></li></ul></div></div><label class="col-md-9">-- Retrieved Sensors --</label><br clear="all"><div ng-repeat="s in SiteSensors"><div ng-if="s.InstrumentStats[0].STATUS_TYPE_ID == 2"><ul><li style="list-style:none;padding-bottom: 15px"><span class="col-sm-9 borderLess"><a class="btn borderLess" ng-click="showFullSensorModal(s)">{{s.Instrument.Deployment_Type}} Sensor</a></span></li></ul></div></div></uib-accordion-group></uib-accordion>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("peak/peakList.html",'<uib-accordion close-others="false"><uib-accordion-group is-open="status.peakOpen"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.peakOpen, \'glyphicon-chevron-right\': !status.peakOpen}"></i> <span>Peaks</span> <span class="badge pull-right">{{peakCount.total}}</span></uib-accordion-heading><div class="btn-group pull-right"><div class="btn-group"><button style="background:none" ng-click="showOPModal(0)" class="btn"><span class="glyphicon glyphicon-plus"></span></button></div></div><ul><li>test1</li><li>test2</li><li>test2</li></ul></uib-accordion-group></uib-accordion>')}])}(),function(){"use strict";var e=angular.module("SettingsControllers");e.controller("memberInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$stateParams","$filter","MEMBER","thisMember",function(e,t,n,o,a,r,s,l,i){void 0===t.get("STNCreds")||""===t.get("STNCreds")?(e.auth=!1,n.path("/login")):(e.aMember={},e.matchingUsers=!0,e.DeleteMember=function(r){var s=a.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return r},what:function(){return"Member"}}});s.result.then(function(a){o.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),l.deleteMember({id:a.MEMBER_ID},function(t){var n={};n.MEMBER_ID=a.MEMBER_ID,n.Name=a.FNAME+" "+a.LNAME;var o=e.agencyList.filter(function(e){return e.AGENCY_ID==a.AGENCY_ID})[0],r=e.roleList.filter(function(e){return e.ROLE_ID==a.ROLE_ID})[0];n.Agency=o.AGENCY_NAME,n.Role=r.ROLE_NAME,e.memberList.splice(e.memberList.indexOf(n),1),toastr.success("Member Deleted")},function(e){toastr.error("Error: "+e.statusText)}).$promise.then(function(){n.path("/Members/MembersList").replace()})})},e.pass={newP:"",confirmP:""},e.newPass="",void 0!==i?(e.matchingUsers=r.id==e.loggedInUser.ID?!0:!1,e.aMember=i,e.aMember.Role=e.roleList.filter(function(t){return t.ROLE_ID==e.aMember.ROLE_ID})[0].ROLE_NAME,e.changePass=!1,e.SaveOnBlur=function(n){if(n)o.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),o.defaults.headers.common.Accept="application/json",l.update({id:e.aMember.MEMBER_ID},e.aMember,function(e){toastr.success("Member Updated")},function(e){toastr.error("Error: "+e.statusText)});else{a.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function(e,t){e.ok=function(){t.close()}},size:"sm"})}},e.changeMyPassBtn=function(t){e.changePass=e.changePass===!1?!0:!1},e.ChangePassword=function(){if(""===e.pass.newP||""===e.pass.confirmP){a.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must first enter a new password.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function(e,t){e.ok=function(){t.close()}},size:"sm"})}else l.changePW({username:e.aMember.USERNAME,newPass:e.pass.newP},function(n){if(toastr.success("Password Updated"),e.aMember.MEMBER_ID==e.loggedInUser.MEMBER_ID){var o=btoa(e.aMember.USERNAME.concat(":",e.pass.newP));t.put("STNCreds",o),t.put("STNUsername",e.aMember.USERNAME),t.put("usersName",e.loggedInUser.Name),t.put("mID",e.aMember.MEMBER_ID);var a;switch(e.aMember.ROLE_ID){case 1:a="Admin";break;case 2:a="Manager";break;case 3:a="Field";break;case 4:a="Public";break;default:a="CitizenManager"}t.put("usersRole",a)}e.changePass=!1,e.pass.newP="",e.pass.confirmP=""},function(e){toastr.error("Error: "+e.statusText)})},e.DontChangePass=function(){e.changePass=!1}):e.save=function(a){a&&(o.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),o.defaults.headers.common.Accept="application/json",l.addMember({pass:e.pass.confirmP},e.aMember,function(t){toastr.success("Member Created");var n={};n.MEMBER_ID=t.MEMBER_ID,n.Name=t.FNAME+" "+t.LNAME;var o=e.agencyList.filter(function(e){return e.AGENCY_ID==t.AGENCY_ID})[0],a=e.roleList.filter(function(e){return e.ROLE_ID==t.ROLE_ID})[0];n.Agency=o.AGENCY_NAME,n.Role=a.ROLE_NAME,e.memberList.push(n)}).$promise.then(function(){n.path("/Members/MembersList").replace()}))})}])}(),function(){"use strict";var e=angular.module("SettingsControllers");e.controller("memberCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","MEMBER","allRoles","allAgencies",function(e,t,n,o,a,r,s,l,i){void 0===n.get("STNCreds")||""===n.get("STNCreds")?(e.auth=!1,o.path("/login")):(t.thisPage="Settings/Members",e.sort_by=function(t){e.sortingOrder==t&&(e.reverse=!e.reverse),e.sortingOrder=t,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+t+" i").removeClass().addClass(e.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},e.loggedInUser={},e.loggedInUser.Name=n.get("usersName"),e.loggedInUser.ID=n.get("mID"),e.loggedInUser.Role=n.get("usersRole"),e.roleList=l,e.agencyList=i,a.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),a.defaults.headers.common.Accept="application/json",s.getAll().$promise.then(function(t){e.memberList=[];for(var n=0;n<t.length;n++){var o={};o.MEMBER_ID=t[n].MEMBER_ID,o.Name=t[n].FNAME+" "+t[n].LNAME;var a=e.agencyList.filter(function(e){return e.AGENCY_ID==t[n].AGENCY_ID})[0],r=e.roleList.filter(function(e){return e.ROLE_ID==t[n].ROLE_ID})[0];o.Agency=a.AGENCY_NAME,o.Role=r.ROLE_NAME,e.memberList.push(o)}}))}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("reporting/submitReport.html",'<uib-accordion close-others="false"><form name="fullReportForm.submit"><uib-accordion-group heading="Section 1: Start Report or Choose Incomplete Report to Finish" is-open="true"><div class="pull-left col-md-7"><div class="row"><button ng-show="newReport.COMPLETE != undefined && newReport.COMPLETE == 1">click here to start over</button><div class="form-group col-md-12 required"><label class="col-md-12 control-label req" for="REPORT_DATE">Date being reported:</label><div ng-if="!isCompleted" class="col-md-6 input-group" style="padding-left:15px;padding-right:15px"><input datepicker-append-to-body="true" class="form-control" id="REPORT_DATE" name="rd" type="text" uib-datepicker-popup="MMMM dd, yyyy" is-open="datepickrs.rd" ng-model="newReport.REPORT_DATE" required> <span class="input-group-btn"><button class="btn btn-default" ng-click="open($event, \'rd\')"><i class="glyphicon glyphicon-calendar"></button></span></div><div ng-if="isCompleted" class="col-md-6"><span>{{newReport.REPORT_DATE | date: MM/dd/yyyy}}</span></div></div><div class="form-group col-md-12 required"><label class="col-md-12 control-label req" for="EVENT_ID">Event:</label><div class="col-md-6"><select ng-hide="isCompleted" class="form-control" id="EVENT_ID" name="EVENT_ID" ng-model="newReport.EVENT_ID" ng-options="e.EVENT_ID as e.EVENT_NAME for e in events" required><option value="">Select an event</option></select><span ng-show="isCompleted">{{newReport.EVENT_NAME}}</span></div></div><div class="form-group col-md-12 required"><label class="col-md-12 control-label req" for="STATE">State:</label><div class="col-md-6"><select ng-hide="isCompleted" class="form-control" id="STATE" name="STATE" ng-model="newReport.STATE" ng-options="s.STATE_ABBREV as s.STATE_NAME for s in states" required><option value="">Select a state</option></select><span ng-show="isCompleted">{{newReport.STATE}}</span></div></div></div><br><div ng-hide="isCompleted" class="row"><div style="margin:10px"><button type="button" class="btn btn-primary large" ng-click="populateYestTots(newReport.REPORT_DATE, newReport.EVENT_ID, newReport.STATE_ABBREV)">Populate Personnel, Instrumentation and Contacts for Yesterday (in the below sections)</button></div></div></div><div ng-hide="isCompleted" style="border-left: solid thin black;padding-left:3em" class="container container-fluid col-md-5 pull-right"><label>Incomplete Reports.</label><ul ng-show="memberIncompletes.length > 0"><li ng-repeat="ir in memberIncompletes | orderBy: \'-REPORT_DATE\'"><a sref="#" style="cursor:pointer" ng-click="getIncompleteReport($this)">{{ir.REPORT_DATE | date: MM/dd/yyyy}}</a></li></ul><span ng-show="memberIncompletes.length == 0">No incomplete reports to show.</span></div></uib-accordion-group><uib-accordion-group heading="Section 2: Personnel and Vehicle Counts" is-disabled="disabled"><table class="table"><tr><td></td><td></td><td style="font-family: \'BryantBold\'">Surfacewater</td><td style="font-family: \'BryantBold\'">Water Quality and Other</td></tr><tr><td colspan="2"><span ng-if="!isCompleted"><input type="hidden" name="newReport.REPORT_ID" ng-model="newReport.REPORT_ID"></span> <span class="required">Employees not accounted for</span></td><td><input ng-readonly="isCompleted" class="form-control" id="SW_empl" name="newReport.SW_FIELDPERS_NOTACCT" ng-model="newReport.SW_FIELDPERS_NOTACCT" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="WQ_empl" name="newReport.WQ_FIELDPERS_NOTACCT" ng-model="newReport.WQ_FIELDPERS_NOTACCT" type="text" numeric-only required></td></tr><tr><td rowspan="3"><span>Personnel in<br>the field</span></td><td><span class="required">Yesterday</span></td><td><input ng-readonly="isCompleted" class="form-control" id="pInFieldYestSurf" name="newReport.SW_YEST_FIELDPERS" ng-model="newReport.SW_YEST_FIELDPERS" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="pInFieldYestWQ" name="newReport.WQ_YEST_FIELDPERS" ng-model="newReport.WQ_YEST_FIELDPERS" type="text" numeric-only required></td></tr><tr><td><span class="required">Today</span></td><td><input ng-readonly="isCompleted" class="form-control" id="pInFieldTodaySurf" name="newReport.SW_TOD_FIELDPERS" ng-model="newReport.SW_TOD_FIELDPERS" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="pInFieldTodayWQ" name="newReport.WQ_TOD_FIELDPERS" ng-model="newReport.WQ_TOD_FIELDPERS" type="text" numeric-only required></td></tr><tr><td><span class="required">Tomorrow</span></td><td><input ng-readonly="isCompleted" class="form-control" id="pInFieldTomorrowSurf" name="newReport.SW_TMW_FIELDPERS" ng-model="newReport.SW_TMW_FIELDPERS" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="pInFieldTomorrowWQ" name="newReport.WQ_TMW_FIELDPERS" ng-model="newReport.WQ_TMW_FIELDPERS" type="text" numeric-only required></td></tr><tr><td rowspan="3"><span>Personnel in<br>the office</span></td><td><span class="required">Yesterday</span></td><td><input ng-readonly="isCompleted" class="form-control" id="pInOfficeYestSurf" name="newReport.SW_YEST_OFFICEPERS" ng-model="newReport.SW_YEST_OFFICEPERS" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="pInOfficeYestWQ" name="newReport.WQ_YEST_OFFICEPERS" ng-model="newReport.WQ_YEST_OFFICEPERS" type="text" numeric-only required></td></tr><tr><td><span class="required">Today</span></td><td><input ng-readonly="isCompleted" class="form-control" id="pInOfficeTodaySurf" name="newReport.SW_TOD_OFFICEPERS" ng-model="newReport.SW_TOD_OFFICEPERS" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="pInOfficeTodayWQ" name="newReport.WQ_TOD_OFFICEPERS" ng-model="newReport.WQ_TOD_OFFICEPERS" type="text" numeric-only required></td></tr><tr><td><span class="required">Tomorrow</span></td><td><input ng-readonly="isCompleted" class="form-control" id="pInOfficeTomorrowSurf" name="newReport.SW_TMW_OFFICEPERS" ng-model="newReport.SW_TMW_OFFICEPERS" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="pInOfficeTomorrowWQ" name="newReport.WQ_TMW_OFFICEPERS" ng-model="newReport.WQ_TMW_OFFICEPERS" type="text" numeric-only required></td></tr><tr><td rowspan="3"><span>Vehicles<br>deployed</span></td><td><span class="required">Trucks & Cars</span></td><td><input ng-readonly="isCompleted" class="form-control" id="trNcarsSurf" name="newReport.SW_AUTOS_DEPL" ng-model="newReport.SW_AUTOS_DEPL" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="trNcarsWQ" name="newReport.WQ_AUTOS_DEPL" ng-model="newReport.WQ_AUTOS_DEPL" type="text" numeric-only required></td></tr><tr><td><span class="required">Boats</span></td><td><input ng-readonly="isCompleted" class="form-control" id="boatsSurf" name="newReport.SW_BOATS_DEPL" ng-model="newReport.SW_BOATS_DEPL" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="boatsWQ" name="newReport.WQ_BOATS_DEPL" ng-model="newReport.WQ_BOATS_DEPL" type="text" numeric-only required></td></tr><tr><td><span class="required">Other</span></td><td><input ng-readonly="isCompleted" class="form-control" id="otherVehSurf" name="newReport.SW_OTHER_DEPL" ng-model="newReport.SW_OTHER_DEPL" type="text" numeric-only required></td><td><input ng-readonly="isCompleted" class="form-control" id="otherVehWQ" name="newReport.WQ_OTHER_DEPL" ng-model="newReport.WQ_OTHER_DEPL" type="text" numeric-only required></td></tr></table></uib-accordion-group><uib-accordion-group heading="Section 3: Instrumentation & Sampling Counts" is-disabled="disabled"><table class="table"><tr><td colspan="2" class="col-md-5"><span class="required">Gage visits (cumulative)</span></td><td colspan="2" class="col-md-3"><input ng-readonly="isCompleted" class="form-control" id="gageVisits" name="newReport.GAGE_VISIT" ng-model="newReport.GAGE_VISIT" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Gages down at present</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="gagesDown" name="newReport.GAGE_DOWN" ng-model="newReport.GAGE_DOWN" type="text" numeric-only required></td></tr><tr><td rowspan="2"><span>Discharge measurements</span></td><td><span class="required">To date</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="dischMeasToDate" name="newReport.TOT_DISCHARGE_MEAS" ng-model="newReport.TOT_DISCHARGE_MEAS" type="text" numeric-only required></td></tr><tr><td><span class="required">Planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="dischMeasPlanned" name="newReport.PLAN_DISCHARGE_MEAS" ng-model="newReport.PLAN_DISCHARGE_MEAS" type="text" numeric-only required></td></tr><tr><td rowspan="2"><span>Check measurements</span></td><td><span class="required">To Date</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="chkMeasToDate" name="newReport.TOT_CHECK_MEAS" ng-model="newReport.TOT_CHECK_MEAS" type="text" numeric-only required></td></tr><tr><td><span class="required">Planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="chkMeasPlanned" name="newReport.PLAN_CHECK_MEAS" ng-model="newReport.PLAN_CHECK_MEAS" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Indirect measurements planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="indMeasPlan" name="newReport.PLAN_INDIRECT_MEAS" ng-model="newReport.PLAN_INDIRECT_MEAS" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Rating extensions</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="rateExt" name="newReport.RATING_EXTENS" ng-model="newReport.RATING_EXTENS" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Peaks of record on gages to date<br>( &#62; 20 years of record)</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="peaks" name="newReport.GAGE_PEAK_RECORD" ng-model="newReport.GAGE_PEAK_RECORD" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Rapid Deployment gages to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="rdgPlanned" name="newReport.PLAN_RAPDEPL_GAGE" ng-model="newReport.PLAN_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="rdgDeployed" name="newReport.DEP_RAPDEPL_GAGE" readonly="readonly" ng-model="newReport.DEP_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="rdgRecovered" name="newReport.REC_RAPDEPL_GAGE" readonly="readonly" ng-model="newReport.REC_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="rdgLost" name="newReport.LOST_RAPDEPL_GAGE" readonly="readonly" ng-model="newReport.LOST_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Water Level Sensors to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="wlsPlanned" name="newReport.PLAN_WTRLEV_SENSOR" ng-model="newReport.PLAN_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="wlsDeployed" name="newReport.DEP_WTRLEV_SENSOR" readonly="readonly" ng-model="newReport.DEP_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="wlsRecovered" name="newReport.REC_WTRLEV_SENSOR" readonly="readonly" ng-model="newReport.REC_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="wlsLost" name="newReport.LOST_WTRLEV_SENSOR" readonly="readonly" ng-model="newReport.LOST_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Wave Sensors to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="wsPlanned" name="newReport.PLAN_WV_SENS" ng-model="newReport.PLAN_WV_SENS" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="wsDeployed" name="newReport.DEP_WV_SENS" readonly="readonly" ng-model="newReport.DEP_WV_SENS" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="wsRecovered" name="newReport.REC_WV_SENS" readonly="readonly" ng-model="newReport.REC_WV_SENS" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="wsLost" name="newReport.LOST_WV_SENS" readonly="readonly" ng-model="newReport.LOST_WV_SENS" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Barometers to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="barPlanned" name="newReport.PLAN_BAROMETRIC" ng-model="newReport.PLAN_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="barDeployed" name="newReport.DEP_BAROMETRIC" readonly="readonly" ng-model="newReport.DEP_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="barRecovered" name="newReport.REC_BAROMETRIC" readonly="readonly" ng-model="newReport.REC_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="barLost" name="newReport.LOST_BAROMETRIC" readonly="readonly" ng-model="newReport.LOST_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Meteorological Sensors to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="msPlanned" name="newReport.PLAN_METEOROLOGICAL" ng-model="newReport.PLAN_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="msDeployed" name="newReport.DEP_METEOROLOGICAL" readonly="readonly" ng-model="newReport.DEP_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="msRecovered" name="newReport.REC_METEOROLOGICAL" readonly="readonly" ng-model="newReport.REC_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="msLost" name="newReport.LOST_METEOROLOGICAL" readonly="readonly" ng-model="newReport.LOST_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td rowspan="2"><span>Highwater Mark to date</span></td><td><span>Flagged</span></td><td colspan="2"><input class="form-control" id="hwmFlagged" name="newReport.HWM_FLAGGED" readonly="readonly" ng-model="newReport.HWM_FLAGGED" type="text" numeric-only required></td></tr><tr><td><span>Collected</span></td><td colspan="2"><input class="form-control" id="hwmCollected" name="newReport.HWM_COLLECTED" readonly="readonly" ng-model="newReport.HWM_COLLECTED" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">QW Gage visits (cumulative)</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="qwGageVisit" name="newReport.QW_GAGE_VISIT" ng-model="newReport.QW_GAGE_VISIT" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Continuous QW Gages visited</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="contQwGageVisit" name="newReport.QW_CONT_GAGEVISIT" ng-model="newReport.QW_CONT_GAGEVISIT" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Continuous QW Gages down</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="qwGagesDown" name="newReport.QW_GAGE_DOWN" ng-model="newReport.QW_GAGE_DOWN" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Discrete QW samples collected</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="qwSamplesCol" name="newReport.QW_DISCR_SAMPLES" ng-model="newReport.QW_DISCR_SAMPLES" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Sediment samples collected</span></td><td colspan="2"><input ng-readonly="isCompleted" class="form-control" id="sedSamplesCol" name="newReport.COLL_SEDSAMPLES" ng-model="newReport.COLL_SEDSAMPLES" type="text" numeric-only required></td></tr></table></uib-accordion-group><uib-accordion-group heading="Section 4: Notes" is-disabled="disabled"><div>Notes detailing the day\'s field activities (optional)</div><textarea ng-readonly="isCompleted" class="form-control" id="NOTES" type="text" rows="5" cols="90" ng-model="newReport.NOTES">\n            <div>*Limit 2000 characters</div>\n        </uib-accordion-group>\n\n        \n        <uib-accordion-group heading="Section 5: Contact Information" is-disabled="disabled">\n            <div><b>Submitter</b></div>\n            <div><span class="col-md-3">Name:</span><span>{{MemberLoggedIn.FNAME}} {{MemberLoggedIn.LNAME}}</span></div>\n            <div><span class="col-md-3">Phone</span><span>{{MemberLoggedIn.PHONE}}</span></div>\n            <div><span class="col-md-3">Email</span><span>{{MemberLoggedIn.EMAIL}}</span></div>\n            <div><span class="col-md-3">Office Name</span><span>{{MemberLoggedIn.AGENCY_NAME}}</span></div>\n            <div><span class="col-md-3">Office Address</span><span>{{MemberLoggedIn.AGENCY_ADDRESS}}</span></div>\n\n            <h3>Event Contacts</h3>\n\n            \n            <div><b>Deployed Staff (required)</b></div>\n            <div class="col-sm-12" style="margin-bottom:15px">\n                <div class="col-md-3 form-group required">\n                    <span class="col-md-12 control-label req" for="FNAME">First Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="D_FNAME" name="FNAME" type="text" ng-model="DeployStaff.FNAME" required>\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group required">\n                    <span class="col-md-12 control-label req" for="LNAME">Last Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="D_LNAME" name="LNAME" type="text" ng-model="DeployStaff.LNAME" required>\n                    </div>\n                </div>\n\n                <div class="col-md-4 form-group required">\n                    <span class="col-md-12 control-label req" for="EMAIL">Email:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="D_EMAIL" name="EMAIL" type="email" ng-model="DeployStaff.EMAIL" required>\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group required">\n                    <span class="col-md-12 control-label req" for="PHONE">Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="D_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="DeployStaff.PHONE" required>\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="D_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="DeployStaff.ALTERNATE_PHONE">\n                    </div>\n                </div>\n            </div>\n\n            \n            <div><b>General (optional)</b></div>\n            <div class="col-sm-12" style="margin-bottom:15px">\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="FNAME">First Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="G_FNAME" name="FNAME" type="text" ng-model="GenStaff.FNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="G_LNAME" name="LNAME" type="text" ng-model="GenStaff.LNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-4 form-group">\n                    <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="G_EMAIL" name="EMAIL" type="email" ng-model="GenStaff.EMAIL">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="G_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="GenStaff.PHONE">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="G_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="GenStaff.ALTERNATE_PHONE">\n                    </div>\n                </div>\n            </div>\n\n            \n            <div><b>Inland Flood (optional)</b></div>\n            <div class="col-sm-12" style="margin-bottom:15px">\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="FNAME">First Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="I_FNAME" name="FNAME" type="text" ng-model="InlandStaff.FNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="I_LNAME" name="LNAME" type="text" ng-model="InlandStaff.LNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-4 form-group">\n                    <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="I_EMAIL" name="EMAIL" type="email" ng-model="InlandStaff.EMAIL">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="I_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="InlandStaff.PHONE">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="I_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="InlandStaff.ALTERNATE_PHONE">\n                    </div>\n                </div>\n            </div>\n\n            \n            <div><b>Coastal Flood (optional)</b></div>\n            <div class="col-sm-12" style="margin-bottom:15px">\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="FNAME">First Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="C_FNAME" name="FNAME" type="text" ng-model="CoastStaff.FNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="C_LNAME" name="LNAME" type="text" ng-model="CoastStaff.LNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-4 form-group">\n                    <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="C_EMAIL" name="EMAIL" type="email" ng-model="CoastStaff.EMAIL">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="C_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="CoastStaff.PHONE">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="C_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="CoastStaff.ALTERNATE_PHONE">\n                    </div>\n                </div>\n            </div>\n\n            \n            <div><b>Water Quality (optional)</b></div>\n            <div class="col-sm-12" style="margin-bottom:15px">\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label req" for="FNAME">First Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="W_FNAME" name="FNAME" type="text" ng-model="WaterStaff.FNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="W_LNAME" name="LNAME" type="text" ng-model="WaterStaff.LNAME">\n                    </div>\n                </div>\n\n                <div class="col-md-4 form-group">\n                    <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="W_EMAIL" name="EMAIL" type="email" ng-model="WaterStaff.EMAIL">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="W_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="WaterStaff.PHONE">\n                    </div>\n                </div>\n\n                <div class="col-md-3 form-group">\n                    <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                    <div class="col-md-12">\n                        <input ng-readonly="isCompleted" class="form-control" id="W_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="WaterStaff.ALTERNATE_PHONE">\n                    </div>\n                </div>\n            </div>\n        </uib-accordion-group>\n\n        <div ng-hide="isCompleted">\n            <input type="checkbox" name="COMPLETE" ng-model="newReport.COMPLETE" ng-true-value="\'1\'" ng-false-value="\'0\'">\n            <span>Check if this Report is Complete. (If left unchecked, you may come back later to finish it)</span>\n        </div>\n        <div ng-hide="isCompleted" class="form-group">\n            <div class="col-md-4 col-md-offset-2">\n                <span>\n                    <button type="submit" ng-disabled="disabled" class="btn btn-primary" ng-click="saveReport(fullReportForm.submit.$valid)">\n                        <span>Save</span>\n                    </button>\n                </span>\n            </div>\n        </div>\n    </form>\n</uib-accordion>');

}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("mapCtrl",["$scope","$rootScope","$cookies","$location",function(e,t,n,o){void 0===n.get("STNCreds")||""===n.get("STNCreds")?(e.auth=!1,o.path("/login")):(t.thisPage="Map",t.activeMenu="map",e.map="Welcome to the new STN Map Page!!")}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("reporting/reportingDashboard.html",'<style type="text/css">.tab-content {\n        border-left: 1px solid #ddd;\n        border-right: 1px solid #ddd;\n        border-bottom: 1px solid #ddd;\n        padding: 10px;\n    }\n    .tab-content > .active {\n        background: white none repeat scroll 0 0 !important;\n        color: black !important;\n    }</style><uib-tabset id="bypassme"><uib-tab heading="Today"><div ng-show="todayRpts != undefined || todayRpts.length > 0"><ul ng-repeat="(key, value) in todayRpts | groupBy: \'EVENT_NAME\'"><label>{{key}}</label><li style="margin-bottom:5px" ng-repeat="r in value">{{r.STATE}} <button ng-click="ViewReport(r)" style="margin-left:10px" class="btn btn-primary">View</button> <span ng-if="r.COMPLETE == 1"><button ng-click="getProjectAlertText(r)" class="btn btn-primary">Project Alert</button></span><span ng-if="r.COMPLETE == 0"><button class="btn btn-primary" ng-click="CompleteThisReport(r)">Complete</button></span></li></ul></div><div ng-show="todayRpts == undefined || todayRpts.length == 0"><div>No Reports were filed today.</div></div></uib-tab><uib-tab heading="Yesterday"><div ng-show="yesterdayRpts != undefined || yesterdayRpts.length > 0"><ul ng-repeat="(key, value) in yesterdayRpts | groupBy: \'EVENT_NAME\'"><label>{{key}}</label><li style="margin-bottom:5px" ng-repeat="r in value">{{r.STATE}} <button ng-click="ViewReport(r)" style="margin-left:10px" class="btn btn-primary">View</button> <span ng-if="r.COMPLETE == 1"><button ng-click="getProjectAlertText(r)" class="btn btn-primary">Project Alert</button></span><span ng-if="r.COMPLETE == 0"><button class="btn btn-primary" ng-click="CompleteThisReport(r)">Complete</button></span></li></ul></div><div ng-show="yesterdayRpts == undefined || yesterdayRpts.length == 0"><div>No Reports were filed yesterday.</div></div></uib-tab><uib-tab heading="Pick a Date"><div><label class="col-md-1 pull-left">Date:</label><div class="col-md-4 input-group pull-left" style="padding-left:15px;padding-right:15px"><input type="text" datepicker-append-to-body="true" class="form-control" id="THIS_DATE" name="td" uib-datepicker-popup="MMMM dd, yyyy" is-open="datepickrs.td" ng-model="THIS_DATE.date"> <span class="input-group-btn"><button class="btn btn-default" ng-click="open($event, \'td\')"><i class="glyphicon glyphicon-calendar"></button></span></div><button style="margin-left:10px" class="btn btn-primary" ng-click="getReportsByDate()">Get Reports</button><div ng-if="pickAdateReports"><div ng-show="pickDateRpts != undefined"><ul ng-repeat="(key, value) in pickDateRpts | groupBy: \'EVENT_NAME\'"><label>{{key}}</label><li style="margin-bottom:5px" ng-repeat="r in value">{{r.STATE}} <button ng-click="ViewReport(r)" style="margin-left:10px" class="btn btn-primary">View</button> <span ng-if="r.COMPLETE == 1"><button ng-click="getProjectAlertText(r)" class="btn btn-primary">Project Alert</button></span><span ng-if="r.COMPLETE == 0"><button class="btn btn-primary" ng-click="CompleteThisReport(r)">Complete</button></span></li></ul></div><div ng-show="pickDateRpts == undefined || pickDateRpts.length == 0"><div>No Reports for this date.</div></div></div></div></uib-tab></uib-tabset>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("mainCtrl",["$scope","$rootScope","$cookies","$uibModal","$location","$state",function(e,t,n,o,a,r){if(t.isAuth={},t.activeMenu="home",void 0===n.get("STNCreds")||""===n.get("STNCreds"))t.isAuth.val=!1,a.path("/login");else{t.isAuth.val=!0,t.usersName=n.get("usersName"),t.userID=n.get("mID");var s=n.get("SessionEventName");null!==s&&void 0!==s&&(t.sessionEvent="Session Event: "+s+"."),r.go("home"),e.status={isopen:!1},e.toggleDropdown=function(t){t.preventDefault(),t.stopPropagation(),e.status.isopen=!e.status.isopen}}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("reporting/reporting.html",'<div class="panel-body"><div class="wizard"><a ui-sref=".reportDash" ui-sref-active="active">Reporting Dashboard</a> <a ui-sref=".submitReport" ui-sref-active="active">Submit Report</a> <a ui-sref=".generateReport" ui-sref-active="active">Generate Report</a></div><div ui-view></div></div><style type="text/css">.rep-dialog .modal-dialog {\n        width: 90%;\n        font-size: smaller;\n    }</style><script type="text/ng-template" id="ViewReport.html"><div id="print-content">\n        <div class="modal-header">\n            <h3 class="modal-title">Short Term Network Modeling</h3>\n        </div>\n        <div class="modal-body">\n            <div class="container" id="jobSetupPrintPdf">\n                <div class="col-lg-12">\n                    <table id="Sec1PDF" class="table">\n                        <tr><label>Section 1: Report Parameters</label></tr>\n                        <tr style="border-bottom:solid thin #e2e2e2">\n                            <td><b>Date being reported:</b> {{ReportView.Report.REPORT_DATE | date: \'MM/dd/yyyy\'}}</td>\n                            <td><b>Event:</b> {{ReportView.Report.EVENT_NAME}}</td>\n                            <td><b>State:</b> {{ReportView.Report.STATE}}</td>\n                        </tr>\n                    </table>\n                </div>\n\n                <div class="col-lg-6 pull-left">\n                    <table id="Sec2PDF" class="table">\n                        <tr><label>Section 2: Personnel and Vehicle Counts</label></tr>\n                        <tr>\n                            <td></td>\n                            <td></td>\n                            <td style="font-family: \'BryantBold\';">Surfacewater</td>\n                            <td style="font-family: \'BryantBold\';">Water Quality and Other</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Employees not accounted for</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_FIELDPERS_NOTACCT}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_FIELDPERS_NOTACCT}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="3">\n                                <span>Personnel in the field</span>\n                            </td>\n                            <td>Yesterday</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_YEST_FIELDPERS}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_YEST_FIELDPERS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Today</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_TOD_FIELDPERS}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_TOD_FIELDPERS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Tomorrow</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_TMW_FIELDPERS}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_TMW_FIELDPERS}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="3">Personnel in the office</td>\n                            <td>Yesterday</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_YEST_OFFICEPERS}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_YEST_OFFICEPERS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Today</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_TOD_OFFICEPERS}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_TOD_OFFICEPERS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Tomorrow\n                            <td style="text-align:center">{{ReportView.Report.SW_TMW_OFFICEPERS}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_TMW_OFFICEPERS}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="3">Vehicles deployed</td>\n                            <td>Trucks & Cars</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_AUTOS_DEPL}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_AUTOS_DEPL}}</td>\n                        </tr>\n                        <tr>\n                            <td>Boats</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_BOATS_DEPL}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_BOATS_DEPL}}</td>\n                        </tr>\n                        <tr>\n                            <td>Other</td>\n                            <td style="text-align:center">{{ReportView.Report.SW_OTHER_DEPL}}</td>\n                            <td style="text-align:center">{{ReportView.Report.WQ_OTHER_DEPL}}</td>\n                        </tr>\n                    </table>\n\n                    <table id="Sec3PDF" class="table">\n                        <tr><label>Section 3: Instrumentation & Sampling Counts</label></tr>\n                        <tr>\n                            <td colspan="2" class="col-md-5">Gage visits (cumulative)</td>\n                            <td colspan="2" style="text-align:center" class="col-md-3">{{ReportView.Report.GAGE_VISIT}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Gages down at present</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.GAGE_DOWN}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="2">Discharge measurements</td>\n                            <td>To date</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.TOT_DISCHARGE_MEAS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_DISCHARGE_MEAS}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="2">Check measurements</td>\n                            <td>To Date</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.TOT_CHECK_MEAS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_CHECK_MEAS}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Indirect measurements planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_INDIRECT_MEAS}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Rating extensions</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.RATING_EXTENS}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Peaks of record on gages to date </br>(>20 yrs of record)</td>\n                            <td style="text-align:center" colspan=" 2">{{ReportView.Report.GAGE_PEAK_RECORD}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="4">Rapid Deployment gages to date</td>\n                            <td>Planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_RAPDEPL_GAGE}}</td>\n                        </tr>\n                        <tr>\n                            <td>Deployed</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.DEP_RAPDEPL_GAGE}}</td>\n                        </tr>\n                        <tr>\n                            <td>Recovered</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.REC_RAPDEPL_GAGE}}</td>\n                        </tr>\n                        <tr>\n                            <td>Lost</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.LOST_RAPDEPL_GAGE}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="4">Water Level Sensors to date</td>\n                            <td>Planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_WTRLEV_SENSOR}}</td>\n                        </tr>\n                        <tr>\n                            <td>Deployed</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.DEP_WTRLEV_SENSOR}}</td>\n                        </tr>\n                        <tr>\n                            <td>Recovered</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.REC_WTRLEV_SENSOR}}</td>\n                        </tr>\n                        <tr>\n                            <td>Lost</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.LOST_WTRLEV_SENSOR}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="4">Wave Sensors to date</td>\n                            <td>Planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_WV_SENS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Deployed</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.DEP_WV_SENS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Recovered</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.REC_WV_SENS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Lost</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.LOST_WV_SENS}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="4">Barometers to date</td>\n                            <td>Planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_BAROMETRIC}}</td>\n                        </tr>\n                        <tr>\n                            <td>Deployed</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.DEP_BAROMETRIC}}</td>\n                        </tr>\n                        <tr>\n                            <td>Recovered</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.REC_BAROMETRIC}}</td>\n                        </tr>\n                        <tr>\n                            <td>Lost</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.LOST_BAROMETRIC}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="4">Meteorological Sensors to date</td>\n                            <td>Planned</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.PLAN_METEOROLOGICAL}}</td>\n                        </tr>\n                        <tr>\n                            <td>Deployed</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.DEP_METEOROLOGICAL}}</td>\n                        </tr>\n                        <tr>\n                            <td>Recovered</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.REC_METEOROLOGICAL}}</td>\n                        </tr>\n                        <tr>\n                            <td>Lost</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.LOST_METEOROLOGICAL}}</td>\n                        </tr>\n                        <tr>\n                            <td rowspan="2">Highwater Mark to date</td>\n                            <td>Flagged</td>\n                            <td style="text-align:center" colspan=" 2">{{ReportView.Report.HWM_FLAGGED}}</td>\n                        </tr>\n                        <tr>\n                            <td>Collected</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.HWM_COLLECTED}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">QW Gage visits (cumulative)</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.QW_GAGE_VISIT}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Continuous QW Gages visited</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.QW_CONT_GAGEVISIT}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Continuous QW Gages down</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.QW_GAGE_DOWN}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Discrete QW samples collected</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.QW_DISCR_SAMPLES}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan="2">Sediment samples collected</td>\n                            <td style="text-align:center" colspan="2">{{ReportView.Report.COLL_SEDSAMPLES}}</td>\n                        </tr>\n                    </table>\n                </div>\n\n                <div class="col-lg-6 pull-right">\n                    <table id="Sec4PDF" class="table">\n                        <tr><label>Section 4: Notes</label></tr>\n                        <tr><textarea ng-readonly="true" id="NOTES" type="text" rows="5" cols="90" ng-model="ReportView.Report.NOTES" /></tr>\n                    </table>\n\n                    <table id="Sec5PDF_Submit" class="table">\n                        <tr><label>Section 5: Contact Information</label></tr>\n                        <tr><td><label>Submitter</label></td><td></td></tr>\n                        <tr><td>Name</td><td>{{ReportView.submitter.mem.FNAME}} {{submitter.mem.LNAME}}</td></tr>\n                        <tr><td>Phone</td><td>{{ReportView.submitter.mem.PHONE}}</td></tr>\n                        <tr><td>Email</td><td>{{ReportView.submitter.mem.EMAIL}}</td></tr>\n                        <tr><td>Office Name</td><td>{{ReportView.submitter.AGENCY_NAME}}</td></tr>\n                        <tr><td>Office Address</td><td>{{ReportView.submitter.AGENCY_ADDRESS}}</td></tr>\n                    </table>\n\n                    <table ng-if="ReportView.deployStaff.FNAME != undefined" id="Sec5PDF_Deploy" class="table">\n                        <tr><td style="border:none"><label>Event Contacts</label></td></tr>\n                        <tr><td colspan="2"><label>Deployed Staff</label></td></tr>\n                        <tr><td>Name</td><td>{{ReportView.deployStaff.FNAME}} {{ReportView.deployStaff.LNAME}}</td></tr>\n                        <tr><td>Email</td><td>{{ReportView.deployStaff.EMAIL}}</td></tr>\n                        <tr><td>Phone</td><td>{{ReportView.deployStaff.PHONE}}</td></tr>\n                        <tr><td>Alternate Phone</td><td>{{ReportView.deployStaff.ALTERNATE_PHONE}}</td></tr>\n                    </table>\n\n                    <table ng-if="ReportView.generalStaff.FNAME != undefined" id="Sec5PDF_Gen" class="table">\n                        <tr><td colspan="2"><label>General Staff</label></td></tr>\n                        <tr><td>Name</td><td>{{ReportView.generalStaff.FNAME}} {{ReportView.generalStaff.LNAME}}</td></tr>\n                        <tr><td>Email</td><td>{{ReportView.generalStaff.EMAIL}}</td></tr>\n                        <tr><td>Phone</td><td>{{ReportView.generalStaff.PHONE}}</td></tr>\n                        <tr><td>Alternate Phone</td><td>{{ReportView.generalStaff.ALTERNATE_PHONE}}</td></tr>\n                    </table>\n\n                    <table ng-if="ReportView.inlandStaff.FNAME != undefined" id="Sec5PDF_Inland" class="table">\n                        <tr><td colspan="2"><label>Inland Staff</label></td></tr>\n                        <tr><td>Name</td><td>{{ReportView.inlandStaff.FNAME}} {{ReportView.inlandStaff.LNAME}}</td></tr>\n                        <tr><td>Email</td><td>{{ReportView.inlandStaff.EMAIL}}</td></tr>\n                        <tr><td>Phone</td><td>{{ReportView.inlandStaff.PHONE}}</td></tr>\n                        <tr><td>Alternate Phone</td><td>{{ReportView.inlandStaff.ALTERNATE_PHONE}}</td></tr>\n                    </table>\n\n                    <table ng-if="ReportView.coastStaff.FNAME != undefined" id="Sec5PDF_Coast" class="table">\n                        <tr><td colspan="2"><label>Coastal Staff</label></td></tr>\n                        <tr><td>Name</td><td>{{ReportView.coastStaff.FNAME}} {{ReportView.coastStaff.LNAME}}</td></tr>\n                        <tr><td>Email</td><td>{{ReportView.coastStaff.EMAIL}}</td></tr>\n                        <tr><td>Phone</td><td>{{ReportView.coastStaff.PHONE}}</td></tr>\n                        <tr><td>Alternate Phone</td><td>{{ReportView.coastStaff.ALTERNATE_PHONE}}</td></tr>\n                    </table>\n\n                    <table ng-if="ReportView.waterStaff.FNAME != undefined" id="Sec5PDF_Water" class="table">\n                        <tr><td colspan="2"><label>Water Staff</label></td></tr>\n                        <tr><td>Name</td><td>{{ReportView.waterStaff.FNAME}} {{ReportView.waterStaff.LNAME}}</td></tr>\n                        <tr><td>Email</td><td>{{ReportView.waterStaff.EMAIL}}</td></tr>\n                        <tr><td>Phone</td><td>{{ReportView.waterStaff.PHONE}}</td></tr>\n                        <tr><td>Alternate Phone</td><td>{{ReportView.waterStaff.ALTERNATE_PHONE}}</td></tr>\n                    </table>\n                </div>\n            </div>\n            <br clear="all" />\n\n            <div class="modal-footer">\n                <a href="#" print="jobSetupPrintPdf"><button class="btn btn-primary">Print</button></a>\n                <button class="btn btn-primary" ng-click="ok()">OK</button>\n                <!--<button class="btn btn-warning" ng-click="cancel()">Cancel</button>-->\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="MetricsSummary.html"><div id="print-content">\n        <div class="modal-header">\n            <h3 class="modal-title">USGS Flood Operations Monitoring</h3>\n        </div>\n        <div class="modal-body">\n            <div ng-show="Report.length > 0" class="" id="jobSetupPrintPdf1">\n                <div class="col-lg-12">\n                    <h3>USGS {{Event.Event.EVENT_NAME}} Report for {{Report[0].report.REPORT_DATE | date: \'MM/dd/yyyy\'}}</h3>\n                    <table id="eventPart" class="table">\n                        <tr>\n                            <td class="col-lg-2">Event Description:</td>\n                            <td>{{Event.Event.EVENT_DESCRIPTION}}</td>\n                        </tr>\n                        <tr>\n                            <td>Event Type:</td>\n                            <td>{{Event.EventType.TYPE}}</td>\n                        </tr>\n                        <tr>\n                            <td>Event Status:</td>\n                            <td>{{Event.EventStat.STATUS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Event Coordinator:</td>\n                            <td>{{Event.Coordinator.FNAME}} {{Event.Coordinator.LNAME}}, {{Event.CoordAgency.AGENCY_NAME}}, {{Event.Coordinator.EMAIL}}</td>\n                        </tr>\n                    </table>\n                </div>\n\n                <div class="col-lg-12">\n                    <table id="PeopleAssets" class="table table-bordered">\n                        <tr><label>Deployed Personnel and Assets</label></tr>\n                        <tr>\n                            <td colspan="2"></td>\n                            <td>Employees not accounted for</td>\n                            <td colspan="4">Personnel in the Field</td>\n                            <td colspan="4">Personnel in the Office</td>\n                            <td colspan="3">Vehicles Deployed</td>\n                        </tr>\n                        <tr>\n                            <td colspan="3"></td>\n                            <td>Cumulative Person Days</td>\n                            <td>Yesterday</td>\n                            <td>Today</td>\n                            <td>Tomorrow</td>\n                            <td>Cumulative Person Days</td>\n                            <td>Yesterday</td>\n                            <td>Today</td>\n                            <td>Tomorrow</td>\n                            <td>Trucks & Cars</td>\n                            <td>Boats</td>\n                            <td>Other</td>\n                        </tr>\n                        <tbody ng-repeat="r in Report">\n                            <tr>\n                                <td style="vertical-align:middle" rowspan="2">{{r.report.STATE}}</td>\n                                <td class="col-lg-2">SW</td>\n                                <td style="text-align:center">{{r.report.SW_FIELDPERS_NOTACCT}}</td><!-- Not accounted for -->\n                                <td style="text-align:center">{{r.FieldPYesSWTot}}</td><!-- cumulative field -->\n                                <td style="text-align:center">{{r.report.SW_YEST_FIELDPERS}}</td><!-- yest field -->\n                                <td style="text-align:center">{{r.report.SW_TOD_FIELDPERS}}</td><!-- today field -->\n                                <td style="text-align:center">{{r.report.SW_TMW_FIELDPERS}}</td><!-- tomorrow field -->\n                                <td style="text-align:center">{{r.OfficePYesSWTot}}</td><!-- cumulative office -->\n                                <td style="text-align:center">{{r.report.SW_YEST_OFFICEPERS}}</td><!-- yest office -->\n                                <td style="text-align:center">{{r.report.SW_TOD_OFFICEPERS}}</td><!-- today office -->\n                                <td style="text-align:center">{{r.report.SW_TMW_OFFICEPERS}}</td><!-- tomorrow office -->\n                                <td style="text-align:center">{{r.report.SW_AUTOS_DEPL}}</td><!-- trucks/cars -->\n                                <td style="text-align:center">{{r.report.SW_BOATS_DEPL}}</td><!-- boats -->\n                                <td style="text-align:center">{{r.report.SW_OTHER_DEPL}}</td><!-- other -->\n                            </tr>\n                            <tr>\n                                <td>WQ & Other</td>\n                                <td style="text-align:center">{{r.report.WQ_FIELDPERS_NOTACCT}}</td><!-- Not accounted for -->\n                                <td style="text-align:center">{{r.FieldPYesWQTot}}</td><!-- cumulative field -->\n                                <td style="text-align:center">{{r.report.WQ_YEST_FIELDPERS}}</td><!-- yest field -->\n                                <td style="text-align:center">{{r.report.WQ_TOD_FIELDPERS}}</td><!-- today field -->\n                                <td style="text-align:center">{{r.report.WQ_TMW_FIELDPERS}}</td><!-- tomorrow field -->\n                                <td style="text-align:center">{{r.OfficePYesWQTot}}</td><!-- cumulative office -->\n                                <td style="text-align:center">{{r.report.WQ_YEST_OFFICEPERS}}</td><!-- yest office -->\n                                <td style="text-align:center">{{r.report.WQ_TOD_OFFICEPERS}}</td><!-- today office -->\n                                <td style="text-align:center">{{r.report.WQ_TMW_OFFICEPERS}}</td><!-- tomorrow office -->\n                                <td style="text-align:center">{{r.report.WQ_AUTOS_DEPL}}</td><!-- trucks/cars -->\n                                <td style="text-align:center">{{r.report.WQ_BOATS_DEPL}}</td><!-- boats -->\n                                <td style="text-align:center">{{r.report.WQ_OTHER_DEPL}}</td><!-- other -->\n                            </tr>\n                        </tbody>\n                        <tfoot>\n                        <th colspan="2">TOTALS</th>\n                        <th style="text-align:center">{{totals.notAcctForEmps}}</th>\n                        <th style="text-align:center">{{totals.cumPField}}</th>\n                        <th style="text-align:center">{{totals.yesPField}}</th>\n                        <th style="text-align:center">{{totals.todPField}}</th>\n                        <th style="text-align:center">{{totals.tomPField}}</th>\n                        <th style="text-align:center">{{totals.cumPOffice}}</th>\n                        <th style="text-align:center">{{totals.yesPOffice}}</th>\n                        <th style="text-align:center">{{totals.todPOffice}}</th>\n                        <th style="text-align:center">{{totals.tomPOffice}}</th>\n                        <th style="text-align:center">{{totals.truck}}</th>\n                        <th style="text-align:center">{{totals.boat}}</th>\n                        <th style="text-align:center">{{totals.other}}</th>\n                        </tfoot>\n                    </table>\n                </div>\n\n                <div class="col-lg-12">\n                    <table id="instrumentCounts1" class="table table-bordered">\n                        <tr><label>Instrumentation and Sampling Counts</label></tr>\n                        <tr>\n                            <td colspan="3"></td>\n                            <td>To Date</td>\n                            <td>Planned</td>\n                            <td>To Date</td>\n                            <td>Planned</td>\n                            <td colspan="8"></td>\n                        </tr>\n                        <tr>\n                            <td></td>\n                            <td>Gage Visits</td>\n                            <td>Gages Down at Present</td>\n                            <td colspan="2">Discharge Measurements</td>\n                            <td colspan="2">Check Measurements</td>\n                            <td>Indirect Measurements</td>\n                            <td>Rate Extensions</td>\n                            <td>Peaks of Record</td>\n                            <td>QW Gage Visits</td>\n                            <td>Continuous QW Gages Visited</td>\n                            <td>Continuous QW Gages Down</td>\n                            <td>Discrete QW Samples Collected</td>\n                            <td>Sediment Samples Collected</td>\n                        </tr>\n                        <tbody ng-repeat="r in Report">\n                            <tr>\n                                <td>{{r.report.STATE}}</td>\n                                <td style="text-align:center">{{r.report.GAGE_VISIT}}</td>\n                                <td style="text-align:center">{{r.report.GAGE_DOWN}}</td>\n                                <td style="text-align:center">{{r.report.TOT_DISCHARGE_MEAS}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_DISCHARGE_MEAS}}</td>\n                                <td style="text-align:center">{{r.report.TOT_CHECK_MEAS}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_CHECK_MEAS}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_INDIRECT_MEAS}}</td>\n                                <td style="text-align:center">{{r.report.RATING_EXTENS}}</td>\n                                <td style="text-align:center">{{r.report.GAGE_PEAK_RECORD}}</td>\n                                <td style="text-align:center">{{r.report.QW_GAGE_VISIT}}</td>\n                                <td style="text-align:center">{{r.report.QW_CONT_GAGEVISIT}}</td>\n                                <td style="text-align:center">{{r.report.QW_GAGE_DOWN}}</td>\n                                <td style="text-align:center">{{r.report.QW_DISCR_SAMPLES}}</td>\n                                <td style="text-align:center">{{r.report.COLL_SEDSAMPLES}}</td>\n                            </tr>\n                        </tbody>\n                        <tfoot>\n                        <th>TOTALS</th>\n                        <th style="text-align:center">{{totals.gageVisits}}</th>\n                        <th style="text-align:center">{{totals.gagesDown}}</th>\n                        <th style="text-align:center">{{totals.disCtoDate}}</th>\n                        <th style="text-align:center">{{totals.disCPlanned}}</th>\n                        <th style="text-align:center">{{totals.CheckMeasToDate}}</th>\n                        <th style="text-align:center">{{totals.CheckMeasPlanned}}</th>\n                        <th style="text-align:center">{{totals.indMeas}}</th>\n                        <th style="text-align:center">{{totals.ratExt}}</th>\n                        <th style="text-align:center">{{totals.peaksOfRec}}</th>\n                        <th style="text-align:center">{{totals.QWGageVis}}</th>\n                        <th style="text-align:center">{{totals.contQWGageVis}}</th>\n                        <th style="text-align:center">{{totals.contQWGageDown}}</th>\n                        <th style="text-align:center">{{totals.disQWSamples}}</th>\n                        <th style="text-align:center">{{totals.sedSamples}}</th>\n                        </tfoot>\n                    </table>\n                </div>\n\n                <div class="col-lg-12">\n                    <table id="instrumentCounts2" class="table table-bordered table-condensed">\n                        <tr>\n                            <td></td>\n\n                            <td colspan="4">Rapid Deployment Gages</td>\n                            <td colspan="4">Water Level Sensors</td>\n                            <td colspan="4">Wave Sensors</td>\n                            <td colspan="4">Barometers</td>\n                            <td colspan="4">Meteorological Sensors</td>\n                            <td colspan="2">Highwater Marks</td>\n                        </tr>\n                        <tr>\n                            <td></td>\n                            <td>Planned</td>\n                            <td>Deployed</td>\n                            <td>Recovered</td>\n                            <td>Lost</td>\n                            <td>Planned</td>\n                            <td>Deployed</td>\n                            <td>Recovered</td>\n                            <td>Lost</td>\n                            <td>Planned</td>\n                            <td>Deployed</td>\n                            <td>Recovered</td>\n                            <td>Lost</td>\n                            <td>Planned</td>\n                            <td>Deployed</td>\n                            <td>Recovered</td>\n                            <td>Lost</td>\n                            <td>Planned</td>\n                            <td>Deployed</td>\n                            <td>Recovered</td>\n                            <td>Lost</td>\n                            <td>Flagged</td>\n                            <td>Collected</td>\n                        </tr>\n                        <tbody ng-repeat="r in Report">\n                            <tr>\n                                <td>{{r.report.STATE}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_RAPDEPL_GAGE}}</td>\n                                <td style="text-align:center">{{r.report.DEP_RAPDEPL_GAGE}}</td>\n                                <td style="text-align:center">{{r.report.REC_RAPDEPL_GAGE}}</td>\n                                <td style="text-align:center">{{r.report.LOST_RAPDEPL_GAGE}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_WTRLEV_SENSOR}}</td>\n                                <td style="text-align:center">{{r.report.DEP_WTRLEV_SENSOR}}</td>\n                                <td style="text-align:center">{{r.report.REC_WTRLEV_SENSOR}}</td>\n                                <td style="text-align:center">{{r.report.LOST_WTRLEV_SENSOR}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_WV_SENS}}</td>\n                                <td style="text-align:center">{{r.report.DEP_WV_SENS}}</td>\n                                <td style="text-align:center">{{r.report.REC_WV_SENS}}</td>\n                                <td style="text-align:center">{{r.report.LOST_WV_SENS}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_BAROMETRIC}}</td>\n                                <td style="text-align:center">{{r.report.DEP_BAROMETRIC}}</td>\n                                <td style="text-align:center">{{r.report.REC_BAROMETRIC}}</td>\n                                <td style="text-align:center">{{r.report.LOST_BAROMETRIC}}</td>\n                                <td style="text-align:center">{{r.report.PLAN_METEOROLOGICAL}}</td>\n                                <td style="text-align:center">{{r.report.DEP_METEOROLOGICAL}}</td>\n                                <td style="text-align:center">{{r.report.REC_METEOROLOGICAL}}</td>\n                                <td style="text-align:center">{{r.report.LOST_METEOROLOGICAL}}</td>\n                                <td style="text-align:center">{{r.report.HWM_FLAGGED}}</td>\n                                <td style="text-align:center">{{r.report.HWM_COLLECTED}}</td>\n                            </tr>\n                        </tbody>\n                        <tfoot>\n                        <th>TOTALS</th>\n                        <th style="text-align:center">{{totals.rdgPlan}}</th>\n                        <th style="text-align:center">{{totals.rdgDep}}</th>\n                        <th style="text-align:center">{{totals.rdgRec}}</th>\n                        <th style="text-align:center">{{totals.rdgLost}}</th>\n                        <th style="text-align:center">{{totals.waterPlan}}</th>\n                        <th style="text-align:center">{{totals.waterDep}}</th>\n                        <th style="text-align:center">{{totals.waterRec}}</th>\n                        <th style="text-align:center">{{totals.waterLost}}</th>\n                        <th style="text-align:center">{{totals.wavePlan}}</th>\n                        <th style="text-align:center">{{totals.waveDep}}</th>\n                        <th style="text-align:center">{{totals.waveRec}}</th>\n                        <th style="text-align:center">{{totals.waveLost}}</th>\n                        <th style="text-align:center">{{totals.baroPlan}}</th>\n                        <th style="text-align:center">{{totals.baroDep}}</th>\n                        <th style="text-align:center">{{totals.baroRec}}</th>\n                        <th style="text-align:center">{{totals.baroLost}}</th>\n                        <th style="text-align:center">{{totals.metPlan}}</th>\n                        <th style="text-align:center">{{totals.metDep}}</th>\n                        <th style="text-align:center">{{totals.metRec}}</th>\n                        <th style="text-align:center">{{totals.metLost}}</th>\n                        <th style="text-align:center">{{totals.hwmFlag}}</th>\n                        <th style="text-align:center">{{totals.hwmCol}}</th>\n                        </tfoot>\n                    </table>\n                </div>\n            </div>\n\n            <div ng-show="Report.length == 0">\n                <h4>No Reports match your filter choices.</h4>\n            </div>\n            <br clear="all" />\n\n            <div class="modal-footer">\n                <a ng-if="Report.length > 0" href="#" print="jobSetupPrintPdf1"><button class="btn btn-primary">Print</button></a>\n                <button class="btn btn-primary" ng-click="ok()">OK</button>\n                <!--<button class="btn btn-warning" ng-click="cancel()">Cancel</button>-->\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="ContactMetricsSummary.html"><div id="print-content">\n        <div class="modal-header">\n            <h3 class="modal-title">USGS Flood Operations Monitoring</h3>\n        </div>\n        <div class="modal-body">\n            <div ng-show="Reports.length > 0" class="" id="jobSetupPrintPdf2">\n                <div class="col-lg-12">\n                    <h3>USGS {{Event.Event.EVENT_NAME}} Contacts Report for {{Reports[0].REPORT_DATE | date: \'MM/dd/yyyy\'}}</h3>\n                    <table id="eventPart" class="table">\n                        <tr>\n                            <td class="col-lg-2">Event Description:</td>\n                            <td>{{Event.Event.EVENT_DESCRIPTION}}</td>\n                        </tr>\n                        <tr>\n                            <td>Event Type:</td>\n                            <td>{{Event.EventType.TYPE}}</td>\n                        </tr>\n                        <tr>\n                            <td>Event Status:</td>\n                            <td>{{Event.EventStat.STATUS}}</td>\n                        </tr>\n                        <tr>\n                            <td>Event Coordinator:</td>\n                            <td>{{Event.Coordinator.FNAME}} {{Event.Coordinator.LNAME}}, {{Event.CoordAgency.AGENCY_NAME}}, {{Event.Coordinator.EMAIL}}</td>\n                        </tr>\n                    </table>\n                </div>\n                <div class="col-lg-12" ng-repeat="r in Reports">\n                    <table class="table">\n                        <tr>\n                            <td colspan="6" style="text-align:center;border:thin solid black;background:steelblue"><label>{{r.State}}</label></td>\n                        </tr>\n                        <tr>\n                            <td colspan="2" style="text-align:center;border:thin solid black"><label>Submitter</label></td>\n                            <td colspan="2" style="text-align:center;border:thin solid black"><label>Deployer</label></td>\n                            <td colspan="2" style="text-align:center;border:thin solid black"><label>General</label></td>\n                        </tr>\n                        <tr>\n                            <td style="width:10%;border-left:thin solid black;border-right:thin solid black">Name</td>\n                            <td style="border-right:thin solid black">{{r.submitter.FNAME}} {{r.submitter.LNAME}}</td>\n                            <td style="width:10%;border-left:thin solid black;border-right:thin solid black">Name</td>\n                            <td style="border-right:thin solid black">{{r.depC.FNAME}} {{r.depC.LNAME}}</td>\n                            <td style="width:10%;border-left:thin solid black;border-right:thin solid black">Name</td>\n                            <td style="border-right:thin solid black">{{r.genC.FNAME}} {{r.genC.LNAME}}</td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Phone</td>\n                            <td style="border-right:thin solid black">{{r.submitter.PHONE}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Phone</td>\n                            <td style="border-right:thin solid black">{{r.depC.PHONE}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Phone</td>\n                            <td style="border-right:thin solid black">{{r.genC.PHONE}}</td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Email</td>\n                            <td style="border-right:thin solid black">{{r.submitter.EMAIL}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Alt Phone</td>\n                            <td style="border-right:thin solid black">{{r.depC.ALT_PHONE}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Alt Phone</td>\n                            <td style="border-right:thin solid black">{{r.genC.ALT_PHONE}}</td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Office Name</td>\n                            <td style="border-right:thin solid black">{{r.submitter.OFFICENAME}}</td>\n                            <td style="border-bottom:thin solid black;border-right:thin solid black">Email</td>\n                            <td style="border-bottom:thin solid black;border-right:thin solid black">{{r.depC.EMAIL}}</td>\n                            <td style="border-bottom:thin solid black;border-right:thin solid black">Email</td>\n                            <td style="border-bottom:thin solid black;border-right:thin solid black">{{r.genC.EMAIL}}</td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-bottom:thin solid black;border-right:thin solid black">Office Address</td>\n                            <td style="border-bottom:thin solid black;border-right:thin solid black">{{r.submitter.OFFICEADD}}</td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr></tr>\n\n                        <tr>\n                            <td colspan="2" style="text-align:center;border:thin solid black"><label>Inland Flood</label></td>\n                            <td colspan="2" style="text-align:center;border:thin solid black"><label>Coastal Flood</label></td>\n                            <td colspan="2" style="text-align:center;border:thin solid black"><label>Water Quality</label></td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Name</td>\n                            <td style="border-right:thin solid black">{{r.inlC.FNAME}} {{r.inlC.LNAME}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Name</td>\n                            <td style="border-right:thin solid black">{{r.coastC.FNAME}} {{r.coastC.LNAME}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Name</td>\n                            <td style="border-right:thin solid black">{{r.waterC.FNAME}} {{r.waterC.LNAME}}</td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Phone</td>\n                            <td style="border-right:thin solid black">{{r.inlC.PHONE}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Phone</td>\n                            <td style="border-right:thin solid black">{{r.coastC.PHONE}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Phone</td>\n                            <td style="border-right:thin solid black">{{r.waterC.PHONE}}</td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Alt Phone</td>\n                            <td style="border-right:thin solid black">{{r.inlC.ALT_PHONE}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Alt Phone</td>\n                            <td style="border-right:thin solid black">{{r.coastC.ALT_PHONE}}</td>\n                            <td style="border-left:thin solid black;border-right:thin solid black">Alt Phone</td>\n                            <td style="border-right:thin solid black">{{r.waterC.ALT_PHONE}}</td>\n                        </tr>\n                        <tr>\n                            <td style="border-left:thin solid black;border-bottom:thin solid black;border-right:thin solid black">Email</td>\n                            <td style="border-right:thin solid black;border-bottom:thin solid black">{{r.inlC.EMAIL}}</td>\n                            <td style="border-left:thin solid black;border-bottom:thin solid black;border-right:thin solid black">Email</td>\n                            <td style="border-right:thin solid black;border-bottom:thin solid black">{{r.coastC.EMAIL}}</td>\n                            <td style="border-left:thin solid black;border-bottom:thin solid black;border-right:thin solid black">Email</td>\n                            <td style="border-right:thin solid black;border-bottom:thin solid black">{{r.waterC.EMAIL}}</td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n\n            <div ng-show="Reports.length == 0">\n                <h4>No Reports match your filter choices.</h4>\n            </div>\n            <br clear="all" />\n\n            <div class="modal-footer">\n                <a ng-if="Reports.length > 0" href="#" print="jobSetupPrintPdf2"><button class="btn btn-primary">Print</button></a>\n                <button class="btn btn-primary" ng-click="ok()">OK</button>\n                <!--<button class="btn btn-warning" ng-click="cancel()">Cancel</button>-->\n            </div>\n        </div>\n    </div></script>');

}])}(),function(){"use strict";var e=angular.module("LogInOutController",[]);e.controller("loginCtrl",["$scope","$state","$location","$uibModal","$http","$cookies","$rootScope","Login",function(e,t,n,o,a,r,s,l){$("[type=password]").keypress(function(e){var t=$(this),n=$(".tooltip").is(":visible"),o=String.fromCharCode(e.which);o.toUpperCase()!==o||o.toLowerCase()===o||e.shiftKey?n&&t.tooltip("hide"):n||t.tooltip("show"),t.blur(function(e){t.tooltip("hide")})}),e.submit=function(){var i={username:e.username,password:e.password},d=e.username+":"+e.password;a.defaults.headers.common.Authorization="Basic "+btoa(d),a.defaults.headers.common.Accept="application/json",l.login({},i,function(n){var o=n;if(void 0!==o){var a=o.FNAME+" "+o.LNAME,l=btoa(e.username.concat(":",e.password));r.put("STNCreds",l),r.put("STNUsername",e.username),r.put("usersName",a),r.put("mID",o.MEMBER_ID);var i;switch(o.ROLE_ID){case 1:i="Admin";break;case 2:i="Manager";break;case 3:i="Field";break;case 4:i="Public";break;default:i="CitizenManager"}r.put("usersRole",i),s.isAuth.val=!0,s.usersName=a,s.userID=o.MEMBER_ID,t.go("home")}else e.error="Login Failed"},function(e){var t=o.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Something went wrong.</p><p>Error: {{status}} - {{statusText}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:function(t,n){t.ok=function(){n.close()},t.status=e.status,t.statusText=e.statusText},size:"sm"});t.result.then(function(e){n.path("/login")})})}}]),e.controller("logoutCtrl",["$scope","$rootScope","$cookies","$location",function(e,t,n,o){e.logout=function(){n.remove("STNCreds"),n.remove("STNUsername"),n.remove("usersName"),n.remove("usersRole"),n.remove("mID"),n.remove("SessionEventID"),n.remove("SessionEventName"),t.thisPage="",o.path("/login")}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("reporting/Reporting(partials).html",'<div class="panel panel-primary"><h3>{{report}}</h3></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("reporting/generateReport.html",'<style type="text/css">.panel {\n        margin-bottom:0;\n    }</style><form name="genReportForm"><div class="panel panel-default"><div class="panel-heading"><h4 class="panel-title">Select Event, Date, and State(s)</h4></div><div class="panel-body"><div class="form-group col-md-12 required"><label class="col-md-12 control-label req" for="EVENT_ID">Event:</label><div class="col-md-4"><select class="form-control" id="EVENT_ID" name="EVENT_ID" ng-change="genRepChange()" ng-model="genSummary.EVENT_ID" ng-options="e.EVENT_ID as e.EVENT_NAME for e in events" required><option value="">Select an event</option></select></div></div><div class="form-group col-md-12 required"><label class="col-md-12 control-label req" for="SUM_DATE">Date:</label><div class="col-md-4 input-group" style="padding-left:15px;padding-right:15px"><input datepicker-append-to-body="true" class="form-control" id="SUM_DATE" name="sd" type="text" uib-datepicker-popup="MMMM dd, yyyy" is-open="datepickrs.sd" ng-model="genSummary.SUM_DATE" required> <span class="input-group-btn"><button class="btn btn-default" ng-click="open($event, \'sd\')"><i class="glyphicon glyphicon-calendar"></button></span></div></div><div class="form-group col-md-12"><label class="col-md-12 control-label" for="SUM_STATE">State:</label><div class="col-md-6"><div isteven-multi-select input-model="states" output-model="Statemodel.value" button-label="STATE_NAME" item-label="STATE_NAME" max-height="300px" on-close="genRepChange( data )" tick-property="selected" helper-elements="filter" output-properties="STATE_NAME STATE_ABBREV"></div></div></div></div></div><div class="panel panel-default"><div class="panel-heading"><h4 class="panel-title">Confirm Selections</h4></div><div class="panel-body"><div class="col-md-12"><label class="col-md-1">Event:</label><span class="col-md-11">{{EventName.EVENT_NAME}}</span></div><div class="col-md-12"><label class="col-md-1">Date:</label><span class="col-md-11">{{genSummary.SUM_DATE | date: \'MM/dd/yyyy\'}}</span></div><div class="col-md-12"><label class="col-md-1">State(s):</label><span class="col-md-11">{{StateNames}}</span></div></div></div><div class="panel panel-default"><div class="panel-heading"><h4 class="panel-title">Select Desired Output</h4></div><div class="panel-body"><button class="btn btn-primary" ng-click="displayMetricSum(genReportForm.$valid)">Display Metrics Summary</button> <button class="btn btn-primary" ng-click="displayContactsSum(genReportForm.$valid)">Display Contacts Summary</button> <a class="btn btn-primary" href="http://localhost/STNServices/ReportingMetrics/FilteredReports.csv?Event={{genSummary.EVENT_ID}}&States={{StateAbbrevs}}&Date={{genSummary.SUM_DATE | date: \'MM/dd/yyyy\'}}" target="_blank">Download CSV Summary</a></div></div></form>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("quickHWMCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","SITE","OBJECTIVE_POINT","HWM",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v,g,T,h,b,y){if(void 0===n.get("STNCreds")||""===n.get("STNCreds"))e.auth=!1,o.path("/login");else{t.thisPage="Quick HWM",e.qhwmForm={};var S=function(e){var t=new Date;""!==e&&void 0!==e&&(t=new Date(e));var n=t.getFullYear(),o=t.getMonth(),a=("0"+t.getDate()).slice(-2),r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],s=new Date(r[o]+" "+a+", "+n);return s};e.decDegORdms={},e.aSite={MEMBER_ID:n.get("mID")},e.aOP={DATE_ESTABLISHED:S("")},e.aHWM={HWM_ENVIRONMENT:"Riverine",BANK:"N/A",FLAG_DATE:S(""),STILLWATER:0},e.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},e.removeOPCarray=[],e.addedIdentifiers=[],e.showControlIDinput=!1,e.horDatumList=i,e.horCollMethodList=d,e.stateList=c,e.allCountyList=p,e.stateCountyList=[],e.opTypeList=u,e.vertDatumList=m,e.vertCollMethodList=E,e.opQualList=f,e.hwmTypeList=v,e.hwmQualList=g,e.markerList=T,e.FTorMETER="ft",e.FTorCM="ft",e.addNewIdentifier=function(){e.addedIdentifiers.push({OBJECTIVE_POINT_ID:e.aOP.OBJECTIVE_POINT_ID,IDENTIFIER:"",IDENTIFIER_TYPE:""}),e.showControlIDinput=!0},e.datepickrs={},e.open=function(t,n){t.preventDefault(),t.stopPropagation(),e.datepickrs[n]=!0},e.decDegORdms.val="dd",e.DMS={};var A=function(e,t,n){var o=0;return 0>e?(o=-1*e+1*t/60+1*n/3600,(-1*o).toFixed(5)):(o=1*e+1*t/60+1*n/3600,o.toFixed(5))},D=function(e){0>e&&(e=e.toString(),e=e.substring(1));var t=Math.floor(e),n=60*(e-t),o=Math.floor(n),a=(60*(n-o)).toFixed(3);return""+t+":"+o+":"+a};e.latLongChange=function(){if("dd"==e.decDegORdms.val){if(void 0!==e.DMS.LADeg){e.aSite.LATITUDE_DD=A(e.DMS.LADeg,e.DMS.LAMin,e.DMS.LASec),e.aSite.LONGITUDE_DD=A(e.DMS.LODeg,e.DMS.LOMin,e.DMS.LOSec)}}else if(void 0!==e.aSite.LATITUDE_DD){var t=D(e.aSite.LATITUDE_DD).toString(),n=t.split(":");e.DMS.LADeg=n[0],e.DMS.LAMin=n[1],e.DMS.LASec=n[2];var o=D(e.aSite.LONGITUDE_DD),a=o.split(":");e.DMS.LODeg=-1*a[0],e.DMS.LOMin=a[1],e.DMS.LOSec=a[2]}},e.isNum=function(e){var t=e||window.event,n=t.keyCode||t.which;46!=n&&45!=n&&n>31&&(48>n||n>57)&&(t.returnValue=!1,t.preventDefault&&t.preventDefault())},e.getAddress=function(){delete e.aSite.ADDRESS,delete e.aSite.CITY,delete e.aSite.STATE,e.stateCountyList=[],delete e.aSite.ZIP,$(".page-loading").removeClass("hidden");var t=new google.maps.Geocoder,n=new google.maps.LatLng(e.aSite.LATITUDE_DD,e.aSite.LONGITUDE_DD);t.geocode({latLng:n},function(t,n){if(n==google.maps.GeocoderStatus.OK){var o=t[0].address_components,a={};$.each(o,function(e,t){$.each(t.types,function(e,n){a[n]=t.long_name})}),e.aSite.ADDRESS=void 0!==a.street_number?a.street_number+" "+a.route:a.route,e.aSite.CITY=a.locality;var r=e.stateList.filter(function(e){return e.STATE_NAME==a.administrative_area_level_1})[0];void 0!==r?(e.aSite.STATE=r.STATE_ABBREV,e.stateCountyList=e.allCountyList.filter(function(e){return e.STATE_ID==r.STATE_ID}),e.aSite.COUNTY=a.administrative_area_level_2,e.aSite.ZIP=a.postal_code,e.$apply(),$(".page-loading").addClass("hidden")):($(".page-loading").addClass("hidden"),toastr.error("The Latitude/Longitude did not return a location within the U.S."))}else $(".page-loading").addClass("hidden"),toastr.error("There was an error getting address. Please try again.")})},e.$watch(function(){return n.get("SessionEventName")},function(t){e.sessionEventName=void 0!==t?t:"All Events",e.sessionEventExists="All Events"!=e.sessionEventName?!0:!1}),e.updateCountyList=function(t){var n=e.stateList.filter(function(e){return e.STATE_ABBREV==t})[0];e.stateCountyList=e.allCountyList.filter(function(e){return e.STATE_ID==n.STATE_ID})},e.UnquantChecked=function(){1==e.aOP.UNQUANTIFIED&&(e.aOP.UNCERTAINTY="")};var _=function(e){var t={OBJECTIVE_POINT_ID:void 0!==e.OBJECTIVE_POINT_ID?e.OBJECTIVE_POINT_ID:0,NAME:e.NAME,DESCRIPTION:e.DESCRIPTION,ELEV_FT:void 0!==e.ELEV_FT?e.ELEV_FT:null,DATE_ESTABLISHED:e.DATE_ESTABLISHED,OP_IS_DESTROYED:void 0!==e.OP_IS_DESTROYED?e.OP_IS_DESTROYED:0,OP_NOTES:void 0!==e.OP_NOTES?e.OP_NOTES:null,SITE_ID:e.SITE_ID,VDATUM_ID:void 0!==e.VDATUM_ID?e.VDATUM_ID:0,LATITUDE_DD:e.LATITUDE_DD,LONGITUDE_DD:e.LONGITUDE_DD,HDATUM_ID:void 0!==e.HDATUM_ID?e.HDATUM_ID:0,HCOLLECT_METHOD_ID:void 0!==e.HCOLLECT_METHOD_ID?e.HCOLLECT_METHOD_ID:0,VCOLLECT_METHOD_ID:void 0!==e.VCOLLECT_METHOD_ID?e.VCOLLECT_METHOD_ID:0,OP_TYPE_ID:e.OP_TYPE_ID,DATE_RECOVERED:void 0!==e.DATE_RECOVERED?e.DATE_RECOVERED:null,UNCERTAINTY:void 0!==e.UNCERTAINTY?e.UNCERTAINTY:null,UNQUANTIFIED:void 0!==e.UNQUANTIFIED?e.UNQUANTIFIED:null,OP_QUALITY_ID:void 0!==e.OP_QUALITY_ID?e.OP_QUALITY_ID:null};return t},N=function(t){"meter"==t.FTorMETER&&(e.aOP.FTorMETER="ft",e.aOP.ELEV_FT=3.2808*e.aOP.ELEV_FT),"cm"==t.FTorCM&&(e.aOP.FTorCM="ft",e.aOP.UNCERTAINTY=e.aOP.UNCERTAINTY/30.48)};e.siteErrors=!1,e.opErrors=!1,e.hwmErrors=!1,e.create=function(){$(".page-loading").removeClass("hidden");var t=e.qhwmForm.quickHWM;if(e.siteErrors=!1,e.opErrors=!1,e.hwmErrors=!1,t.$valid){r.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),r.defaults.headers.common.Accept="application/json";var a=0;e.aSite.LONGITUDE_DD>0&&(e.aSite.LONGITUDE_DD=-1*e.aSite.LONGITUDE_DD),h.save(e.aSite,function(t){a=t.SITE_ID,e.aOP.SITE_ID=a,e.aOP.LATITUDE_DD=t.LATITUDE_DD,e.aOP.LONGITUDE_DD=t.LONGITUDE_DD,e.aOP.HDATUM_ID=t.HDATUM_ID,e.aOP.HCOLLECT_METHOD_ID=t.HCOLLECT_METHOD_ID,e.aHWM.SITE_ID=a,e.aHWM.WATERBODY=t.WATERBODY,e.aHWM.LATITUDE_DD=t.LATITUDE_DD,e.aHWM.LONGITUDE_DD=t.LONGITUDE_DD,e.aHWM.HCOLLECT_METHOD_ID=t.HCOLLECT_METHOD_ID,e.aHWM.HDATUM_ID=t.HDATUM_ID,e.aHWM.FLAG_TEAM_ID=t.MEMBER_ID,e.aHWM.EVENT_ID=n.get("SessionEventID");var r={};N(e.aOP);var s=_(e.aOP);b.save(s,function(t){if(r=t,e.addedIdentifiers.length>0)for(var n=0;n<e.addedIdentifiers.length;n++)b.createOPControlID({id:t.OBJECTIVE_POINT_ID},e.addedIdentifiers[n]).$promise;void 0!==e.aHWM.SURVEY_DATE&&(e.aHWM.SURVEY_TEAM_ID=e.aHWM.FLAG_TEAM_ID),void 0!==e.aHWM.ELEV_FT&&(void 0===e.aHWM.SURVEY_DATE&&(e.aHWM.SURVEY_DATE=S("")),e.aHWM.SURVEY_TEAM_ID=e.aHWM.FLAG_TEAM_ID),y.save(e.aHWM).$promise.then(function(t){toastr.success("Quick HWM created"),$(".page-loading").addClass("hidden"),o.path("/Site/"+a+"/SiteDashboard").replace(),e.apply})})})}else $(".page-loading").addClass("hidden"),e.status.siteOpen=!0,e.status.opOpen=!0,e.status.hwmOpen=!0,angular.element("[name='"+t.$name+"']").find(".ng-invalid:visible:first").focus(),(t.SITE_DESCRIPTION.$invalid||t.LATITUDE_DD.$invalid||t.LONGITUDE_DD.$invalid||t.HDATUM_ID.$invalid||t.HCOLLECT_METHOD_ID.$invalid||t.WATERBODY.$invalid||t.STATE.$invalidv||t.COUNTY.$invalid)&&(e.siteErrors=!0),(t.OP_TYPE_ID.$invalid||t.NAME.$invalid||t.DESCRIPTION.$invalid||t.de.$invalid)&&(e.opErrors=!0),(t.HWM_TYPE_ID.$invalid||t.HWM_ENVIRONMENT.$invalid||t.HWM_QUALITY_ID.$invalid||t.fd.$invalid)&&(e.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("hwmModalCtrl",["$scope","$cookies","$http","$uibModalInstance","$uibModal","allDropdowns","thisHWM","hwmSite","allMembers","HWM",function(e,t,n,o,a,r,s,l,i,d){e.hwmTypeList=r[0],e.hwmQualList=r[1],e.HDatumsList=r[2],e.hCollMList=r[3],e.VDatumsList=r[4],e.vCollMList=r[5],e.markerList=r[6],e.eventList=r[7],e.userRole=t.get("usersRole"),e.FlagMember="",e.SurveyMember="",e.showEventDD=!1,e.adminChanged={},e.showChangeEventDD=function(){e.showEventDD=!e.showEventDD},e.ChangeEvent=function(){e.EventName=e.eventList.filter(function(t){return t.EVENT_ID==e.adminChanged.EVENT_ID})[0].EVENT_NAME},e.LoggedInMember=i.filter(function(e){return e.MEMBER_ID==t.get("mID")})[0],e.aHWM={},e.DMS={},e.thisHWMsite=l,e.datepickrs={},e.open=function(t,n){t.preventDefault(),t.stopPropagation(),e.datepickrs[n]=!0},e.cancel=function(){e.adminChanged={},e.EventName=e.eventList.filter(function(t){return t.EVENT_ID==e.aHWM.EVENT_ID})[0].EVENT_NAME,o.dismiss("cancel")};var c=function(e,t,n){var o=0;return 0>e?(o=-1*e+1*t/60+1*n/3600,(-1*o).toFixed(5)):(o=1*e+1*t/60+1*n/3600,o.toFixed(5))},p=function(e){0>e&&(e=e.toString(),e=e.substring(1));var t=Math.floor(e),n=60*(e-t),o=Math.floor(n),a=(60*(n-o)).toFixed(3);return""+t+":"+o+":"+a};e.latLongChange=function(){if("dd"==e.aHWM.decDegORdms)void 0!==e.DMS.LADeg&&(e.aHWM.LATITUDE_DD=c(e.DMS.LADeg,e.DMS.LAMin,e.DMS.LASec),e.aHWM.LONGITUDE_DD=c(e.DMS.LODeg,e.DMS.LOMin,e.DMS.LOSec),e.DMS={});else if(void 0!==e.aHWM.LATITUDE_DD){var t=p(e.aHWM.LATITUDE_DD).toString(),n=t.split(":");e.DMS.LADeg=n[0],e.DMS.LAMin=n[1],e.DMS.LASec=n[2];var o=p(e.aHWM.LONGITUDE_DD),a=o.split(":");e.DMS.LODeg=-1*a[0],e.DMS.LOMin=a[1],e.DMS.LOSec=a[2],e.aHWM.LATITUDE_DD=void 0,e.aHWM.LONGITUDE_DD=void 0}},e.isNum=function(e){var t=e||window.event,n=t.keyCode||t.which;46!=n&&45!=n&&n>31&&(48>n||n>57)&&(t.returnValue=!1,t.preventDefault&&t.preventDefault())};var u=function(e){var t=new Date;""!==e&&void 0!==e&&(t=new Date(e));var n=t.getFullYear(),o=t.getMonth(),a=("0"+t.getDate()).slice(-2),r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],s=new Date(r[o]+" "+a+", "+n);return s};"empty"!=s?(e.aHWM=s,e.EventName=e.eventList.filter(function(t){return t.EVENT_ID==e.aHWM.EVENT_ID})[0].EVENT_NAME,e.aHWM.FLAGGED_DATE=u(e.aHWM.FLAGGED_DATE),null!==e.aHWM.SURVEY_DATE&&(e.aHWM.SURVEY_DATE=u(e.aHWM.SURVEY_DATE),e.SurveyMember=i.filter(function(t){return t.MEMBER_ID==e.aHWM.SURVEY_TEAM_ID})[0]),e.FlagMember=i.filter(function(t){return t.MEMBER_ID==e.aHWM.FLAG_TEAM_ID})[0],e.save=function(){if(e.HWMForm.$valid){var a={};void 0!==e.adminChanged.EVENT_ID&&(e.aHWM.EVENT_ID=e.adminChanged.EVENT_ID),void 0!==e.aHWM.SURVEY_DATE&&(e.aHWM.SURVEY_TEAM_ID=t.get("mID")),void 0!==e.aHWM.ELEV_FT&&null!==e.aHWM.ELEV_FT&&(void 0===e.aHWM.SURVEY_DATE&&(e.aHWM.SURVEY_DATE=u("")),e.aHWM.SURVEY_TEAM_ID=t.get("mID")),n.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),n.defaults.headers.common.Accept="application/json",d.update({id:e.aHWM.HWM_ID},e.aHWM).$promise.then(function(e){toastr.success("HWM updated"),a=e;var t=[a,"updated"];o.close(t)})}},e.deleteHWM=function(){var r=a.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return e.aHWM},what:function(){return"HWM"}}});r.result.then(function(e){n.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),d["delete"]({id:e.HWM_ID},e).$promise.then(function(){toastr.success("HWM Removed");var e=["de","deleted"];o.close(e)},function(e){toastr.error("Error: "+e.statusText)})},function(){})}):(e.aHWM={SITE_ID:e.thisHWMsite.SITE_ID,EVENT_ID:t.get("SessionEventID"),HWM_ENVIRONMENT:"Riverine",BANK:"N/A",STILLWATER:0,LATITUDE_DD:l.LATITUDE_DD,LONGITUDE_DD:l.LONGITUDE_DD,WATERBODY:l.WATERBODY,HDATUM_ID:l.HDATUM_ID,HCOLLECT_METHOD_ID:l.HCOLLECT_METHOD_ID,FLAG_DATE:u(""),FLAG_TEAM_ID:e.LoggedInMember.MEMBER_ID},e.EventName=t.get("SessionEventName"),e.FlagMember=e.LoggedInMember,e.create=function(){if(this.HWMForm.$valid){var a={};void 0!==e.aHWM.SURVEY_DATE&&null!==e.aHWM.SURVEY_DATE&&(e.aHWM.SURVEY_TEAM_ID=e.FLAG_TEAM_ID),void 0!==e.aHWM.ELEV_FT&&null!==e.aHWM.ELEV_FT&&(void 0===e.aHWM.SURVEY_DATE&&(e.aHWM.SURVEY_DATE=u("")),e.aHWM.SURVEY_TEAM_ID=e.FLAG_TEAM_ID),n.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),n.defaults.headers.common.Accept="application/json",d.save(e.aHWM).$promise.then(function(e){a=e,toastr.success("HWM created");var t=[a,"created"];o.close(t)})}}),e.aHWM.decDegORdms="dd"}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("reporting/completedReportView.html",'<uib-accordion close-others="false"><uib-accordion-group heading="Section 1: Report Parameters" is-open="true"><div class="pull-left col-md-7"><div class="row"><div class="col-md-12"><label class="col-md-12">Date being reported:</label><div class="col-md-6" style="padding-left:15px;padding-right:15px"><span>{{REPORT_DATE}}</span></div></div><div class="col-md-12"><label class="col-md-12">Event:</label><div class="col-md-6"><span>{{EVENT_NAME}}</span></div></div><div class="col-md-12"><label class="col-md-12">State:</label><div class="col-md-6"><span>{{STATE}}</span></div></div></div><br></div></uib-accordion-group><uib-accordion-group heading="Section 2: Personnel and Vehicle Counts"><table class="table"><tr><td></td><td></td><td style="font-family: \'BryantBold\'">Surfacewater</td><td style="font-family: \'BryantBold\'">Water Quality and Other</td></tr><tr><td colspan="2"><span class="required">Employees not accounted for</span></td><td>{{SW_FIELDPERS_NOTACCT}}</td><td>{{WQ_FIELDPERS_NOTACCT}}</td></tr><tr><td rowspan="3"><span>Personnel in<br>the field</span></td><td><span class="required">Yesterday</span></td><td>{{SW_YEST_FIELDPERS}}</td><td>{{WQ_YEST_FIELDPERS}}</td></tr><tr><td><span class="required">Today</span></td><td>{{SW_TOD_FIELDPERS}}</td><td>{{WQ_TOD_FIELDPERS}}</td></tr><tr><td><span class="required">Tomorrow</span></td><td>{{SW_TMW_FIELDPERS}}</td><td>{{WQ_TMW_FIELDPERS}}</td></tr><tr><td rowspan="3"><span>Personnel in<br>the office</span></td><td><span class="required">Yesterday</span></td><td>{{SW_YEST_OFFICEPERS}}</td><td>{{WQ_YEST_OFFICEPERS}}</td></tr><tr><td><span class="required">Today</span></td><td>{{SW_TOD_OFFICEPERS}}</td><td>{{WQ_TOD_OFFICEPERS}}</td></tr><tr><td><span class="required">Tomorrow</span></td><td>{{SW_TMW_OFFICEPERS}}</td><td>{{WQ_TMW_OFFICEPERS}}</td></tr><tr><td rowspan="3"><span>Vehicles<br>deployed</span></td><td><span class="required">Trucks & Cars</span></td><td>{{SW_AUTOS_DEPL}}</td><td>{{WQ_AUTOS_DEPL}}</td></tr><tr><td><span class="required">Boats</span></td><td>{{SW_BOATS_DEPL}}</td><td>{{WQ_BOATS_DEPL}}</td></tr><tr><td><span class="required">Other</span></td><td>{{SW_OTHER_DEPL}}</td><td>{{WQ_OTHER_DEPL}}</td></tr></table></uib-accordion-group><uib-accordion-group heading="Section 3: Instrumentation & Sampling Counts"><table class="table"><tr><td colspan="2" class="col-md-5"><span class="required">Gage visits (cumulative)</span></td><td colspan="2" class="col-md-3">{{PLAN_DISCHARGE_MEAS}}</td></tr><tr><td colspan="2"><span class="required">Gages down at present</span></td><td colspan="2">{{PLAN_DISCHARGE_MEAS}}</td></tr><tr><td rowspan="2"><span>Discharge measurements</span></td><td><span class="required">To date</span></td><td colspan="2">{{PLAN_DISCHARGE_MEAS}}</td></tr><tr><td><span class="required">Planned</span></td><td colspan="2">{{PLAN_DISCHARGE_MEAS}}</td></tr><tr><td rowspan="2"><span>Check measurements</span></td><td><span class="required">To Date</span></td><td colspan="2">{{TOT_CHECK_MEAS}} <input class="form-control" id="chkMeasToDate" name="newReport.TOT_CHECK_MEAS" ng-model="newReport.TOT_CHECK_MEAS" type="text" numeric-only required></td></tr><tr><td><span class="required">Planned</span></td><td colspan="2">{{PLAN_CHECK_MEAS}} <input class="form-control" id="chkMeasPlanned" name="newReport.PLAN_CHECK_MEAS" ng-model="newReport.PLAN_CHECK_MEAS" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Indirect measurements planned</span></td><td colspan="2">{{PLAN_INDIRECT_MEAS}} <input class="form-control" id="indMeasPlan" name="newReport.PLAN_INDIRECT_MEAS" ng-model="newReport.PLAN_INDIRECT_MEAS" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Rating extensions</span></td><td colspan="2">{{}} <input class="form-control" id="rateExt" name="newReport.RATING_EXTENS" ng-model="newReport.RATING_EXTENS" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Peaks of record on gages to date<br>( &#62; 20 years of record)</span></td><td colspan="2">{{}} <input class="form-control" id="peaks" name="newReport.GAGE_PEAK_RECORD" ng-model="newReport.GAGE_PEAK_RECORD" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Rapid Deployment gages to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input class="form-control" id="rdgPlanned" name="newReport.PLAN_RAPDEPL_GAGE" ng-model="newReport.PLAN_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="rdgDeployed" name="newReport.DEP_RAPDEPL_GAGE" readonly="readonly" ng-model="newReport.DEP_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="rdgRecovered" name="newReport.REC_RAPDEPL_GAGE" readonly="readonly" ng-model="newReport.REC_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="rdgLost" name="newReport.LOST_RAPDEPL_GAGE" readonly="readonly" ng-model="newReport.LOST_RAPDEPL_GAGE" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Water Level Sensors to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input class="form-control" id="wlsPlanned" name="newReport.PLAN_WTRLEV_SENSOR" ng-model="newReport.PLAN_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="wlsDeployed" name="newReport.DEP_WTRLEV_SENSOR" readonly="readonly" ng-model="newReport.DEP_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="wlsRecovered" name="newReport.REC_WTRLEV_SENSOR" readonly="readonly" ng-model="newReport.REC_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="wlsLost" name="newReport.LOST_WTRLEV_SENSOR" readonly="readonly" ng-model="newReport.LOST_WTRLEV_SENSOR" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Wave Sensors to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input class="form-control" id="wsPlanned" name="newReport.PLAN_WV_SENS" ng-model="newReport.PLAN_WV_SENS" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="wsDeployed" name="newReport.DEP_WV_SENS" readonly="readonly" ng-model="newReport.DEP_WV_SENS" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="wsRecovered" name="newReport.REC_WV_SENS" readonly="readonly" ng-model="newReport.REC_WV_SENS" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="wsLost" name="newReport.LOST_WV_SENS" readonly="readonly" ng-model="newReport.LOST_WV_SENS" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Barometers to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input class="form-control" id="barPlanned" name="newReport.PLAN_BAROMETRIC" ng-model="newReport.PLAN_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="barDeployed" name="newReport.DEP_BAROMETRIC" readonly="readonly" ng-model="newReport.DEP_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="barRecovered" name="newReport.REC_BAROMETRIC" readonly="readonly" ng-model="newReport.REC_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="barLost" name="newReport.LOST_BAROMETRIC" readonly="readonly" ng-model="newReport.LOST_BAROMETRIC" type="text" numeric-only required></td></tr><tr><td rowspan="4"><span>Meteorological Sensors to date</span></td><td><span class="required">Planned</span></td><td colspan="2"><input class="form-control" id="msPlanned" name="newReport.PLAN_METEOROLOGICAL" ng-model="newReport.PLAN_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td><span>Deployed</span></td><td colspan="2"><input class="form-control" id="msDeployed" name="newReport.DEP_METEOROLOGICAL" readonly="readonly" ng-model="newReport.DEP_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td><span>Recovered</span></td><td colspan="2"><input class="form-control" id="msRecovered" name="newReport.REC_METEOROLOGICAL" readonly="readonly" ng-model="newReport.REC_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td><span>Lost</span></td><td colspan="2"><input class="form-control" id="msLost" name="newReport.LOST_METEOROLOGICAL" readonly="readonly" ng-model="newReport.LOST_METEOROLOGICAL" type="text" numeric-only required></td></tr><tr><td rowspan="2"><span>Highwater Mark to date</span></td><td><span>Flagged</span></td><td colspan="2"><input class="form-control" id="hwmFlagged" name="newReport.HWM_FLAGGED" readonly="readonly" ng-model="newReport.HWM_FLAGGED" type="text" numeric-only required></td></tr><tr><td><span>Collected</span></td><td colspan="2"><input class="form-control" id="hwmCollected" name="newReport.HWM_COLLECTED" readonly="readonly" ng-model="newReport.HWM_COLLECTED" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">QW Gage visits (cumulative)</span></td><td colspan="2"><input class="form-control" id="qwGageVisit" name="newReport.QW_GAGE_VISIT" ng-model="newReport.QW_GAGE_VISIT" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Continuous QW Gages visited</span></td><td colspan="2"><input class="form-control" id="contQwGageVisit" name="newReport.QW_CONT_GAGEVISIT" ng-model="newReport.QW_CONT_GAGEVISIT" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Continuous QW Gages down</span></td><td colspan="2"><input class="form-control" id="qwGagesDown" name="newReport.QW_GAGE_DOWN" ng-model="newReport.QW_GAGE_DOWN" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Discrete QW samples collected</span></td><td colspan="2"><input class="form-control" id="qwSamplesCol" name="newReport.QW_DISCR_SAMPLES" ng-model="newReport.QW_DISCR_SAMPLES" type="text" numeric-only required></td></tr><tr><td colspan="2"><span class="required">Sediment samples collected</span></td><td colspan="2"><input class="form-control" id="sedSamplesCol" name="newReport.COLL_SEDSAMPLES" ng-model="newReport.COLL_SEDSAMPLES" type="text" numeric-only required></td></tr></table></uib-accordion-group><uib-accordion-group heading="Section 4: Notes"><div>Notes detailing the day\'s field activities (optional)</div><textarea class="form-control" id="NOTES" type="text" rows="5" cols="90" ng-model="newReport.NOTES">\n        <div>*Limit 2000 characters</div>\n    </uib-accordion-group>\n    \n    <uib-accordion-group heading="Section 5: Contact Information">\n        <div><b>Submitter</b></div>\n        <div><span class="col-md-3">Name:</span><span>{{MemberLoggedIn.FNAME}} {{MemberLoggedIn.LNAME}}</span></div>\n        <div><span class="col-md-3">Phone</span><span>{{MemberLoggedIn.PHONE}}</span></div>\n        <div><span class="col-md-3">Email</span><span>{{MemberLoggedIn.EMAIL}}</span></div>\n        <div><span class="col-md-3">Office Name</span><span>{{MemberLoggedIn.AGENCY_NAME}}</span></div>\n        <div><span class="col-md-3">Office Address</span><span>{{MemberLoggedIn.AGENCY_ADDRESS}}</span></div>\n\n        <h3>Event Contacts</h3>\n\n        \n        <div><b>Deployed Staff (required)</b></div>\n        <div class="col-sm-12" style="margin-bottom:15px">\n            <div class="col-md-3 form-group required">\n                <span class="col-md-12 control-label req" for="FNAME">First Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="D_FNAME" name="FNAME" type="text" ng-model="DeployStaff.FNAME" required>\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group required">\n                <span class="col-md-12 control-label req" for="LNAME">Last Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="D_LNAME" name="LNAME" type="text" ng-model="DeployStaff.LNAME" required>\n                </div>\n            </div>\n\n            <div class="col-md-4 form-group required">\n                <span class="col-md-12 control-label req" for="EMAIL">Email:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="D_EMAIL" name="EMAIL" type="email" ng-model="DeployStaff.EMAIL" required>\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group required">\n                <span class="col-md-12 control-label req" for="PHONE">Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="D_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="DeployStaff.PHONE" required>\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="D_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="DeployStaff.ALTERNATE_PHONE">\n                </div>\n            </div>\n        </div>\n\n        \n        <div><b>General (optional)</b></div>\n        <div class="col-sm-12" style="margin-bottom:15px">\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="FNAME">First Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="G_FNAME" name="FNAME" type="text" ng-model="GenStaff.FNAME">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="G_LNAME" name="LNAME" type="text" ng-model="GenStaff.LNAME">\n                </div>\n            </div>\n\n            <div class="col-md-4 form-group">\n                <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="G_EMAIL" name="EMAIL" type="email" ng-model="GenStaff.EMAIL">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="G_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="GenStaff.PHONE">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="G_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="GenStaff.ALTERNATE_PHONE">\n                </div>\n            </div>\n        </div>\n\n        \n        <div><b>Inland Flood (optional)</b></div>\n        <div class="col-sm-12" style="margin-bottom:15px">\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="FNAME">First Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="I_FNAME" name="FNAME" type="text" ng-model="InlandStaff.FNAME">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="I_LNAME" name="LNAME" type="text" ng-model="InlandStaff.LNAME">\n                </div>\n            </div>\n\n            <div class="col-md-4 form-group">\n                <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="I_EMAIL" name="EMAIL" type="email" ng-model="InlandStaff.EMAIL">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="I_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="InlandStaff.PHONE">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="I_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="InlandStaff.ALTERNATE_PHONE">\n                </div>\n            </div>\n        </div>\n\n        \n        <div><b>Coastal Flood (optional)</b></div>\n        <div class="col-sm-12" style="margin-bottom:15px">\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="FNAME">First Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="C_FNAME" name="FNAME" type="text" ng-model="CoastStaff.FNAME">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="C_LNAME" name="LNAME" type="text" ng-model="CoastStaff.LNAME">\n                </div>\n            </div>\n\n            <div class="col-md-4 form-group">\n                <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="C_EMAIL" name="EMAIL" type="email" ng-model="CoastStaff.EMAIL">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="C_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="CoastStaff.PHONE">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="C_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="CoastStaff.ALTERNATE_PHONE">\n                </div>\n            </div>\n        </div>\n\n        \n        <div><b>Water Quality (optional)</b></div>\n        <div class="col-sm-12" style="margin-bottom:15px">\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label req" for="FNAME">First Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="W_FNAME" name="FNAME" type="text" ng-model="WaterStaff.FNAME">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="LNAME">Last Name:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="W_LNAME" name="LNAME" type="text" ng-model="WaterStaff.LNAME">\n                </div>\n            </div>\n\n            <div class="col-md-4 form-group">\n                <span class="col-md-12 control-label" for="EMAIL">Email:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="W_EMAIL" name="EMAIL" type="email" ng-model="WaterStaff.EMAIL">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="PHONE">Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="W_PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="WaterStaff.PHONE">\n                </div>\n            </div>\n\n            <div class="col-md-3 form-group">\n                <span class="col-md-12 control-label" for="ALTERNATE_PHONE">Alternate Phone:</span>\n                <div class="col-md-12">\n                    <input class="form-control" id="W_ALTERNATE_PHONE" name="ALTERNATE_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="WaterStaff.ALTERNATE_PHONE">\n                </div>\n            </div>\n        </div>\n    </uib-accordion-group>\n\n    <div>\n        <input type="checkbox" name="COMPLETE" ng-model="newReport.COMPLETE" ng-true-value="\'1\'" ng-false-value="\'0\'">\n        <span>Check if this Report is Complete. (If left unchecked, you may come back later to finish it)</span>\n    </div>\n    <div class="form-group">\n        <div class="col-md-4 col-md-offset-2">\n            <span>\n                <button type="submit" class="btn btn-primary" ng-click="saveReport(fullReportForm.$valid)">\n                    <span>Save</span>\n                </button>\n            </span>\n        </div>\n    </div>\n\n</uib-accordion>');

}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("hwmCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteHWMs","allHWMTypes","allHWMQualities","allHorDatums","allMarkers","allHorCollMethods","allVertDatums","allVertColMethods","allEvents","MEMBER",function(e,t,n,o,a,r,s,l,i,d,c,p,u,m,E,f,v,g,T){void 0===t.get("STNCreds")||""===t.get("STNCreds")?(e.auth=!1,n.path("/login")):(e.hwmCount={total:d.length},e.SiteHWMs=d,e.$watch(function(){return t.get("SessionEventName")},function(n){e.sessionEventName=void 0!==n?n:"All Events",e.sessionEventExists="All Events"!=e.sessionEventName?!0:!1,void 0!==n?(e.SiteHWMs=d.filter(function(e){return e.EVENT_ID==t.get("SessionEventID")}),e.hwmCount={total:e.SiteHWMs.length}):(e.SiteHWMs=d,e.hwmCount={total:e.SiteHWMs.length})}),e.showHWMModal=function(n){var o=[c,p,u,E,f,v,m,g],s=(e.SiteHWMs.indexOf(n),r.open({templateUrl:"HWMmodal.html",controller:"hwmModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{allDropdowns:function(){return o},thisHWM:function(){return 0!==n?n:"empty"},hwmSite:function(){return i},allMembers:function(){return a.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),a.defaults.headers.common.Accept="application/json",T.getAll().$promise}}}));s.result.then(function(t){if("created"==t[1]&&(e.SiteHWMs.push(t[0]),e.hwmCount.total=e.SiteHWMs.length),"updated"==t[1]){var o=e.SiteHWMs.indexOf(n);e.SiteHWMs[o]=t[0]}if("deleted"==t[1]){var a=e.SiteHWMs.indexOf(n);e.SiteHWMs.splice(a,1),e.hwmCount.total=e.SiteHWMs.length}})})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("objectivePoint/objectivePointList.html",'<uib-accordion close-others="false"><uib-accordion-group is-open="status.opOpen"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.opOpen, \'glyphicon-chevron-right\': !status.opOpen}"></i> <span>Objective Points</span> <span class="badge pull-right">{{opCount.total}}</span></uib-accordion-heading><div class="btn-group pull-right"><div class="btn-group"><button type="button" class="borderLess" ng-click="showOPModal(0)" tooltip-placement="right" uib-tooltip="Add an OP"><span class="glyphicon glyphicon-plus"></span></button></div></div><ul><li ng-repeat="op in SiteObjectivePoints"><a class="btn" ng-click="showOPModal(op)">{{op.NAME}}</a></li></ul></uib-accordion-group></uib-accordion>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("homeCtrl",["$scope","$rootScope","$location","$cookies","$http",function(e,t,n,o,a){void 0===o.get("STNCreds")||""===o.get("STNCreds")?(e.auth=!1,n.path("/login")):t.thisPage="Home"}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("map/map.html",'<div class="panel panel-primary"><h3>{{map}}</h3></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("helpCtrl",["$scope",function(e){e.helpInfo={},e.helpInfo.fact="Some really interesting help will be here."}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("member/membersList.html",'<div class=""><h3>Accounts</h3><div ng-show="loggedInUser.Role == \'Admin\'"><a ui-sref="members.MemberInfo({id:0})"><i class="glyphicon glyphicon-plus"></i>Create New Member</a></div><script>var sortingOrder = \'Name\';</script><table class="table table-striped table-condensed"><thead><tr><th class="Name">Name&nbsp;<a ng-click="sort_by(\'Name\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Agency">Agency&nbsp;<a ng-click="sort_by(\'Agency\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Role">Role&nbsp;<a ng-click="sort_by(\'Role\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="m in memberList | orderBy:sortingOrder:reverse"><td><a ui-sref="members.MemberInfo({id: m.MEMBER_ID})">{{m.Name}}</a></td><td>{{m.Agency}}</td><td>{{m.Role}}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("member/memberInfo.html",'<form ng-show="matchingUsers || loggedInUser.Role == \'Admin\'" class="form-horizontal" id="accountForm" name="accountForm"><fieldset><legend>ACCOUNT INFORMATION</legend><div ng-if="(loggedInUser.Role == \'Admin\' && aMember.MEMBER_ID != undefined) && !matchingUsers"><button class="btn btn-danger" ng-click="DeleteMember(aMember)">Delete Member</button></div><div class="form-group required" ng-class="{\'has-error\':accountForm.FNAME.$invalid && accountForm.FNAME.$dirty}"><label class="col-md-3 control-label req" for="FNAME">First Name:</label><div class="col-md-3"><input class="form-control" id="FNAME" name="FNAME" ng-model="aMember.FNAME" type="text" placeholder="First Name" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)" required></div></div><div class="form-group required" ng-class="{\'has-error\':accountForm.LNAME.$invalid && accountForm.LNAME.$dirty}"><label class="col-md-3 control-label req" for="LNAME">Last Name:</label><div class="col-md-3"><input class="form-control" id="LNAME" name="LNAME" ng-model="aMember.LNAME" type="text" placeholder="Last Name" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)" required></div></div><div class="form-group required"><label class="col-md-3 control-label req" for="USERNAME">Username:</label><div class="col-md-3"><input ng-show="aMember.MEMBER_ID == undefined" class="form-control" id="USERNAME" name="USERNAME" ng-model="aMember.USERNAME" type="text" placeholder="User Name" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)" required> <span ng-show="aMember.MEMBER_ID != undefined">{{aMember.USERNAME}}</span></div></div><div class="form-group required"><label class="col-md-3 control-label req" for="AGENCY_ID">Agency:</label><div class="col-md-3"><select class="form-control" id="AGENCY" name="AGENCY_ID" ng-model="aMember.AGENCY_ID" ng-options="r.AGENCY_ID as r.AGENCY_NAME for r in agencyList | orderBy: \'AGENCY_NAME\'" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)" required><option value="">Select Agency</option></select></div></div><div class="form-group required"><label class="col-md-3 control-label req" for="ROLE">Role:</label><div class="col-md-3"><select ng-show="aMember.MEMBER_ID == undefined" class="form-control" id="ROLE" name="ROLE_ID" ng-model="aMember.ROLE_ID" ng-options="r.ROLE_ID as r.ROLE_NAME for r in roleList | orderBy: \'ROLE_NAME\'" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)" required><option value="">Select Role</option></select><span ng-show="aMember.MEMBER_ID != undefined">{{aMember.Role}}</span></div></div><div class="form-group required"><label class="col-md-3 control-label req" for="PHONE">Phone:</label><div class="col-md-6"><input class="form-control" id="PHONE" name="PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="aMember.PHONE" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)" required></div>&nbsp; <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Enter the member\'s phone number. To add an extension, immediately following the phone number type \'x\' and then the extension number."><span class="glyphicon glyphicon-question-sign"></span></button></div><div class="form-group required"><label class="col-md-3 control-label req" for="EMAIL">Email:</label><div class="col-md-6"><input class="form-control" id="EMAIL" name="EMAIL" type="email" placeholder="" ng-model="aMember.EMAIL" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)" required></div>&nbsp; <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Enter the member\'s email address."><span class="glyphicon glyphicon-question-sign"></span></button></div><div class="form-group"><label class="col-md-3 control-label" for="RSSFEED">RSS Feed:</label><div class="col-md-6"><input class="form-control" id="RSSFEED" name="RSSFEED" type="text" placeholder="" ng-model="aMember.RSSFEED" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)"></div></div><div class="form-group"><label class="col-md-3 control-label" for="EMERGENCY_CONTACT_NAME">Emergency Contact Name:</label><div class="col-md-6"><input class="form-control" id="EMERGENCY_CONTACT_NAME" name="EMERGENCY_CONTACT_NAME" type="text" placeholder="" ng-model="aMember.EMERGENCY_CONTACT_NAME" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)"></div></div><div class="form-group"><label class="col-md-3 control-label" for="EMERGENCY_CONTACT_PHONE">Emergency Contact Phone:</label><div class="col-md-6"><input class="form-control" id="EMERGENCY_CONTACT_PHONE" name="EMERGENCY_CONTACT_PHONE" type="text" my-input-mask="{mask: \'(999) 999-9999[ x99999]\', greedy:false}" ng-model="aMember.EMERGENCY_CONTACT_PHONE" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(accountForm.$valid)"></div>&nbsp; <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Enter the emergency contact\'s phone number. To add an extension, immediately following the phone number type \'x\' and then the extension number."><span class="glyphicon glyphicon-question-sign"></span></button></div><div class="form-group" ng-hide="aMember.MEMBER_ID == undefined"><label class="col-md-3 control-label" for="Password">Password:</label><div class="col-md-6"><button ng-show="!changePass" ng-click="changeMyPassBtn($event)">Change Password</button><div class="col-md-12" ng-show="changePass"><div class="col-md-10"><label class="col-md-5 control-label" for="NewPassword">New Password:</label><div class="col-md-7"><input class="form-control" ng-model="pass.newP" name="NPASSWORD" type="password" password-validate></div><span class="ui-state-error h5-message" ng-show="(accountForm.NPASSWORD.$error.passwordValidate)"><span class="h5-arrow"></span><span class="h5-content">For password requirement, click the \'?\' icon.</span></span></div><div style="margin-top:5px" class="col-md-10"><label class="col-md-5 control-label" for="ConfirmPassword">Confirm Password:</label><div class="col-md-7"><input class="form-control" name="CPASSWORD" type="password" placeholder="" password-validate same-as="pass.newP" ng-model="pass.confirmP"></div><span class="ui-state-error h5-message" ng-show="(accountForm.CPASSWORD.$error.passwordValidate)"><span class="h5-arrow"></span><span class="h5-content">For password requirement, hover over the \'?\' icon.</span></span> <span class="ui-state-error h5-message" ng-show="(accountForm.CPASSWORD.$error.passwordMismatch)"><span class="h5-arrow"></span><span class="h5-conent">Mismatch password</span></span></div>&nbsp; <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Password must be at least 8 characters long, contain at least 1 uppercase, 1 lowercase and 1 numeric. Passwords may contain any of these special characters ONLY: \'_\', \'$\', \'#\'"><span class="glyphicon glyphicon-question-sign"></span></button><div class="form-group"><div class="col-md-12" style="margin-top:7px"><span><button class="btn btn-primary" ng-disabled="accountForm.NPASSWORD.$error.passwordValidate || accountForm.CPASSWORD.$error.passwordValidate || accountForm.CPASSWORD.$error.passwordMismatch" ng-click="ChangePassword()">Change Password</button></span> <span><button class="btn btn-primary" style="margin-right:10px" ng-click="DontChangePass()">Never mind</button></span></div></div></div></div></div><div class="form-group required" ng-if="aMember.MEMBER_ID == undefined" ng-class="{\'has-error\':accountForm.NPASSWORD.$invalid && accountForm.NPASSWORD.$dirty}"><label class="col-md-3 control-label" for="Password">New Password:</label><div class="col-md-3"><input class="form-control" ng-model="pass.newP" name="NPASSWORD" id="NPASSWORD" type="password" password-validate required> <span class="ui-state-error h5-message" ng-show="(accountForm.NPASSWORD.$error.passwordValidate)"><span class="h5-arrow"></span><span class="h5-content">For password requirement, hover over the \'?\' icon.</span></span></div>&nbsp; <button type="button" class="borderLess" tooltip-placement="right" uib-tooltip="Password must be at least 8 characters long, contain at least 1 uppercase, 1 lowercase and 1 numeric. Passwords may contain any of these special characters ONLY: \'_\', \'$\', \'#\'"><span class="glyphicon glyphicon-question-sign"></span></button></div><div class="form-group required" ng-if="aMember.MEMBER_ID == undefined" ng-class="{\'has-error\':accountForm.CPASSWORD.$invalid && accountForm.CPASSWORD.$dirty}"><label class="col-md-3 control-label" for="Password">Confirm Password:</label><div class="col-md-3"><input class="form-control" id="CPASSWORD" name="CPASSWORD" type="password" placeholder="" password-validate same-as="pass.newP" ng-model="pass.confirmP" required> <span class="ui-state-error h5-message" ng-show="(accountForm.CPASSWORD.$error.passwordValidate)"><span class="h5-arrow"></span><span class="h5-content">For password requirement, hover over the \'?\' icon.</span></span> <span class="ui-state-error h5-message" ng-show="(accountForm.CPASSWORD.$error.passwordMismatch)"><span class="h5-arrow"></span><span class="h5-conent">Mismatch password</span></span></div></div><div class="form-group"><div class="col-md-4 col-md-offset-2"><span><button ng-if="aMember.MEMBER_ID == undefined" class="btn btn-primary" style="width:80px;margin-right:10px" ng-click="save(accountForm.$valid)"><span>Create</span></button></span></div></div></fieldset></form><form ng-show="!matchingUsers && loggedInUser.Role != \'Admin\'" class="form-horizontal" name="noForm"><fieldset><legend>ACCOUNT INFORMATION</legend><div class="form-group"><label class="col-md-3 control-label">Name:</label><div class="col-md-6"><span>{{aMember.FNAME}} {{aMember.LNAME}}</span></div></div><div class="form-group"><label class="col-md-3 control-label">Username:</label><div class="col-md-6"><span>{{aMember.USERNAME}}</span></div></div><div class="form-group"><label class="col-md-3 control-label">Email:</label><div class="col-md-6"><span>{{aMember.EMAIL}}</span></div></div><div class="form-group"><label class="col-md-3 control-label">Phone:</label><div class="col-md-6"><span>{{aMember.PHONE}}</span></div></div><div class="form-group"><label class="col-md-3 control-label">Role:</label><div class="col-md-6"><span>{{loggedInUser.Role}}</span></div></div></fieldset></form><div style="margin-bottom:10px"><button class="btn btn-primary" back-button><span>Cancel/Back</span></button></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("fileUploadCtrl",["$scope","$location","$cookies","Upload","multipartForm","fileTypeList","agencyList",function(e,t,n,o,a,r,s){void 0===n.get("STNCreds")||""===n.get("STNCreds")?(e.auth=!1,t.path("/login")):(e.loggedInMember={},e.loggedInMember.fullName=n.get("usersName"),e.loggedInMember.ID=n.get("mID"),e.map="Welcome to the new STN File upload Page!!",e.allFileTypes=r,e.allAgencies=s,e.fileType=0,e.aFile={},e.toggleCaptionPreview=!1,e.datepickrs={},e.open=function(t,n){t.preventDefault(),t.stopPropagation(),e.datepickrs[n]=!0},e.format="MMM dd, yyyy",e.fileTypeChange=function(){e.fileType=e.aFile.FILETYPE_ID},e.isNum=function(e){var t=e||window.event,n=t.keyCode||t.which;46!=n&&45!=n&&n>31&&(48>n||n>57)&&(t.returnValue=!1,t.preventDefault&&t.preventDefault())},e.ShowCaption=function(){e.toggleCaptionPreview===!0?(e.toggleCaptionPreview=!1,e.photoCaption=""):(e.toggleCaptionPreview=!0,e.photoCaption="This is the photo caption.")},e.zones=[{name:"UTC"},{name:"PST"},{name:"MST"},{name:"CST"},{name:"EST"}],e.elevationStats={},e.submit=function(){if(e.aFile.File){var t={FileEntity:{FILETYPE_ID:e.aFile.FILETYPE_ID,FILE_URL:e.aFile.FILE_URL,PROCESSOR_ID:e.loggedInMember.ID,FILE_DATE:e.aFile.FILE_DATE,DESCRIPTION:e.aFile.DESCRIPTION,HWM_ID:void 0!==e.aFile.HWM_ID?e.aFile.HWM_ID:0,SITE_ID:e.aFile.SITE_ID,INSTRUMENT_ID:void 0!==e.aFile.INSTRUMENT_ID?e.aFile.INSTRUMENT_ID:0},File:e.aFile.File};a.post(t)}})}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("fileCtrl",["$scope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteFiles",function(e,t,n,o,a,r,s,l,i,d){void 0===t.get("STNCreds")||""===t.get("STNCreds")?(e.auth=!1,n.path("/login")):e.fileCount={total:d.length}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("member/memberHolderView.html","<div ui-view></div>")}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("main/mainView.html",'<div ng-controller="loginCtrl"><div ng-include src="\'component/logInOut/login.html\'"></div></div>')}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("eventSessionModalCtrl",["$scope","$rootScope","$cookies","$uibModalInstance","allEvents","allEventTypes","allStates","EVENT",function(e,t,n,o,a,r,s,l){e.EventList=a,e.EventTypeList=r,e.StateList=s;var i=n.get("SessionEventID");e.event={EventChosen:void 0!==i?Number(i):""},$(".page-loading").addClass("hidden"),e.filterEvents=function(){var t=null!==e.event.DATE&&void 0!==e.event.DATE?e.event.DATE:null,n=null!==e.event.TYPE&&void 0!==e.event.TYPE?e.event.TYPE:0,o=null!==e.event.STATE&&void 0!==e.event.STATE?e.event.STATE:null;l.getFilteredEvents({Date:t,Type:n,State:o}).$promise.then(function(t){e.EventList=t})},e.clearFilters=function(){e.event={EventChosen:void 0!==i?Number(i):""},e.EventList=a},e.setEvent=function(){e.evID=e.event.EventChosen;var r=a.filter(function(t){return t.EVENT_ID==e.evID})[0];n.put("SessionEventID",e.evID),n.put("SessionEventName",r.EVENT_NAME),t.sessionEvent="Session Event: "+r.EVENT_NAME+".",o.dismiss("cancel")},e.clearEvent=function(){e.event={},n.remove("SessionEventID"),n.remove("SessionEventName"),t.sessionEvent="",o.dismiss("cancel")},e.datepickrs={},e.open=function(t,n){t.preventDefault(),t.stopPropagation(),e.datepickrs[n]=!0},e.close=function(){o.dismiss("cancel")},$(".page-loading").addClass("hidden")}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("logInOut/login.html",'<div>This Data Management System (DMS) supports the <a href="http://stn.wimcloud.usgs.gov/stn" target="_blank">STN Mapper</a>, which is a metadata-discovery tool that captures information about ....</div><br><div>You can use the STN DMS to submit, edit, and delete your information.</div><div class="stn-login-wrapper"><form ng-submit="submit()" ng-controller="loginCtrl"><div class="stn-login-error">{{error}}</div><div class="stn-login-label"><label for="username">USERNAME:</label></div><div class="stn-login-element"><input type="text" ng-model="username" id="userNameFocus" name="username" placeholder="Enter User Name" required focus></div><div class="stn-login-label"><label for="password">PASSWORD:</label></div><div class="stn-login-element"><input type="password" ng-model="password" name="password" placeholder="Enter Password" required data-toggle="tooltip" data-trigger="manual" data-title="Caps lock is on"></div><div class="stn-login-button"><button type="submit" class="form-button">Sign in</button></div></form></div><br clear="all"><div>If you have questions about STN or need assistance, please contact:</div><div><span>Marie Peppler</span><br><span>mpeppler@usgs.gov</span><br><span>703-648-5314</span></div>')}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("eventSessionCtrl",["$scope","$rootScope","$cookies","$uibModal","$location","$state","EVENT","EVENT_TYPE","STATE",function(e,t,n,o,a,r,s,l,i){e.openEventModal=function(){$(".page-loading").removeClass("hidden");var e=o.open({templateUrl:"ChooseEvent.html",controller:"eventSessionModalCtrl",size:"md",backdrop:"static",windowClass:"rep-dialog",resolve:{allEvents:function(){return s.getAll().$promise},allEventTypes:function(){return l.getAll().$promise},allStates:function(){return i.getAll().$promise}}});e.result.then(function(e){})}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("home/homeBase.html",'<div class=""><div style="border:red 1px solid;padding:5px;margin-bottom:10px"><span style="font-family:\'BryantBold\';font-size:large">Important usage notes and instructions</span><div style="margin:5px"><p>Many of the supplemental GIS data layers found in the map tab are from a range of sources and are not maintained by WiM. We offer these map layers as a decision-support supplement to the main STN sites layer, but we cannot guarantee their performance and availability. Many of these externally maintained layers are large datasets and may load slowly depending on network conditions, and in some cases may fail to load when bandwidth is low.</p></div></div></div><script type="text/ng-template" id="TeamMembers.html"><div class="modal-header">\n        <h3 class="modal-title">Team Members</h3>\n    </div>\n    <div class="modal-body">\n        <div ng-repeat="tm in TeamMemberList" class="panel panel-default">\n            <div class="panel-heading">MEMBER: {{tm.FNAME}} {{tm.LNAME}}</div>\n            <div class="panel-body">\n                <div class="col-md-12">\n                    <label class="col-md-5">User Name:</label>\n                    <span class="col-md-6">{{tm.USERNAME}}</span>\n                </div>\n                <div class="col-md-12">\n                    <label class="col-md-5">Agency:</label>\n                    <span class="col-md-7">{{tm.agency}}</span>\n                </div>\n                <div class="col-md-12">\n                    <label class="col-md-5">Role:</label>\n                    <span class="col-md-7">{{tm.role}}</span>\n                </div>\n                <div class="col-md-12">\n                    <label class="col-md-5">Phone:</label>\n                    <span class="col-md-7">{{tm.PHONE}}</span>\n                </div>\n                <div class="col-md-12">\n                    <label class="col-md-5">Email:</label>\n                    <span class="col-md-7">{{tm.EMAIL}}</span>\n                </div>\n                <div class="col-md-12">\n                    <label class="col-md-5">RSS Feed:</label>\n                    <span class="col-md-7">{{tm.RSSFEED}}</span>\n                </div>\n                <div class="col-md-12">\n                    <label class="col-md-5">Emergency Contact Name:</label>\n                    <span class="col-md-7">{{tm.EMERGENCY_CONTACT_NAME}}</span>\n                </div>\n                <div class="col-md-12">\n                    <label class="col-md-5">Emergency Contact Phone:</label>\n                    <span class="col-md-7">{{tm.EMERGENCY_CONTACT_PHONE}}</span>\n                </div>\n            </div>\n        </div>\n        <br clear="all" />\n    </div>\n    <div class="modal-footer">\n        <button class="btn btn-primary" ng-click="ok()">OK</button>\n    </div></script><script type="text/ng-template" id="NewTeamCreate.html"><div class="modal-header">\n        <h3 class="modal-title">Create New Team</h3>\n    </div>\n\n    <div class="modal-body">\n        <form name="newCollectionTeam">\n            <div class="form-group">\n                <div class="form-group">\n                    <label class="col-md-4 control-label" for="PROJ_OBJECTIVES">Username(s) of the who you are with:</label>\n                    <div class="col-md-6">\n                        <div isteven-multi-select\n                             input-model="members"\n                             default-label="Who are you with?"\n                             output-model="newTeam.MEMBER_WITH"\n                             button-label="USERNAME"\n                             item-label="USERNAME"\n                             max-height="200px"\n                             min-search-length="1"\n                             tick-property="selected"\n                             helper-elements="filter"\n                             search-property="USERNAME">\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <br clear="all" />\n            <div class="form-group">\n                <label class="col-md-4 control-label req" for="TEAM_NAME">Team Name:</label>\n                <div class="col-md-6">\n                    <input class="form-control" ng-model="newTeam.TEAM_NAME" type="text" required />\n                </div>\n            </div>\n        </form><br clear="all" />\n    </div>\n\n    <div class="modal-footer">\n        <button class="btn btn-primary" ng-disabled="newCollectionTeam.$invalid" ng-click="CreateTeam()">Create Team</button>\n        <button class="btn btn-warning" ng-click="cancel()">Cancel</button>\n    </div></script>')}])}(),function(){"use strict";var e=angular.module("SettingsControllers");e.controller("eventInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$filter","EVENT","thisEvent",function(e,t,n,o,a,r,s,l){if(void 0===t.get("STNCreds")||""===t.get("STNCreds"))e.auth=!1,n.path("/login");else{e.datepickrs={},e.open=function(t,n){t.preventDefault(),t.stopPropagation(),e.datepickrs[n]=!0},e.anEvent={},e.DeleteEvent=function(r){var l=a.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return r},what:function(){return"Event"}}});l.result.then(function(a){o.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),s["delete"]({id:a.EVENT_ID},function(t){var n={};n.EVENT_ID=a.EVENT_ID,n.Name=a.EVENT_NAME,n.Type=e.eventTypeList.filter(function(e){return e.EVENT_TYPE_ID==a.EVENT_TYPE_ID})[0].TYPE,n.Status=e.eventStatList.filter(function(e){return e.EVENT_STATUS_ID==a.EVENT_STATUS_ID})[0].STATUS;var o=e.eventCoordList.filter(function(e){return e.MEMBER_ID==a.EVENT_COORDINATOR})[0];n.StartDate=a.EVENT_START_DATE,n.EndDate=a.EVENT_END_DATE,n.Coord=void 0!==o?o.FNAME+" "+o.LNAME:"";for(var r=0,s=0;s<e.eventList.length;s++)e.eventList[s].EVENT_ID==n.EVENT_ID&&(r=s,s=e.eventList.length);e.eventList.splice(r,1),toastr.success("Event Deleted")},function(e){toastr.error("Error: "+e.statusText)}).$promise.then(function(){n.path("/Events/EventsList").replace()})})};var i=function(e){var t=new Date;void 0!==e&&(t=new Date(e));var n=t.getFullYear(),o=t.getMonth(),a=("0"+t.getDate()).slice(-2),r=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],s=new Date(r[o]+" "+a+", "+n);return s};if(void 0!==l){e.anEvent=l,e.anEvent.EVENT_START_DATE=i(e.anEvent.EVENT_START_DATE),e.anEvent.EVENT_END_DATE=i(e.anEvent.EVENT_END_DATE),e.thisEventType=e.eventTypeList.filter(function(e){return e.EVENT_TYPE_ID==l.EVENT_TYPE_ID})[0].TYPE,e.thisEventStatus=e.eventStatList.filter(function(e){return e.EVENT_STATUS_ID==l.EVENT_STATUS_ID})[0].STATUS;var d=e.eventCoordList.filter(function(e){return e.MEMBER_ID==l.EVENT_COORDINATOR})[0];e.thisEventCoord=void 0!==d?d.FNAME+" "+d.LNAME:""}else e.anEvent.EVENT_START_DATE=i(),e.anEvent.EVENT_END_DATE=i();e.SaveOnBlur=function(n){if(n)o.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),o.defaults.headers.common.Accept="application/json",s.update({id:e.anEvent.EVENT_ID},e.anEvent,function(e){toastr.success("Event Updated")},function(e){toastr.error("Error: "+e.statusText)});else{a.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:function(e,t){e.ok=function(){t.close()}},size:"sm"})}},e.save=function(t){t&&s.save(e.anEvent,function(t){toastr.success("Event Created");var n={};n.EVENT_ID=t.EVENT_ID,n.Name=t.EVENT_NAME,n.Type=e.eventTypeList.filter(function(e){return e.EVENT_TYPE_ID==t.EVENT_TYPE_ID})[0].TYPE,n.Status=e.eventStatList.filter(function(e){return e.EVENT_STATUS_ID==t.EVENT_STATUS_ID})[0].STATUS;var o=e.eventCoordList.filter(function(e){return e.MEMBER_ID==t.EVENT_COORDINATOR})[0];n.StartDate=t.EVENT_START_DATE,n.EndDate=t.EVENT_END_DATE,n.Coord=void 0!==o?o.FNAME+" "+o.LNAME:"",e.eventList.push(n)}).$promise.then(function(){n.path("/Events/EventsList").replace()})}}}])}(),function(){"use strict";var e=angular.module("SettingsControllers");e.controller("eventCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","MEMBER","allEvents","allEventTypes","allEventStats",function(e,t,n,o,a,r,s,l,i,d){void 0===n.get("STNCreds")||""===n.get("STNCreds")?(e.auth=!1,o.path("/login")):(t.thisPage="Settings/Events",e.loggedInRole=n.get("usersRole"),e.isAdmin="Admin"==e.loggedInRole?!0:!1,e.sort_by=function(t){e.sortingOrder==t&&(e.reverse=!e.reverse),e.sortingOrder=t,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+t+" i").removeClass().addClass(e.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},e.eventTypeList=i,e.eventStatList=d,a.defaults.headers.common.Authorization="Basic "+n.get("STNCreds"),a.defaults.headers.common.Accept="application/json",s.getRoleMembers({roleId:1}).$promise.then(function(t){e.eventCoordList=t,e.eventList=[];for(var n=0;n<l.length;n++){var o={};o.EVENT_ID=l[n].EVENT_ID,o.Name=l[n].EVENT_NAME,o.Type=e.eventTypeList.filter(function(e){return e.EVENT_TYPE_ID==l[n].EVENT_TYPE_ID})[0].TYPE,o.Status=e.eventStatList.filter(function(e){return e.EVENT_STATUS_ID==l[n].EVENT_STATUS_ID})[0].STATUS;var a=e.eventCoordList.filter(function(e){return e.MEMBER_ID==l[n].EVENT_COORDINATOR})[0];o.StartDate=l[n].EVENT_START_DATE,o.EndDate=l[n].EVENT_END_DATE,o.Coord=void 0!==a?a.FNAME+" "+a.LNAME:"",e.eventList.push(o)}}))}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("file/fileList.html",'<uib-accordion close-others="false"><uib-accordion-group is-open="status.fileOpen"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.fileOpen, \'glyphicon-chevron-right\': !status.fileOpen}"></i> <span>Files</span> <span class="badge pull-right">{{fileCount.total}}</span></uib-accordion-heading><div class="btn-group pull-right"><div class="btn-group"><button style="background:none" ng-click="showOPModal(0)" class="btn"><span class="glyphicon glyphicon-plus"></span></button></div></div><ul><li>test1</li><li>test2</li><li>test2</li></ul></uib-accordion-group></uib-accordion>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("file/file.html",'<form editable-form class="form-horizontal" name="uploadForm"><fieldset><legend>File Upload</legend><div class="form-group required"><label class="col-md-2 control-label" for="FILE">Upload File:</label><div class="col-md-6"><input type="file" max="500000" id="FileUpload" file-model="aFile.File"></div></div><br clear="all"><div class="form-group required"><label class="col-md-2 control-label" for="FILEfor">File for:</label><div class="col-md-6"><div><span>Site:</span><input type="text" style="width:33%" class="form-control" placeholder="Site ID from spreadsheet" ng-model="aFile.SITE_ID"></div><div><span>Sensor:</span><input style="width:33%" type="text" class="form-control" placeholder="Instrument ID from spreadsheet" ng-model="aFile.INSTRUMENT_ID"></div><div style="margin-bottom:15px"><span>HWM:</span><input style="width:33%" type="text" class="form-control" placeholder="HWM ID from spreadsheet" ng-model="aFile.HWM_ID"></div></div></div><div class="form-group required" ng-class="{\'has-error\':uploadForm.FILETYPE_ID.$invalid && uploadForm.FILETYPE_ID.$dirty}"><label class="col-md-2 control-label req" for="FILETYPE_ID">File Type:</label><div class="col-md-6"><select class="form-control" id="FILETYPE_ID" name="FILETYPE_ID" ng-model="aFile.FILETYPE_ID" ng-change="fileTypeChange()" ng-options="ft.FILETYPE_ID as ft.FILETYPE for ft in allFileTypes" required><option value=""></option></select></div></div><br clear="all"><div ng-if="fileType>0" class="form-group"><label class="col-md-2 control-label" for="FILE_URL">File URL:</label><div class="col-md-6"><input class="form-control" id="FILE_URL" name="FILE_URL" ng-model="aFile.FILE_URL" type="text"></div></div><div ng-if="fileType>2" class="form-group"><label class="col-md-2 control-label" for="SOURCE_ID">Source Name:</label><div class="col-md-6"><input class="form-control" id="Other_SOURCE_ID" name="SOURCE_ID" ng-model="loggedInMember.fullName" type="text" required></div></div><div ng-if="fileType==2" class="form-group"><label class="col-md-2 control-label" for="SOURCE_ID">Data Process By:</label><div class="col-md-6"><span>{{loggedInMember.fullName}}</span></div></div><div ng-if="fileType==1" class="form-group required"><label class="col-md-2 control-label req" for="SOURCE_ID">Source Photographer:</label><div class="col-md-6"><input class="form-control" id="Photo_SOURCE_ID" name="SOURCE_ID" ng-model="loggedInMember.fullName" type="text" required></div></div><div ng-if="fileType==1 || fileType>2" class="form-group required" ng-class="{\'has-error\':uploadForm.AGENCY_ID.$invalid && uploadForm.AGENCY_ID.$dirty}"><label class="col-md-2 control-label req" for="FILETYPE_ID">Source Agency:</label><div class="col-md-6"><select class="form-control" id="AGENCY_ID" name="AGENCY_ID" ng-model="aFile.AGENCY_ID" ng-options="a.AGENCY_ID as a.AGENCY_NAME for a in allAgencies" required><option value=""></option></select></div></div><div ng-if="fileType==1 || fileType >2" class="form-group required"><label class="col-md-2 control-label req" for="FILE_DATE">Date Taken:</label><div class="col-md-6"><div style="width:52%" class="input-group"><input class="form-control" id="Photo_FILE_DATE" name="fd" ng-disabled="undetermined" type="text" uib-datepicker-popup="MMM dd, yyyy" is-open="datepickrs.fd" ng-model="aFile.FILE_DATE"> <span class="input-group-btn"><button class="btn btn-default" ng-click="open($event, \'fd\')"><i class="glyphicon glyphicon-calendar"></button></span></div></div></div><div ng-if="fileType==2" class="form-group required"><label class="col-md-2 control-label req" for="FILE_DATE">Data&nbsp;&nbsp;&nbsp;<br>Collected/Processed:</label><div class="col-md-6"><div style="width:52%" class="input-group"><input class="form-control" id="Data_FILE_DATE" name="dc" ng-disabled="undetermined" type="text" uib-datepicker-popup="MMM dd, yyyy" is-open="datepickrs.dc" ng-model="aFile.FILE_DATE"> <span class="input-group-btn"><button class="btn btn-default" ng-click="open($event, \'dc\')"><i class="glyphicon glyphicon-calendar"></button></span></div></div></div><div ng-if="fileType>0" class="form-group required"><label class="col-md-2 control-label req" for="DATE_VALIDATED">Date Uploaded:</label><div class="col-md-6"><div style="width:52%" class="input-group"><input class="form-control" id="DATE_VALIDATED" name="dv" ng-disabled="undetermined" type="text" uib-datepicker-popup="MMM dd, yyyy" is-open="datepickrs.dv" ng-model="aFile.DATE_VALIDATED"> <span class="input-group-btn"><button class="btn btn-default" ng-click="open($event, \'dv\')"><i class="glyphicon glyphicon-calendar"></button></span></div></div></div><div ng-if="fileType>0" class="form-group required"><label class="col-md-2 control-label req" for="DESCRIPTION">Description:</label><div class="col-md-6"><textarea class="form-control" id="DESCRIPTION" type="text" rows="3" placeholder="Description" ng-model="aFile.DESCRIPTION">\n            </div>\n        </div>\n\n        \n        <div ng-if="fileType==1" class="form-group">\n            <label class="col-md-2 control-label" for="PHOTO_DIRECTION">Photo Direction:</label>\n            <div class="col-md-6">\n                <input class="form-control" id="PHOTO_DIRECTION" name="PHOTO_DIRECTION" ng-model="aFile.PHOTO_DIRECTION" type="text">\n            </div>\n        </div>\n\n        \n        <div ng-if="fileType==1" class="form-group">\n            <label class="col-md-2 control-label" for="LATITUDE_DD">Photo Latitude<br> (if different):</label>\n            <div class="col-md-6">\n                <input class="form-control" ng-keypress="isNum($event)" name="LATITUDE_DD" id="LATITUDE_DD" ng-model="aFile.LATITUDE_DD" type="text">\n            </div>\n        </div>\n\n        \n        <div ng-if="fileType==1" class="form-group">\n            <label class="col-md-2 control-label" for="LONGITUDE_DD">Photo Longitude<br> (if different):</label>\n            <div class="col-md-6">\n                <input class="form-control" ng-keypress="isNum($event)" id="LONGITUDE_DD" name="LONGITUDE_DD" ng-model="aFile.LONGITUDE_DD" type="text">\n            </div>\n        </div>\n\n        <div ng-if="fileType==1" class="form-group">\n            <label class="col-md-2 control-label"><button class="btn btn-primary" ng-click="ShowCaption()">Preview Caption</button></label>\n            <div class="col-md-6"><span ng-show="toggleCaptionPreview">{{photoCaption}}</span></div>\n        </div>\n\n        \n        <div ng-if="fileType==2" class="form-group required">\n            <label class="col-md-2 control-label req" for="GOOD_START">Good Data Start Time:</label>\n            <div class="col-md-6">\n                <input class="form-control" id="GOOD_START" name="GOOD_START" placeholder="Date and time: 10/01/2015 02:30 PM" type="text" my-input-mask="{mask: \'99/99/9999 99:99 aa\'}" ng-model="aFile.GOOD_START" required>\n                <div class="small">ex: 10/01/2015 02:30 PM</div>\n            </div>\n        </div>\n             \n        \n        <div ng-if="fileType==2" class="form-group required">\n            <label class="col-md-2 control-label req" for="GOOD_END">Good Data End Time:</label>\n            <div class="col-md-6">\n                <input class="form-control" id="GOOD_END" name="GOOD_END" placeholder="Date and time: 10/01/2015 02:30 PM" type="text" my-input-mask="{mask: \'99/99/9999 99:99 aa\'}" ng-model="aFile.GOOD_END" required>\n                <div class="small">ex: 10/01/2015 02:30 PM</div>\n            </div>\n        </div>\n\n        \n        <div ng-if="fileType==2" class="form-group required">\n            <label class="col-md-2 control-label req" for="TIME_ZONE">Time Zone:</label>\n            <div class="col-md-6">\n                <select class="form-control" id="TIME_ZONE" name="TIME_ZONE" ng-model="aFile.TIME_ZONE" ng-options="z.name for z in zones" required></select>\n            </div>\n        </div>\n\n        \n        <div ng-if="fileType==2" class="form-group">\n            <label class="col-md-2 control-label" for="ELEVATION_STATUS">Time Zone:</label>\n            <div class="col-md-6">\n                <input type="radio" ng-model="elevationStats.elev" value="Final">Final\n                <input type="radio" style="margin-left:10px" ng-model="elevationStats.elev" value="Arbitrary">Arbitrary\n            </div>\n        </div>\n\n        <br clear="all">\n        <button type="submit" ng-click="submit()">submit</button>\n\n    </fieldset>\n</form>');

}])}(),function(){"use strict";var e=angular.module("STNControllers");e.controller("approvalCtrl",["$scope","$cookies","$rootScope","$location","$http","stateList","instrumentList","allSensorTypes","HWM","DATA_FILE","INSTRUMENT","MEMBER","SITE",function(e,t,n,o,a,r,s,l,i,d,c,p,u){void 0===t.get("STNCreds")||""===t.get("STNCreds")?(e.auth=!1,o.path("/login")):(n.thisPage="Approval",n.activeMenu="approval",e.$watch(function(){return t.get("SessionEventName")},function(n){e.sessionEvent=null!==t.get("SessionEventName")&&void 0!==t.get("SessionEventName")?t.get("SessionEventName"):"All Events"}),a.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),a.defaults.headers.common.Accept="application/json",p.getAll(function(t){e.allMembers=t}).$promise,e.allStates=r,e.allInstruments=s,e.allSensorTypes=l,e.ChosenEvent={},e.ChosenState={},e.ChosenMember={},e.unApprovedHWMs=[],e.showHWMbox=!1,e.unApprovedDFs=[],e.showDFbox=!1,e.search=function(){e.unApprovedHWMs=[],e.showHWMbox=!1,e.unApprovedDFs=[],e.showDFbox=!1;var n=null!==t.get("SessionEventID")&&void 0!==t.get("SessionEventID")?t.get("SessionEventID"):0,o=void 0!==e.ChosenState.id?e.ChosenState.id:0,r=void 0!==e.ChosenMember.id?e.ChosenMember.id:0;a.defaults.headers.common.Authorization="Basic "+t.get("STNCreds"),a.defaults.headers.common.Accept="application/json",i.getUnapprovedHWMs({IsApproved:"false",Event:n,TeamMember:r,State:o},function(t){e.unApprovedHWMs=t.HWMs,e.showHWMbox=!0},function(e){alert("Error: "+e.statusText)}),d.getUnapprovedDFs({IsApproved:"false",Event:n,Processor:r,State:o},function(t){var n=t;angular.forEach(n,function(t){var n=e.allInstruments.filter(function(e){return e.INSTRUMENT_ID==t.INSTRUMENT_ID})[0],o={},a=n.SITE_ID,r=e.allSensorTypes.filter(function(e){return e.SENSOR_TYPE_ID==n.SENSOR_TYPE_ID})[0];o.InstrID=n.INSTRUMENT_ID,u.query({id:a}).$promise.then(function(t){o.stringToShow=t.SITE_NO+": "+r.SENSOR,e.unApprovedDFs.push(o)})}),e.showDFbox=!0},function(e){alert("Error: "+e.statusText)})})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("hwm/quickHWM.html",'<div ng-if="sessionEventExists"><form class="form-horizontal" name="qhwmForm.quickHWM"><fieldset><uib-accordion close-others="false"><uib-accordion-group is-open="status.siteOpen" ng-class="{\'panel-danger\': siteErrors}"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.siteOpen, \'glyphicon-chevron-right\': !status.siteOpen}"></i> <span>Site</span></uib-accordion-heading><div class="col-md-6"><div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.SITE_DESCRIPTION.$invalid && qhwmForm.quickHWM.SITE_DESCRIPTION.$dirty}"><label class="col-md-4 control-label req" for="SITE_DESCRIPTION">Site Description:</label><div class="col-md-8"><textarea class="form-control" id="SITE_DESCRIPTION" type="text" rows="3" name="SITE_DESCRIPTION" placeholder="Site Description" ng-model="aSite.SITE_DESCRIPTION" required>\n                            </div>\n                        </div>\n\n                        \n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label"></label>\n                            <div class="col-md-8">\n                                <label class="radio-inline">\n                                    <input type="radio" name="decDegORdms" ng-model="decDegORdms.val" ng-change="latLongChange()" value="dd"> Dec Deg\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="decDegORdms" ng-model="decDegORdms.val" ng-change="latLongChange()" value="dms"> DMS\n                                </label>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.LATITUDE_DD.$invalid && qhwmForm.quickHWM.LATITUDE_DD.$dirty}">\n                            <label class="col-md-4 control-label req" for="SITE_LATITUDE_DD">Latitude:</label>\n                            <div class="col-md-8" ng-if="decDegORdms.val == \'dd\'">\n                                <input class="form-control" ng-keypress="isNum($event)" name="LATITUDE_DD" id="SITE_LATITUDE_DD" ng-model="aSite.LATITUDE_DD" type="text" placeholder="Latitude" required>\n                            </div>\n                            <div class="col-md-8" ng-if="decDegORdms.val == \'dms\'">\n                                <table>\n                                    <tr>\n                                        <td><input class="form-control" ng-keypress="isNum($event)" name="Deg" ng-model="DMS.LADeg" type="text"></td>\n                                        <td>°</td>\n                                        <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LAMin" type="text"></td>\n                                        <td>′</td>\n                                        <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LASec" type="text"></td>\n                                        <td>″</td>\n                                    </tr>\n                                </table>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.LONGITUDE_DD.$invalid && qhwmForm.quickHWM.LONGITUDE_DD.$dirty}">\n                            <label class="col-md-4 control-label req" for="SITE_LONGITUDE_DD">Longitude:</label>\n                            <div class="col-md-8" ng-if="decDegORdms.val == \'dd\'">\n                                <input class="form-control" ng-keypress="isNum($event)" ng-enter="getAddress()" id="SITE_longitude_dd" name="LONGITUDE_DD" ng-model="aSite.LONGITUDE_DD" type="text" placeholder="Longitude" required>\n                            </div>\n                            <div class="col-md-8" ng-if="decDegORdms.val == \'dms\'">\n                                <table>\n                                    <tr>\n                                        <td><input class="form-control" ng-keypress="isNum($event)" name="Deg" ng-model="DMS.LODeg" type="text"></td>\n                                        <td>°</td>\n                                        <td><input class="form-control" ng-keypress="isNum($event)" name="Min" ng-model="DMS.LOMin" type="text"></td>\n                                        <td>′</td>\n                                        <td><input class="form-control" ng-keypress="isNum($event)" name="Sec" ng-model="DMS.LOSec" type="text"></td>\n                                        <td>″</td>\n                                    </tr>\n                                </table>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-if="aSite.SITE_ID == undefined">\n                            <label class="col-md-4 control-label" for="POPULATEBTN">Click here to populate address fields:</label>\n                            <div class="col-md-8">\n                                <button type="button" ng-click="getAddress()" class="btn btn-primary">Lookup Address</button>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.HDATUM_ID.$invalid && qhwmForm.quickHWM.HDATUM_ID.$dirty}">\n                            <label class="col-md-4 control-label req" for="SITE_HDATUM_ID">Horizontal Datum:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="SITE_HDATUM_ID" name="HDATUM_ID" ng-model="aSite.HDATUM_ID" ng-options="hd.DATUM_ID as hd.DATUM_NAME for hd in horDatumList" required>\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.HCOLLECT_METHOD_ID.$invalid && qhwmForm.quickHWM.HCOLLECT_METHOD_ID.$dirty}">\n                            <label class="col-md-4 control-label req" for="SITE_HCOLLECT_METHOD_ID">Horizontal Collection Method:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="SITE_HCOLLECT_METHOD_ID" name="HCOLLECT_METHOD_ID" ng-model="aSite.HCOLLECT_METHOD_ID" ng-options="hc.HCOLLECT_METHOD_ID as hc.HCOLLECT_METHOD for hc in horCollMethodList" required>\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.WATERBODY.$invalid && qhwmForm.quickHWM.WATERBODY.$dirty}">\n                            <label class="col-md-4 control-label req" for="SITE_WATERBODY">Waterbody:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="SITE_WATERBODY" name="WATERBODY" ng-model="aSite.WATERBODY" type="text" required>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-6">\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="ADDRESS">Address:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="ADDRESS" name="ADDRESS" ng-model="aSite.ADDRESS" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="CITY">City:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="CITY" name="CITY" ng-model="aSite.CITY" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.STATE.$invalid && qhwmForm.quickHWM.STATE.$dirty}">\n                            <label class="col-md-4 control-label req" for="SITE_STATE">State:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="SITE_STATE" name="STATE" ng-model="aSite.STATE" ng-change="updateCountyList(aSite.STATE)" ng-options="state.STATE_ABBREV as state.STATE_NAME for state in stateList" required>\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="ZIP">Zip:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="ZIP" name="ZIP" ng-model="aSite.ZIP" type="text" ui-mask="{{\'99999\'}}">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.COUNTY.$invalid && qhwmForm.quickHWM.COUNTY.$dirty}">\n                            <label class="col-md-4 control-label req" for="SITE_COUNTY">County:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="SITE_COUNTY" name="COUNTY" ng-model="aSite.COUNTY" ng-options="c.COUNTY_NAME as c.COUNTY_NAME for c in stateCountyList" required>\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="ACCESS_GRANTED">Access Permission Granted:</label>\n                            <div class="col-md-8">\n                                <label class="radio-inline">\n                                    <input type="radio" name="ACCESS_GRANTED" ng-model="aSite.ACCESS_GRANTED" value="Yes"> Yes\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="ACCESS_GRANTED" ng-model="aSite.ACCESS_GRANTED" value="No"> No\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="ACCESS_GRANTED" ng-model="aSite.ACCESS_GRANTED" value="Not Needed"> Not Needed\n                                </label>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="DRAINAGE_AREA_SQMI">Drainage Area (sq mi):</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="DRAINAGE_AREA_SQMI" ng-keypress="isNum($event)" name="DRAINAGE_AREA_SQMI" ng-model="aSite.DRAINAGE_AREA_SQMI" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="USGS_SID">Station ID for USGS gage:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="USGS_SID" name="USGS_SID" ng-model="aSite.USGS_SID" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="NOAA_SID">Station ID for NOAA gage:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="NOAA_SID" name="NOAA_SID" ng-model="aSite.NOAA_SID" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="OTHER_SID">Other Station ID:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="OTHER_SID" name="OTHER_SID" placeholder="Please add details in the Site Description" ng-model="aSite.OTHER_SID" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="SENSOR_NOT_APPROPRIATE">Check if Sensor is not appropriate here:</label>\n                            <div class="col-md-8">\n                                <ul style="padding-left:0">\n                                    <li style="list-style:none">\n                                        <input type="checkbox" name="SENSOR_NOT_APPROPRIATE" ng-model="aSite.SENSOR_NOT_APPROPRIATE" ng-true-value="1" ng-false-value="0">\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n\n                </uib-accordion-group>\n\n                <uib-accordion-group is-open="status.opOpen" ng-class="{\'panel-danger\':opErrors}">\n                    <uib-accordion-heading>\n                        <i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.opOpen, \'glyphicon-chevron-right\': !status.opOpen}"></i>\n                        <span>Objective Point</span>\n                    </uib-accordion-heading>\n                    <div class="col-md-6">\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.OP_TYPE_ID.$invalid && qhwmForm.quickHWM.OP_TYPE_ID.$dirty}">\n                            <label class="col-md-4 control-label req" for="OP_TYPE_ID">Type:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="OP_TYPE_ID" name="OP_TYPE_ID" ng-model="aOP.OP_TYPE_ID" ng-options="opt.OBJECTIVE_POINT_TYPE_ID as opt.OP_TYPE for opt in opTypeList" required>\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.NAME.$invalid && qhwmForm.quickHWM.NAME.$dirty}">\n                            <label class="col-md-4 control-label req" for="NAME">Name:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" id="OP_NAME" name="NAME" ng-model="aOP.NAME" type="text" required>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.DESCRIPTION.$invalid && qhwmForm.quickHWM.DESCRIPTION.$dirty}">\n                            <label class="col-md-4 control-label req" for="DESCRIPTION">Description:</label>\n                            <div class="col-md-8">\n                                <textarea class="form-control" id="OP_DESCRIPTION" name="DESCRIPTION" type=" text" rows="3" ng-model="aOP.DESCRIPTION" required>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="CONTROL">Control Identifier:</label>\n                            <div class="col-md-8">\n                                <button type="button" class="btn btn-default" ng-click="addNewIdentifier()">Add New Identifier</button>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group" ng-show="showControlIDinput">\n                            <label class="col-md-4 control-label"></label>\n                            <div class="col-md-8">\n                                <div ng-repeat="id in addedIdentifiers">\n                                    <div class="col-md-12" style="margin-bottom:5px; padding: 0">\n                                        <div class="col-md-6"><input class="form-control" id="OPControl" name="OPControl" ng-model="id.IDENTIFIER" type="text"></div>\n                                        <input type="hidden" name="OP_CONTROL_IDENTIFIER_ID" ng-model="id.OP_CONTROL_IDENTIFIER_ID">\n                                        <input type="hidden" name="OBJECTIVE_POINT_ID" ng-model="id.OBJECTIVE_POINT_ID">\n\n                                        <label class="radio-inline">\n                                            <input type="radio" name="IDENTIFIER_TYPE{{$index}}" ng-model="id.IDENTIFIER_TYPE" value="PID"> PID\n                                        </label>\n                                        <label class="radio-inline">\n                                            <input type="radio" name="IDENTIFIER_TYPE{{$index}}" ng-model="id.IDENTIFIER_TYPE" value="Other"> Other\n                                        </label>\n                                        <div class="buttons pull-right">\n                                            <button class="btn" ng-click="RemoveID(id)">\n                                                <i class="glyphicon glyphicon-remove"></i>\n                                            </button>\n                                        </div>\n                                    </div><br>\n                                </div>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label"></label>\n                            <div class="col-md-8">\n                                <label class="radio-inline">\n                                    <input type="radio" name="FTorMETER" ng-model="FTorMETER" value="ft"> ft\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="FTorMETER" ng-model="FTorMETER" value="meter"> meter\n                                </label>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="ELEV_FT">Elevation:</label>\n                            <div class="col-md-8">\n                                <input class="form-control" ng-keypress="isNum($event)" id="ELEV_FT" name="ELEV_FT" ng-model="aOP.ELEV_FT" type="text">\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-6">\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="VDATUM_ID">Vertical Datum:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="OP_VDATUM_ID" name="VDATUM_ID" ng-model="aOP.VDATUM_ID" ng-options="vd.DATUM_ID as vd.DATUM_ABBREVIATION for vd in vertDatumList">\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="VCOLLECT_METHOD_ID">Vertical Collection Method:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="VCOLLECT_METHOD_ID" name="VCOLLECT_METHOD_ID" ng-model="aOP.VCOLLECT_METHOD_ID" ng-options="vcm.VCOLLECT_METHOD_ID as vcm.VCOLLECT_METHOD for vcm in vertCollMethodList">\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label"></label>\n                            <div class="col-md-8">\n                                <label class="radio-inline">\n                                    <input type="radio" name="FTorCM" ng-model="FTorCM" value="ft"> +/- ft\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="FTorCM" ng-model="FTorCM" value="cm"> +/- cm\n                                </label>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="UNCERTAINTY">Uncertainty:</label>\n                            <div class="col-md-8">\n                                <div class="col-md-12" style="margin-bottom:5px;padding-left:0">\n                                    <div class="col-md-3" style="padding-left: 0"><input class="form-control" ng-disabled="aOP.UNQUANTIFIED==1" ng-keypress="isNum($event)" ng-model="aOP.UNCERTAINTY" type="text"></div>\n                                    <div class="col-md-2" style="text-decoration:underline">OR</div>\n                                    <div class="col-md-7">\n                                        <input type="checkbox" ng-model="aOP.UNQUANTIFIED" name="UNQUANTIFIED" ng-checked="aOP.UNQUANTIFIED==1" ng-true-value="1" ng-false-value="0" ng-click="UnquantChecked()">\n                                        <span style="margin-left:10px">Unquantified</span>\n                                    </div>\n                                    <br>\n                                </div>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="OP_QUALITY_ID">Quality:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="OP_QUALITY_ID" name="OP_QUALITY_ID" ng-model="aOP.OP_QUALITY_ID" ng-options="opq.OP_QUALITY_ID as opq.QUALITY for opq in opQualList">\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="OP_NOTES">Objective Point Notes:</label>\n                            <div class="col-md-8">\n                                <textarea class="form-control" id="OP_NOTES" type="text" name="OP_NOTES" rows="3" ng-model="aOP.OP_NOTES">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.DATE_ESTABLISHED.$invalid && qhwmForm.quickHWM.DATE_ESTABLISHED.$dirty}">\n                            <label class="col-md-4 control-label req" for="DATE_ESTABLISHED">Date Established:</label>\n                            <div class="col-md-8 input-group" style="padding-right:14px;padding-left:14px">\n                                <input class="form-control" id="OP_DATE_ESTABLISHED" name="de" type="text" uib-datepicker-popup="MMM dd, yyyy" is-open="datepickrs.de" ng-model="aOP.DATE_ESTABLISHED" required>\n                                <span class="input-group-btn">\n                                    <button class="btn btn-default" ng-click="open($event, \'de\')">\n                                        <i class="glyphicon glyphicon-calendar">\n                                    </button>\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </uib-accordion-group>\n\n                <uib-accordion-group is-open="status.hwmOpen" ng-class="{\'panel-danger\': hwmErrors}">\n                    <uib-accordion-heading>\n                        <i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.hwmOpen, \'glyphicon-chevron-right\': !status.hwmOpen}"></i>\n                        <span>HWM</span>\n                    </uib-accordion-heading>\n\n                    <div class="col-md-6">\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.HWM_TYPE_ID.$invalid && qhwmForm.quickHWM.HWM_TYPE_ID.$dirty}">\n                            <label class="col-md-4 control-label req" for="HWM_TYPE_ID">HWM Type:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="HWM_TYPE_ID" name="HWM_TYPE_ID" ng-model="aHWM.HWM_TYPE_ID" ng-options="htype.HWM_TYPE_ID as htype.HWM_TYPE for htype in hwmTypeList" required>\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.HWM_ENVIRONMENT.$invalid && qhwmForm.quickHWM.HWM_ENVIRONMENT.$dirty}">\n                            <label class="col-md-4 control-label req">HWM Environment:</label>\n                            <div class="col-md-8">\n                                <label class="radio-inline">\n                                    <input type="radio" id="C_HWM_ENVIRONMENT" name="HWM_ENVIRONMENT" ng-model="aHWM.HWM_ENVIRONMENT" value="Coastal">Coastal\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" id="R_HWM_ENVIRONMENT" name="HWM_ENVIRONMENT" ng-model="aHWM.HWM_ENVIRONMENT" value="Riverine">Riverine\n                                </label>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4"></label>\n                            <div class="col-md-8">\n                                <table>\n                                    <tr><td style="text-align: center;width: 81px">0.05</td><td style="text-align: center;width: 81px">0.02</td><td style="text-align: left;width: 81px">Excellent</td></tr>\n                                    <tr><td style="text-align: center;width: 81px">0.1</td><td style="text-align: center;width: 81px">0.05</td><td style="text-align: left;width: 81px">Good</td></tr>\n                                    <tr><td style="text-align: center;width: 81px">0.2</td><td style="text-align: center;width: 81px">0.1</td><td style="text-align: left;width: 81px">Fair</td></tr>\n                                    <tr><td style="text-align: center;width: 81px">0.4</td><td style="text-align: center;width: 81px">0.2</td><td style="text-align: left;width: 81px">Poor</td></tr>\n                                    <tr><td style="text-align: center;width: 81px">&#62;0.40</td><td style="text-align: center;width: 81px">&#62;0.20</td><td style="text-align: left;width: 81px">V. Poor</td></tr>\n                                    <tr><td colspan="3"><a href="http://pubs.usgs.gov/tm/11d1/" target="_blank">USGS T&M 11-D1, Table 13</a></td></tr>\n                                </table>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.HWM_QUALITY_ID.$invalid && qhwmForm.quickHWM.HWM_QUALITY_ID.$dirty}">\n                            <label class="col-md-4 control-label req">HWM Quality:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="HWM_QUALITY_ID" name="HWM_QUALITY_ID" ng-model="aHWM.HWM_QUALITY_ID" ng-options="hqual.HWM_QUALITY_ID as hqual.HWM_QUALITY for hqual in hwmQualList" required>\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label">Bank:</label>\n                            <div class="col-md-8">\n                                <label class="radio-inline">\n                                    <input type="radio" name="BANK" ng-model="aHWM.BANK" value="Left">Left\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="BANK" ng-model="aHWM.BANK" value="Right">Right\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="BANK" ng-model="aHWM.BANK" value="N/A">N/A\n                                </label>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="HWM_LOCATIONDESCRIPTION">Location Description:</label>\n                            <div class="col-md-8">\n                                <textarea class="form-control" id="HWM_LOCATIONDESCRIPTION" name="HWM_LOCATIONDESCRIPTION" type=" text" rows="3" ng-model="aHWM.HWM_LOCATIONDESCRIPTION">\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class="col-md-6">\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="ELEV_FT">Surveyed Elevation (ft):</label>\n                            <div class="col-md-8">\n                                <input class="form-control" ng-keypress="isNum($event)" name="ELEV_FT" ng-model="aHWM.ELEV_FT" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label">Vertical Datum:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="VDATUM_ID" name="VDATUM_ID" ng-model="aHWM.VDATUM_ID" ng-options="vd.DATUM_ID as vd.DATUM_NAME for vd in vertDatumList">\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="HEIGHT_ABOVE_GND">Height above ground (ft):</label>\n                            <div class="col-md-8">\n                                <input class="form-control" ng-keypress="isNum($event)" name="HEIGHT_ABOVE_GND" ng-model="aHWM.HEIGHT_ABOVE_GND" type="text">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group required" ng-class="{\'has-error\':qhwmForm.quickHWM.FLAG_DATE.$invalid && qhwmForm.quickHWM.FLAG_DATE.$dirty}">\n                            <label class="col-md-4 control-label req" for="FLAG_DATE">Flagged Date:</label>\n                            <div class="col-md-8 input-group" style="padding-right:14px;padding-left:14px">\n                                <input class="form-control" id="FLAG_DATE" name="fd" type="text" uib-datepicker-popup="MMM dd, yyyy" is-open="datepickrs.fd" ng-model="aHWM.FLAG_DATE" required>\n                                <span class="input-group-btn">\n                                    <button class="btn btn-default" ng-click="open($event, \'fd\')">\n                                        <i class="glyphicon glyphicon-calendar">\n                                    </button>\n                                </span>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="SURVEY_DATE">Surveyed Date:</label>\n                            <div class="col-md-8 input-group" style="padding-right:14px;padding-left:14px">\n                                <input class="form-control" id="SURVEY_DATE" name="sd" type="text" uib-datepicker-popup="MMM dd, yyyy" is-open="datepickrs.sd" ng-model="aHWM.SURVEY_DATE">\n                                <span class="input-group-btn">\n                                    <button class="btn btn-default" ng-click="open($event, \'sd\')">\n                                        <i class="glyphicon glyphicon-calendar">\n                                    </button>\n                                </span>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label">Vertical Collection Method:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="HWM_VDATUM_ID" name="VCOLLECT_METHOD_ID" ng-model="aHWM.VCOLLECT_METHOD_ID" ng-options="vcm.VCOLLECT_METHOD_ID as vcm.VCOLLECT_METHOD for vcm in vertCollMethodList">\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label">Marker:</label>\n                            <div class="col-md-8">\n                                <select class="form-control" id="MARKER_ID" name="MARKER_ID" ng-model="aHWM.MARKER_ID" ng-options="vd.MARKER_ID as vd.MARKER1 for vd in markerList">\n                                    <option value=""></option>\n                                </select>\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label" for="HWM_NOTES">Notes:</label>\n                            <div class="col-md-8">\n                                <textarea class="form-control" id="HWM_NOTES" name="HWM_NOTES" type=" text" rows="3" ng-model="aHWM.HWM_NOTES">\n                            </div>\n                        </div>\n\n                        \n                        <div class="form-group">\n                            <label class="col-md-4 control-label">Stillwater Location?:</label>\n                            <div class="col-md-8">\n                                <label class="radio-inline">\n                                    <input type="radio" name="STILLWATER" ng-model="aHWM.STILLWATER" value="1">Yes\n                                </label>\n                                <label class="radio-inline">\n                                    <input type="radio" name="STILLWATER" ng-model="aHWM.STILLWATER" value="0">No\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                </uib-accordion-group>\n            </uib-accordion>\n\n            <br clear="all">\n\n            \n            <div class="form-group">\n                <div class="col-md-4 col-md-offset-2">\n                    <span>\n                        <button class="btn btn-primary" style="width:80px;margin-right:10px" ng-click="create(qhwmForm.quickHWM.$valid)">\n                            <span>Create</span>\n                        </button>\n                    </span>\n                    <span>\n                        <button class="btn btn-primary" back-button><span>Cancel</span></button>\n                    </span>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n<div ng-if="!sessionEventExists">Please choose a Session Event in the upper right corner before creating a Quick HWM.</div>');

}])}(),function(){"use strict";var e=angular.module("STNResource",["ngResource"]),t="http://stntest.wim.usgs.gov/STNServices";e.factory("AGENCY",["$resource",function(e){return e(t+"/Agencies/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("COLLECT_TEAM",["$resource",function(e){return e(t+"/CollectionTeams/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventTeams:{method:"GET",isArray:!0,url:t+"/Events/:Eventid/Teams.json"},getTeamMembers:{method:"GET",isArray:!0,url:t+"/CollectionTeams/:id/Members.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},addMember:{method:"POST",isArray:!0,cache:!1,url:t+"/CollectionTeams/:id/AddMember.json"},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("CONTACT_TYPE",["$resource",function(e){return e(t+"/ContactTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("CONTACT",["$resource",function(e){return e(t+"/Contacts/:id.json",{},{query:{},getContactModel:{method:"GET",isArray:!0},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},addReportContact:{method:"POST",cache:!1,isArray:!1,url:t+"/Contacts/AddReportContact"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("COUNTIES",["$resource",function(e){return e(t+"/Counties/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("DATA_FILE",["$resource",function(e){return e(t+"/DataFiles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getUnapprovedDFs:{method:"GET",isArray:!0,cache:!1},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("DEPLOYMENT_PRIORITY",["$resource",function(e){return e(t+"/DeploymentPriorities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("DEPLOYMENT_TYPE",["$resource",function(e){return e(t+"/DeploymentTypes/:id.json",{},{query:{},getDepSensType:{method:"GET",isArray:!1,url:t+"/DeploymentTypes/:id/SensorType.json"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("EVENT_STATUS",["$resource",function(e){return e(t+"/EventStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("EVENT_TYPE",["$resource",function(e){return e(t+"/EventTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("FILE_TYPE",["$resource",function(e){return e(t+"/FileTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("EVENT",["$resource",function(e){return e(t+"/Events/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getFilteredEvents:{method:"GET",isArray:!0,url:t+"/Events/FilteredEvents.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.service("multipartForm",["$http",function(e){this.post=function(n){var o=t+"/Files/bytes",a=new FormData;a.append("FileEntity",JSON.stringify(n.FileEntity)),a.append("File",n.File),e.post(o,a,{transformRequest:angular.identity,headers:{"Content-Type":void 0}})}}]),e.factory("HORIZONTAL_COLL_METHODS",["$resource",function(e){return e(t+"/HorizontalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("HORIZONTAL_DATUM",["$resource",function(e){return e(t+"/HorizontalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("HOUSING_TYPE",["$resource",function(e){return e(t+"/HousingTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("HWM",["$resource",function(e){return e(t+"/hwms/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventHWMs:{method:"GET",url:t+"/Events/:Eventid/hwms.json"},getUnapprovedHWMs:{method:"GET",cache:!1},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("HWM_QUALITY",["$resource",function(e){return e(t+"/HWMQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("HWM_TYPE",["$resource",function(e){return e(t+"/HWMTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("INSTRUMENT",["$resource",function(e){return e(t+"/instruments/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0,url:t+"/Instruments/GetAll.json"},getstatusInstruments:{method:"GET",isArray:!0,url:t+"/Instruments.json/"},getFullInstrument:{method:"GET",url:t+"/Instruments/:id/FullInstrument.json"},getInstrumentStatus:{method:"GET",url:t+"/Instruments/:id/InstrumentStatus.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("INSTRUMENT_STATUS",["$resource",function(e){return e(t+"/InstrumentStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("INST_COLL_CONDITION",["$resource",function(e){return e(t+"/InstrCollectConditions/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("LANDOWNER_CONTACT",["$resource",function(e){return e(t+"/LandOwners/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("MARKER",["$resource",function(e){return e(t+"/Markers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("MEMBER",["$resource",function(e){return e(t+"/Members/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getRoleMembers:{method:"GET",isArray:!0,url:t+"/Roles/:roleId/Members.json"},getEventPeople:{method:"GET",isArray:!0,url:t+"/Events/:Eventid/Members.json"},changePW:{method:"GET",isArray:!1,url:t+"/Members.json"},addMember:{method:"POST",cache:!1,isArray:!1,url:t+"/Members/:pass/addMember"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},deleteMember:{method:"DELETE",cache:!1,isArray:!1,url:t+"/Members/:id"}})}]),e.factory("NETWORK_NAME",["$resource",function(e){return e(t+"/NetworkNames/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("NETWORK_TYPE",["$resource",function(e){return e(t+"/NetworkTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("OBJECTIVE_POINT",["$resource",function(e){return e(t+"/ObjectivePoints/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},createOPControlID:{method:"POST",cache:!1,isArray:!1,url:t+"/ObjectivePoints/:id/AddOPControls"},getOPControls:{method:"GET",cache:!1,isArray:!0,url:t+"/ObjectivePoints/:id/OPControls.json"},getOPFiles:{method:"GET",cache:!1,isArray:!0,url:t+"/ObjectivePoints/:id/Files"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("OP_CONTROL_IDENTIFIER",["$resource",function(e){return e(t+"/OPControlIdentifiers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("OP_QUALITY",["$resource",function(e){return e(t+"/ObjectivePointQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("OP_TYPE",["$resource",function(e){return e(t+"/OPTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("REPORT",["$resource",function(e){return e(t+"/ReportingMetrics/:id.json",{},{query:{},getReportByEvSt:{method:"GET",isArray:!0},getDailyReportTots:{method:"GET",url:t+"/ReportingMetrics/DailyReportTotals"},getMemberReports:{method:"GET",isArray:!0,url:t+"/Members/:memberId/Reports.json"},getFilteredReports:{method:"GET",isArray:!0,url:t+"/ReportingMetrics/FilteredReports.json"},getReportwithContacts:{method:"GET",isArray:!0,url:t+"/ReportResource/FilteredReportModel.json"},getReportsCSV:{method:"GET",url:t+"/ReportingMetrics/FilteredReports.csv"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("ROLE",["$resource",function(e){return e(t+"/Roles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0}})}]),e.factory("SENSOR_BRAND",["$resource",function(e){return e(t+"/SensorBrands/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("SENSOR_DEPLOYMENT",["$resource",function(e){return e(t+"/SensorDeployments/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("SENSOR_TYPE",["$resource",function(e){return e(t+"/SensorTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSensorDeploymentTypes:{method:"GET",isArray:!0,url:t+"/SensorTypes/:id/DeploymentTypes.json"},addSensorDeploymentType:{method:"POST",cache:!1,isArray:!0,url:t+"/SensorTypes/:id/addDeploymentType"},removeSensorDeploymentType:{method:"POST",isArray:!1,url:t+"/SensorTypes/:id/removeDeploymentType"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("SITE",["$resource",function(e){return e(t+"/Sites/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSiteLandOwner:{method:"GET",url:t+"/Sites/:id/LandOwner.json"},getSiteNetworkTypes:{method:"GET",isArray:!0,url:t+"/sites/:id/networkTypes.json"},postSiteNetworkType:{method:"POST",cache:!1,isArray:!0,url:t+"/sites/:id/AddNetworkType"},deleteSiteNetworkType:{method:"POST",cache:!1,isArray:!1,url:t+"/sites/:id/removeNetworkType"},getSiteNetworkNames:{method:"GET",isArray:!0,url:t+"/sites/:id/networkNames.json"},postSiteNetworkName:{method:"POST",cache:!1,isArray:!0,url:t+"/sites/:id/AddNetworkName"},deleteSiteNetworkName:{method:"POST",cache:!1,isArray:!1,url:t+"/sites/:id/removeNetworkName"},getSiteHousings:{method:"GET",isArray:!0,url:t+"/sites/:id/SiteHousings.json"},postSiteHousing:{method:"POST",cache:!1,isArray:!0,url:t+"/site/:id/AddSiteSiteHousing.json"},getSiteOPs:{method:"GET",isArray:!0,url:t+"/Sites/:id/ObjectivePoints.json"},getSiteSensors:{method:"GET",isArray:!0,url:t+"/Sites/:id/FullInstrumentList.json"},getSiteHWMs:{method:"GET",isArray:!0,url:t+"/Sites/:id/HWMs.json"},getSiteFiles:{method:"GET",isArray:!0,url:t+"/Sites/:id/Files.json"},getSitePeaks:{method:"GET",isArray:!0,url:t+"/Sites/:id/PeakSummaries.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("STATE",["$resource",function(e){return e(t+"/States/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("SITE_HOUSING",["$resource",function(e){return e(t+"/SiteHousings/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("STATUS_TYPE",["$resource",function(e){return e(t+"/StatusTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("VERTICAL_COLL_METHOD",["$resource",function(e){return e(t+"/VerticalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("VERTICAL_DATUM",["$resource",function(e){return e(t+"/VerticalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),e.factory("Login",["$resource",function(e){return e(t+"/login",{},{login:{method:"GET",cache:!1,isArray:!1}})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("hwm/hwmList.html",'<uib-accordion close-others="false"><uib-accordion-group is-open="status.hwmOpen"><uib-accordion-heading><i style="margin-right:10px" class="pull-left glyphicon" ng-class="{\'glyphicon-chevron-down\': status.hwmOpen, \'glyphicon-chevron-right\': !status.hwmOpen}"></i> <span>High Water Marks</span> <span class="badge pull-right">{{hwmCount.total}}</span></uib-accordion-heading><div ng-show="sessionEventExists" class="btn-group pull-right"><button type="button" class="borderLess" ng-click="showHWMModal(0)" tooltip-placement="right" uib-tooltip="Add a HWM"><span class="glyphicon glyphicon-plus"></span></button></div><div ng-show="!sessionEventExists">To create a HWM, first choose a session Event above.</div><ul><li ng-repeat="h in SiteHWMs"><a class="btn" ng-click="showHWMModal(h)">{{h.FLAG_DATE | date: "MM/dd/yyyy"}} <span ng-if="h.ELEV_FT">- ({{h.ELEV_FT}} ft.)</span></a></li></ul></uib-accordion-group></uib-accordion>')}])}(),function(){"use strict";var e=angular.module("STNBusinessServices",["ngCookies"]);e.factory("setCreds",["$cookies",function(e){return function(t,n,o,a,r){var s=t.concat(":",n);e.STNCreds=s,e.STNUsername=t,e.usersName=o,e.mID=r;var l;switch(a){case 1:l="Admin";break;case 2:l="Manager";break;case 3:l="Field";break;case 4:l="Public";break;default:l="CitizenManager"}e.usersRole=l}}]),e.factory("setSessionEvent",["$cookies",function(e){return function(t,n){e.SessionEventID=t,e.SessionEventName=n}}]),e.factory("setSessionTeam",["$cookies",function(e){return function(t,n){e.SessionTeaID=t,e.SessionTeamName=n}}]),e.factory("setLoggedIn",["$cookies",function(e){var t=!1;return{isLoggedIn:function(){return t},changeLoggedIn:function(e){t=e}}}]),e.factory("checkCreds",["$cookies",function(e){return function(){var t=!1,n=e.STNCreds;return void 0!==n&&""!==n&&(t=!0),t}}]),e.factory("getCreds",["$cookies",function(e){return function(){var t="",n=e.STNCreds;return void 0!==n&&""!==n&&(t=btoa(n)),t}}]),e.factory("getUsersNAME",["$cookies",function(e){return function(){var t="",n=e.usersName;return void 0!==n&&""!==n&&(t=n),t}}]),e.factory("getUserID",["$cookies",function(e){return function(){var t="",n=e.mID;return void 0!==n&&""!==n&&(t=n),t}}]),e.factory("getUsername",["$cookies",function(e){return function(){var t="",n=e.STNUsername;return void 0!==n&&""!==n&&(t=n),t}}]),e.factory("getUserRole",["$cookies",function(e){return function(){var t="",n=e.usersRole;return void 0!==n&&""!==n&&(t=n),t}}]),e.factory("deleteCreds",["$cookies",function(e){return function(){e.STNCreds="",e.STNUsername="",e.usersName="",e.usersRole=""}}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("event/eventsList.html",'<div class=""><h3>Events</h3><div ng-show="loggedInRole == \'Admin\'"><a ui-sref="events.EventInfo({id:0})"><i class="glyphicon glyphicon-plus"></i>Create New Event</a></div><script>var sortingOrder = \'Name\';</script><table class="table table-striped table-condensed"><thead><tr><th class="Name">Name&nbsp;<a ng-click="sort_by(\'Name\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Type">Type&nbsp;<a ng-click="sort_by(\'Type\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Status">Status&nbsp;<a ng-click="sort_by(\'Status\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="StartDate">Start Date&nbsp;<a ng-click="sort_by(\'StartDate\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="EndDate">End Date&nbsp;<a ng-click="sort_by(\'EndDate\')"><i class="glyphicon glyphicon-sort"></i></a></th><th class="Coord">Coordinator&nbsp;<a ng-click="sort_by(\'Coord\')"><i class="glyphicon glyphicon-sort"></i></a></th></tr></thead><tbody><tr ng-repeat="e in eventList | orderBy:sortingOrder:reverse"><td><a ui-sref="events.EventInfo({id: e.EVENT_ID})">{{e.Name}}</a></td><td>{{e.Type}}</td><td>{{e.Status}}</td><td>{{e.StartDate | date: "MM/dd/yyyy"}}</td><td>{{e.EndDate | date: "MM/dd/yyyy"}}</td><td>{{e.Coord}}</td></tr></tbody></table></div>')}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("event/eventInfo.html",'<form class="form-horizontal" id="eventForm" name="eventForm"><fieldset><legend>EVENT INFORMATION</legend><div ng-if="loggedInRole == \'Admin\' && anEvent.EVENT_ID != undefined"><button class="btn btn-danger" ng-click="DeleteEvent(anEvent)">Delete Event</button></div><div class="form-group required" ng-class="{\'has-error\':eventForm.EVENT_NAME.$invalid && eventForm.EVENT_NAME.$dirty}"><label class="col-md-3 control-label req" for="EVENT_NAME">Event Name:</label><div class="col-md-3"><input ng-if="loggedInRole == \'Admin\'" class="form-control" id="EVENT_NAME" name="EVENT_NAME" ng-model="anEvent.EVENT_NAME" type="text" placeholder="Event Name" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(eventForm.$valid)" required> <span ng-if="loggedInRole != \'Admin\'">{{anEvent.EVENT_NAME}}</span></div></div><div class="form-group"><label class="col-md-3 control-label" for="EVENT_DESCRIPTION">Description:</label><div class="col-md-6"><textarea ng-if="loggedInRole == \'Admin\'" class="form-control" id="EVENT_DESCRIPTION" type="text" rows="3" placeholder="Event Description" ng-model="anEvent.EVENT_DESCRIPTION" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(eventForm.$valid)">\n                <span ng-if="loggedInRole != \'Admin\'">{{anEvent.EVENT_DESCRIPTION}}</span>\n            </div>\n        </div>\n\n        \n\n        <div class="form-group">\n            <label class="col-md-3 control-label" for="EVENT_START_DATE">Event Start Date:</label>\n            <div class="col-md-6">\n                <div class="input-group">\n                    <input ng-show="loggedInRole == \'Admin\'" class="form-control" id="EVENT_START_DATE" name="sd" ng-disabled="undetermined" type="text" uib-datepicker-popup="MMMM dd, yyyy" is-open="datepickrs.sd" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(0)" ng-model="anEvent.EVENT_START_DATE">\n                    <span ng-show="loggedInRole == \'Admin\'" class="input-group-btn">\n                        <button class="btn btn-default" ng-click="open($event, \'sd\')">\n                            <i class="glyphicon glyphicon-calendar">\n                        </button>\n                    </span>\n                </div>\n                <span ng-show="loggedInRole != \'Admin\'">{{anEvent.EVENT_START_DATE | date: "MM/dd/yyyy"}}</span>\n            </div>\n        </div>\n\n\n        \n        <div class="form-group">\n            <label class="col-md-3 control-label" for="EVENT_END_DATE">Event End Date:</label>\n            <div class="col-md-6">\n                <div>\n                    <div class="input-group">\n                        <input ng-show="loggedInRole == \'Admin\'" class="form-control" id="EVENT_END_DATE" name="ed" ng-disabled="undetermined" type="text" uib-datepicker-popup="MMMM dd, yyyy" is-open="datepickrs.ed" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(0)" ng-model="anEvent.EVENT_END_DATE">\n                        <span ng-show="loggedInRole == \'Admin\'" class="input-group-btn">\n                            <button class="btn btn-default" ng-click="open($event, \'ed\')">\n                                <i class="glyphicon glyphicon-calendar">\n                            </button>\n                        </span>\n                    </div>\n                </div>\n                <span ng-show="loggedInRole != \'Admin\'">{{anEvent.EVENT_END_DATE | date: "MM/dd/yyyy"}}</span>\n            </div>\n        </div>\n\n        \n        <div class="form-group required">\n            <label class="col-md-3 control-label req" for="EVENT_TYPE_ID">Event Type:</label>\n            <div class="col-md-3">\n                <select ng-if="loggedInRole == \'Admin\'" class="form-control" id="EVENT_TYPE_ID" name="EVENT_TYPE_ID" ng-model="anEvent.EVENT_TYPE_ID" ng-options="et.EVENT_TYPE_ID as et.TYPE for et in eventTypeList | orderBy: \'TYPE\'" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(eventForm.$valid)" required>\n                    <option value="">Select Event Type</option>\n                </select>\n                <span ng-if="loggedInRole != \'Admin\'">{{thisEventType}}</span>\n            </div>\n        </div>\n\n        \n        <div class="form-group required">\n            <label class="col-md-3 control-label req" for="EVENT_STATUS_ID">Event Status:</label>\n            <div class="col-md-3">\n                <select ng-if="loggedInRole == \'Admin\'" class="form-control" id="EVENT_STATUS_ID" name="EVENT_STATUS_ID" ng-model="anEvent.EVENT_STATUS_ID" ng-options="es.EVENT_STATUS_ID as es.STATUS for es in eventStatList | orderBy: \'STATUS\'" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(eventForm.$valid)" required>\n                    <option value="">Select Event Status</option>\n                </select>\n                <span ng-if="loggedInRole != \'Admin\'">{{thisEventStatus}}</span>\n            </div>\n        </div>\n\n        \n        <div class="form-group required">\n            <label class="col-md-3 control-label req" for="EVENT_COORDINATOR">Event Coordinator:</label>\n            <div class="col-md-3">\n                <select ng-if="loggedInRole == \'Admin\'" class="form-control" id="EVENT_COORDINATOR" name="EVENT_COORDINATOR" ng-model="anEvent.EVENT_COORDINATOR" ng-options="ec.MEMBER_ID as ec.FNAME + \' \' + ec.LNAME for ec in eventCoordList | orderBy: \'LNAME\'" ng-model-options="{ updateOn: \'blur\' }" ng-change="SaveOnBlur(eventForm.$valid)" required>\n                    <option value="">Select Event Coordinator</option>\n                </select>\n                <span ng-if="loggedInRole != \'Admin\'">{{thisEventCoord}}</span>\n            </div>\n        </div>\n\n        \n        <div class="form-group">\n            <div class="col-md-4 col-md-offset-2">\n                <span>\n                    <button ng-if="anEvent.EVENT_ID == undefined" class="btn btn-primary" style="width:80px;margin-right:10px" ng-click="save(eventForm.$valid)">\n                        <span>Create</span>\n                    </button>\n                </span>\n                \n            </div>\n        </div>\n\n    </fieldset>\n</form>\n\n<div style="margin-bottom:10px">\n    <button class="btn btn-primary" back-button>\n        <span>Cancel/Back</span>\n    </button>\n</div>')}])}(),function(){"use strict";var e=angular.module("ModalControllers");e.controller("ConfirmModalCtrl",["$scope","$uibModalInstance","nameToRemove","what",function(e,t,n,o){switch(o){case"Member":e.nameToRmv=n.FNAME+" "+n.LNAME;break;case"Event":e.nameToRmv=n.EVENT_NAME;break;case"Agency":e.nameToRmv=n.AGENCY_NAME;break;case"Contact Type":e.nameToRmv=n.TYPE;break;case"Deployment Priority":e.nameToRmv=n.PRIORITY_NAME;break;case"Event Status":e.nameToRmv=n.STATUS;break;case"File Type":e.nameToRmv=n.FILETYPE;break;case"Horizontal Collection Method":e.nameToRmv=n.HCOLLECT_METHOD;break;case"Horizontal Datum":e.nameToRmv=n.DATUM_NAME;break;case"Housing Type":e.nameToRmv=n.TYPE_NAME;break;case"HWM Quality":e.nameToRmv=n.HWM_QUALITY;break;case"HWM Type":e.nameToRmv=n.HWM_TYPE;break;case"Instrument Collection Condition":e.nameToRmv=n.CONDITION;break;case"Marker":e.nameToRmv=n.MARKER1;break;case"Network Name":e.nameToRmv=n.NAME;break;case"Objective Point Quality":e.nameToRmv=n.QUALITY;break;case"Objective Point Type":e.nameToRmv=n.OP_TYPE;break;case"Sensor Brand":e.nameToRmv=n.BRAND_NAME;break;case"Deployment Type":e.nameToRmv=n.METHOD;break;case"Status Type":e.nameToRmv=n.STATUS;break;case"Sensor Type":e.nameToRmv=n.SENSOR;break;case"Network Type":e.nameToRmv=n.NETWORK_TYPE_NAME;break;case"Vertical Collection Method":e.nameToRmv=n.VCOLLECT_METHOD;break;case"Vertical Datum":e.nameToRmv=n.DATUM_ABBREVIATION;break;case"Objective Point":e.nameToRmv=n.NAME;break;case"HWM":var a=new Date(n.FLAG_DATE),r=a.getFullYear(),s=a.getMonth(),l=("0"+a.getDate()).slice(-2),i=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],d=i[s]+" "+l+", "+r;e.nameToRmv="Flagged on: "+d;break;case"Sensor":e.nameToRmv=n.Deployment_Type}e.what=o,e.ok=function(){t.close(n)},e.cancel=function(){t.dismiss("cancel")}}])}(),!function(e){function t(n,o){return this instanceof t?("object"==typeof n?o=n:(o=o||{},o.alias=n),this.el=void 0,this.opts=e.extend(!0,{},this.defaults,o),this.noMasksCache=o&&void 0!==o.definitions,this.userOptions=o||{},void a(this.opts.alias,o,this.opts)):new t(n,o)}function n(e){var t=document.createElement("input"),n="on"+e,o=n in t;return o||(t.setAttribute(n,"return;"),o="function"==typeof t[n]),t=null,o}function o(e){var t="text"===e||"tel"===e||"password"===e;if(!t){var n=document.createElement("input");n.setAttribute("type",e),t="text"===n.type,n=null}return t}function a(t,n,o){var r=o.aliases[t];return r?(r.alias&&a(r.alias,void 0,o),e.extend(!0,o,r),e.extend(!0,o,n),!0):(null===o.mask&&(o.mask=t),!1)}function r(t,n,o){function r(e,n){n=void 0!==n?n:t.getAttribute("data-inputmask-"+e),null!==n&&("string"==typeof n&&(0===e.indexOf("on")?n=window[n]:"false"===n?n=!1:"true"===n&&(n=!0)),"mask"===e&&0===n.indexOf("[")?(o[e]=n.replace(/[\s[\]]/g,"").split(","),o[e][0]=o[e][0].replace("'",""),o[e][o[e].length-1]=o[e][o[e].length-1].replace("'","")):o[e]=n)}var s,l,i,d=t.getAttribute("data-inputmask");d&&""!==d&&(d=d.replace(new RegExp("'","g"),'"'),l=JSON.parse("{"+d+"}"));for(s in n){if(l){i=void 0;for(var c in l)if(c.toLowerCase()===s.toLowerCase()){i=l[c];break}}r(s,i)}if(o.alias){a(o.alias,o,n);for(s in n)r(s)}return e.extend(!0,n,o),n}function s(n,o){function a(t){function o(e,t,n,o){this.matches=[],this.isGroup=e||!1,this.isOptional=t||!1,this.isQuantifier=n||!1,this.isAlternator=o||!1,this.quantifier={min:1,max:1}}function a(t,o,a){var r=n.definitions[o];a=void 0!==a?a:t.matches.length;var s=t.matches[a-1];if(r&&!g){r.placeholder=e.isFunction(r.placeholder)?r.placeholder(n):r.placeholder;for(var l=r.prevalidator,i=l?l.length:0,d=1;d<r.cardinality;d++){var c=i>=d?l[d-1]:[],p=c.validator,u=c.cardinality;t.matches.splice(a++,0,{fn:p?"string"==typeof p?new RegExp(p):new function(){this.test=p}:new RegExp("."),cardinality:u?u:1,optionality:t.isOptional,newBlockMarker:void 0===s||s.def!==(r.definitionSymbol||o),casing:r.casing,def:r.definitionSymbol||o,placeholder:r.placeholder,mask:o}),s=t.matches[a-1]}t.matches.splice(a++,0,{fn:r.validator?"string"==typeof r.validator?new RegExp(r.validator):new function(){this.test=r.validator}:new RegExp("."),cardinality:r.cardinality,optionality:t.isOptional,newBlockMarker:void 0===s||s.def!==(r.definitionSymbol||o),casing:r.casing,def:r.definitionSymbol||o,placeholder:r.placeholder,mask:o})}else t.matches.splice(a++,0,{fn:null,cardinality:0,optionality:t.isOptional,newBlockMarker:void 0===s||s.def!==o,casing:null,def:o,placeholder:void 0,mask:o}),g=!1}function r(e,t){e.isGroup&&(e.isGroup=!1,a(e,n.groupmarker.start,0),t!==!0&&a(e,n.groupmarker.end))}function s(e,t,n,o){t.matches.length>0&&(void 0===o||o)&&(n=t.matches[t.matches.length-1],r(n)),a(t,e)}function l(){if(h.length>0){if(u=h[h.length-1],s(c,u,E,!u.isAlternator),u.isAlternator){m=h.pop();for(var e=0;e<m.matches.length;e++)m.matches[e].isGroup=!1;h.length>0?(u=h[h.length-1],u.matches.push(m)):T.matches.push(m)}}else s(c,T,E)}function i(e){function t(e){return e===n.optionalmarker.start?e=n.optionalmarker.end:e===n.optionalmarker.end?e=n.optionalmarker.start:e===n.groupmarker.start?e=n.groupmarker.end:e===n.groupmarker.end&&(e=n.groupmarker.start),e}e.matches=e.matches.reverse();for(var o in e.matches){var a=parseInt(o);if(e.matches[o].isQuantifier&&e.matches[a+1]&&e.matches[a+1].isGroup){var r=e.matches[o];e.matches.splice(o,1),e.matches.splice(a+1,0,r)}e.matches[o]=void 0!==e.matches[o].matches?i(e.matches[o]):t(e.matches[o])}return e}for(var d,c,p,u,m,E,f,v=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,g=!1,T=new o,h=[],b=[];d=v.exec(t);)if(c=d[0],g)l();else switch(c.charAt(0)){case n.escapeChar:g=!0;break;case n.optionalmarker.end:case n.groupmarker.end:if(p=h.pop(),void 0!==p)if(h.length>0){if(u=h[h.length-1],u.matches.push(p),u.isAlternator){m=h.pop();for(var y=0;y<m.matches.length;y++)m.matches[y].isGroup=!1;h.length>0?(u=h[h.length-1],u.matches.push(m)):T.matches.push(m)}}else T.matches.push(p);else l();break;case n.optionalmarker.start:h.push(new o(!1,!0));break;case n.groupmarker.start:h.push(new o(!0));break;case n.quantifiermarker.start:var S=new o(!1,!1,!0);c=c.replace(/[{}]/g,"");var A=c.split(","),D=isNaN(A[0])?A[0]:parseInt(A[0]),_=1===A.length?D:isNaN(A[1])?A[1]:parseInt(A[1]);if(("*"===_||"+"===_)&&(D="*"===_?0:1),S.quantifier={min:D,max:_},h.length>0){var N=h[h.length-1].matches;d=N.pop(),d.isGroup||(f=new o(!0),f.matches.push(d),d=f),N.push(d),N.push(S)}else d=T.matches.pop(),d.isGroup||(f=new o(!0),f.matches.push(d),d=f),T.matches.push(d),T.matches.push(S);break;case n.alternatormarker:h.length>0?(u=h[h.length-1],
E=u.matches.pop()):E=T.matches.pop(),E.isAlternator?h.push(E):(m=new o(!1,!1,!1,!0),m.matches.push(E),h.push(m));break;default:l()}for(;h.length>0;)p=h.pop(),r(p,!0),T.matches.push(p);return T.matches.length>0&&(E=T.matches[T.matches.length-1],r(E),b.push(T)),n.numericInput&&i(b[0]),b}function r(r,s){if(null===r||""===r)return void 0;if(1===r.length&&n.greedy===!1&&0!==n.repeat&&(n.placeholder=""),n.repeat>0||"*"===n.repeat||"+"===n.repeat){var l="*"===n.repeat?0:"+"===n.repeat?1:n.repeat;r=n.groupmarker.start+r+n.groupmarker.end+n.quantifiermarker.start+l+","+n.repeat+n.quantifiermarker.end}var i;return void 0===t.prototype.masksCache[r]||o===!0?(i={mask:r,maskToken:a(r),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:s},o!==!0&&(t.prototype.masksCache[n.numericInput?r.split("").reverse().join(""):r]=i,i=e.extend(!0,{},t.prototype.masksCache[n.numericInput?r.split("").reverse().join(""):r]))):i=e.extend(!0,{},t.prototype.masksCache[n.numericInput?r.split("").reverse().join(""):r]),i}function s(e){return e=e.toString()}var l;if(e.isFunction(n.mask)&&(n.mask=n.mask(n)),e.isArray(n.mask)){if(n.mask.length>1){n.keepStatic=null===n.keepStatic?!0:n.keepStatic;var i="(";return e.each(n.numericInput?n.mask.reverse():n.mask,function(t,n){i.length>1&&(i+=")|("),i+=s(void 0===n.mask||e.isFunction(n.mask)?n:n.mask)}),i+=")",r(i,n.mask)}n.mask=n.mask.pop()}return n.mask&&(l=void 0===n.mask.mask||e.isFunction(n.mask.mask)?r(s(n.mask),n.mask):r(s(n.mask.mask),n.mask)),l}function l(a,r,s){function i(e,t,n){t=t||0;var o,a,r,s=[],l=0;do{if(e===!0&&f().validPositions[l]){var i=f().validPositions[l];a=i.match,o=i.locator.slice(),s.push(n===!0?i.input:x(l,a))}else r=b(l,o,l-1),a=r.match,o=r.locator.slice(),s.push(x(l,a));l++}while((void 0===Ee||Ee>l-1)&&null!==a.fn||null===a.fn&&""!==a.def||t>=l);return s.pop(),s}function f(){return r}function v(e){var t=f();t.buffer=void 0,t.tests={},e!==!0&&(t._buffer=void 0,t.validPositions={},t.p=0)}function g(e,t){var n=f(),o=-1,a=n.validPositions;void 0===e&&(e=-1);var r=o,s=o;for(var l in a){var i=parseInt(l);a[i]&&(t||null!==a[i].match.fn)&&(e>=i&&(r=i),i>=e&&(s=i))}return o=-1!==r&&e-r>1||e>s?r:s}function T(t,n,o){if(s.insertMode&&void 0!==f().validPositions[t]&&void 0===o){var a,r=e.extend(!0,{},f().validPositions),l=g();for(a=t;l>=a;a++)delete f().validPositions[a];f().validPositions[t]=n;var i,d=!0,c=f().validPositions;for(a=i=t;l>=a;a++){var p=r[a];if(void 0!==p)for(var u=i,m=-1;u<w()&&(null==p.match.fn&&c[a]&&(c[a].match.optionalQuantifier===!0||c[a].match.optionality===!0)||null!=p.match.fn);){if(null===p.match.fn||!s.keepStatic&&c[a]&&(void 0!==c[a+1]&&A(a+1,c[a].locator.slice(),a).length>1||void 0!==c[a].alternation)?u++:u=P(i),S(u,p.match.def)){d=R(u,p.input,!0,!0)!==!1,i=u;break}if(d=null==p.match.fn,m===u)break;m=u}if(!d)break}if(!d)return f().validPositions=e.extend(!0,{},r),v(!0),!1}else f().validPositions[t]=n;return v(!0),!0}function h(e,t,n,o){var a,r=e;for(f().p=e,a=r;t>a;a++)void 0!==f().validPositions[a]&&(n===!0||s.canClearPosition(f(),a,g(),o,s)!==!1)&&delete f().validPositions[a];for(a=r+1;a<=g();){for(;void 0!==f().validPositions[r];)r++;var l=f().validPositions[r];if(r>a&&(a=r+1),void 0===f().validPositions[a]&&O(a)||void 0!==l)a++;else{var i=b(a);S(r,i.match.def)?R(r,i.input||x(a),!0)!==!1&&(delete f().validPositions[a],a++):O(a)||(a++,r--),r++}}var d=g(),c=w();for(o!==!0&&n!==!0&&void 0!==f().validPositions[d]&&f().validPositions[d].input===s.radixPoint&&delete f().validPositions[d],a=d+1;c>=a;a++)f().validPositions[a]&&delete f().validPositions[a];v(!0)}function b(e,t,n){var o=f().validPositions[e];if(void 0===o)for(var a=A(e,t,n),r=g(),l=f().validPositions[r]||A(0)[0],i=void 0!==l.alternation?l.locator[l.alternation].toString().split(","):[],d=0;d<a.length&&(o=a[d],!(o.match&&(s.greedy&&o.match.optionalQuantifier!==!0||(o.match.optionality===!1||o.match.newBlockMarker===!1)&&o.match.optionalQuantifier!==!0)&&(void 0===l.alternation||l.alternation!==o.alternation||void 0!==o.locator[l.alternation]&&I(o.locator[l.alternation].toString().split(","),i))));d++);return o}function y(e){return f().validPositions[e]?f().validPositions[e].match:A(e)[0].match}function S(e,t){for(var n=!1,o=A(e),a=0;a<o.length;a++)if(o[a].match&&o[a].match.def===t){n=!0;break}return n}function A(t,n,o,a){function r(n,o,a,i){function c(a,i,m){if(d>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+f().mask;if(d===t&&void 0===a.matches)return p.push({match:a,locator:i.reverse()}),!0;if(void 0!==a.matches){if(a.isGroup&&m!==a){if(a=c(n.matches[e.inArray(a,n.matches)+1],i))return!0}else if(a.isOptional){var E=a;if(a=r(a,o,i,m)){if(s=p[p.length-1].match,l=0===e.inArray(s,E.matches),!l)return!0;u=!0,d=t}}else if(a.isAlternator){var v,g=a,T=[],h=p.slice(),b=i.length,y=o.length>0?o.shift():-1;if(-1===y||"string"==typeof y){var S=d,A=o.slice(),D=[];"string"==typeof y&&(D=y.split(","));for(var _=0;_<g.matches.length;_++){if(p=[],a=c(g.matches[_],[_].concat(i),m)||a,a!==!0&&void 0!==a&&D[D.length-1]<g.matches.length){var N=n.matches.indexOf(a)+1;n.matches.length>N&&(a=c(n.matches[N],[N].concat(i.slice(1,i.length)),m),a&&(D.push(N.toString()),e.each(p,function(e,t){t.alternation=i.length-1})))}v=p.slice(),d=S,p=[];for(var M=0;M<A.length;M++)o[M]=A[M];for(var I=0;I<v.length;I++){var R=v[I];R.alternation=R.alternation||b;for(var O=0;O<T.length;O++){var w=T[O];if(R.match.mask===w.match.mask&&("string"!=typeof y||-1!==e.inArray(R.locator[R.alternation].toString(),D))){v.splice(I,1),I--,w.locator[R.alternation]=w.locator[R.alternation]+","+R.locator[R.alternation],w.alternation=R.alternation;break}}}T=T.concat(v)}"string"==typeof y&&(T=e.map(T,function(t,n){if(isFinite(n)){var o,a=t.alternation,r=t.locator[a].toString().split(",");t.locator[a]=void 0,t.alternation=void 0;for(var s=0;s<r.length;s++)o=-1!==e.inArray(r[s],D),o&&(void 0!==t.locator[a]?(t.locator[a]+=",",t.locator[a]+=r[s]):t.locator[a]=parseInt(r[s]),t.alternation=a);if(void 0!==t.locator[a])return t}})),p=h.concat(T),d=t,u=p.length>0}else a=g.matches[y]?c(g.matches[y],[y].concat(i),m):!1;if(a)return!0}else if(a.isQuantifier&&m!==n.matches[e.inArray(a,n.matches)-1])for(var P=a,C=o.length>0?o.shift():0;C<(isNaN(P.quantifier.max)?C+1:P.quantifier.max)&&t>=d;C++){var L=n.matches[e.inArray(P,n.matches)-1];if(a=c(L,[C].concat(i),L)){if(s=p[p.length-1].match,s.optionalQuantifier=C>P.quantifier.min-1,l=0===e.inArray(s,L.matches)){if(C>P.quantifier.min-1){u=!0,d=t;break}return!0}return!0}}else if(a=r(a,o,i,m))return!0}else d++}for(var m=o.length>0?o.shift():0;m<n.matches.length;m++)if(n.matches[m].isQuantifier!==!0){var E=c(n.matches[m],[m].concat(a),i);if(E&&d===t)return E;if(d>t)break}}var s,l,i=f().maskToken,d=n?o:0,c=n||[0],p=[],u=!1;if(a===!0&&f().tests[t])return f().tests[t];if(void 0===n){for(var m,E=t-1;void 0===(m=f().validPositions[E])&&E>-1&&(!f().tests[E]||void 0===(m=f().tests[E][0]));)E--;void 0!==m&&E>-1&&(d=E,c=m.locator.slice())}for(var v=c.shift();v<i.length;v++){var g=r(i[v],c,[v]);if(g&&d===t||d>t)break}return(0===p.length||u)&&p.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:""},locator:[]}),f().tests[t]=e.extend(!0,[],p),f().tests[t]}function D(){return void 0===f()._buffer&&(f()._buffer=i(!1,1)),f()._buffer}function _(e){return(void 0===f().buffer||e===!0)&&(e===!0&&(f().test={}),f().buffer=i(!0,g(),!0)),f().buffer}function N(e,t,n){var o;if(n=n,e===!0)v(),e=0,t=n.length;else for(o=e;t>o;o++)delete f().validPositions[o],delete f().tests[o];for(o=e;t>o;o++)v(!0),n[o]!==s.skipOptionalPartCharacter&&R(o,n[o],!0,!0)}function M(e,t){switch(t.casing){case"upper":e=e.toUpperCase();break;case"lower":e=e.toLowerCase()}return e}function I(t,n){for(var o=s.greedy?n:n.slice(0,1),a=!1,r=0;r<t.length;r++)if(-1!==e.inArray(t[r],o)){a=!0;break}return a}function R(t,n,o,a){function r(t,n,o,a){var r=!1;return e.each(A(t),function(l,i){for(var d=i.match,c=n?1:0,p="",u=d.cardinality;u>c;u--)p+=L(t-(u-1));if(n&&(p+=n),_(!0),r=null!=d.fn?d.fn.test(p,f(),t,o,s):n!==d.def&&n!==s.skipOptionalPartCharacter||""===d.def?!1:{c:d.def,pos:t},r!==!1){var m=void 0!==r.c?r.c:n;m=m===s.skipOptionalPartCharacter&&null===d.fn?d.def:m;var E=t,b=_();if(void 0!==r.remove&&(e.isArray(r.remove)||(r.remove=[r.remove]),e.each(r.remove.sort(function(e,t){return t-e}),function(e,t){h(t,t+1,!0)})),void 0!==r.insert&&(e.isArray(r.insert)||(r.insert=[r.insert]),e.each(r.insert.sort(function(e,t){return e-t}),function(e,t){R(t.pos,t.c,!0)})),r.refreshFromBuffer){var y=r.refreshFromBuffer;if(o=!0,N(y===!0?y:y.start,y.end,b),void 0===r.pos&&void 0===r.c)return r.pos=g(),!1;if(E=void 0!==r.pos?r.pos:t,E!==t)return r=e.extend(r,R(E,m,!0)),!1}else if(r!==!0&&void 0!==r.pos&&r.pos!==t&&(E=r.pos,N(t,E,_().slice()),E!==t))return r=e.extend(r,R(E,m,!0)),!1;return r!==!0&&void 0===r.pos&&void 0===r.c?!1:(l>0&&v(!0),T(E,e.extend({},i,{input:M(m,d)}),a)||(r=!1),!1)}}),r}function l(t,n,o,a){for(var r,l,i,d,c,p,u=e.extend(!0,{},f().validPositions),m=g();m>=0&&(d=f().validPositions[m],!d||void 0===d.alternation||(r=m,l=f().validPositions[r].alternation,b(r).locator[d.alternation]===d.locator[d.alternation]));m--);if(void 0!==l){r=parseInt(r);for(var E in f().validPositions)if(E=parseInt(E),d=f().validPositions[E],E>=r&&void 0!==d.alternation){var T=f().validPositions[r].locator[l].toString().split(","),h=d.locator[l]||T[0];h.length>0&&(h=h.split(",")[0]);for(var y=0;y<T.length;y++)if(h<T[y]){for(var S,A,D=E;D>=0;D--)if(S=f().validPositions[D],void 0!==S){A=S.locator[l],S.locator[l]=parseInt(T[y]);break}if(h!==S.locator[l]){var _=[],N=0;for(c=E+1;c<g()+1;c++)p=f().validPositions[c],p&&(null!=p.match.fn?_.push(p.input):t>c&&N++),delete f().validPositions[c],delete f().tests[c];for(v(!0),s.keepStatic=!s.keepStatic,i=!0;_.length>0;){var M=_.shift();if(M!==s.skipOptionalPartCharacter&&!(i=R(g()+1,M,!1,!0)))break}if(S.alternation=l,S.locator[l]=A,i){var I=g(t)+1,O=0;for(c=E+1;c<g()+1;c++)p=f().validPositions[c],p&&null==p.match.fn&&t>c&&O++;t+=O-N,i=R(t>I?I:t,n,o,a)}if(s.keepStatic=!s.keepStatic,i)return i;v(),f().validPositions=e.extend(!0,{},u)}}break}}return!1}function i(t,n){for(var o=f().validPositions[n],a=o.locator,r=a.length,s=t;n>s;s++)if(!O(s)){var l=A(s),i=l[0],d=-1;e.each(l,function(e,t){for(var n=0;r>n;n++)t.locator[n]&&I(t.locator[n].toString().split(","),a[n].toString().split(","))&&n>d&&(d=n,i=t)}),T(s,e.extend({},i,{input:i.match.def}),!0)}}o=o===!0;for(var d=_(),c=t-1;c>-1&&!f().validPositions[c];c--);for(c++;t>c;c++)void 0===f().validPositions[c]&&((!O(c)||d[c]!==x(c))&&A(c).length>1||d[c]===s.radixPoint||"0"===d[c]&&e.inArray(s.radixPoint,d)<c)&&r(c,d[c],!0);var p=t,u=!1,m=e.extend(!0,{},f().validPositions);if(p<w()&&(u=r(p,n,o,a),(!o||a)&&u===!1)){var E=f().validPositions[p];if(!E||null!==E.match.fn||E.match.def!==n&&n!==s.skipOptionalPartCharacter){if((s.insertMode||void 0===f().validPositions[P(p)])&&!O(p))for(var y=p+1,S=P(p);S>=y;y++)if(u=r(y,n,o,a),u!==!1){i(p,y),p=y;break}}else u={caret:P(p)}}if(u===!1&&s.keepStatic&&Y(d)&&(u=l(t,n,o,a)),u===!0&&(u={pos:p}),e.isFunction(s.postValidation)&&u!==!1&&!o){var D=s.postValidation(_(!0),s);if(D){if(D.refreshFromBuffer){var C=D.refreshFromBuffer;N(C===!0?C:C.start,C.end,D.buffer),v(!0),u=D}}else v(!0),f().validPositions=e.extend(!0,{},m),u=!1}return u}function O(e){var t=y(e);if(null!=t.fn)return t.fn;if(e>-1&&!s.keepStatic&&void 0===f().validPositions[e]){for(var n=A(e),o=!0,a=0;a<n.length;a++)if(""!==n[a].match.def&&(void 0===n[a].alternation||n[a].locator[n[a].alternation].length>1)){o=!1;break}return o}return!1}function w(){var e;Ee=void 0!==ue?ue.maxLength:void 0,-1===Ee&&(Ee=void 0);var t,n=g(),o=f().validPositions[n],a=void 0!==o?o.locator.slice():void 0;for(t=n+1;void 0===o||null!==o.match.fn||null===o.match.fn&&""!==o.match.def;t++)o=b(t,a,t-1),a=o.locator.slice();var r=y(t-1);return e=""!==r.def?t:t-1,void 0===Ee||Ee>e?e:Ee}function P(e,t){var n=w();if(e>=n)return n;for(var o=e;++o<n&&(t===!0&&(y(o).newBlockMarker!==!0||!O(o))||t!==!0&&!O(o)&&(s.nojumps!==!0||s.nojumpsThreshold>o)););return o}function C(e,t){var n=e;if(0>=n)return 0;for(;--n>0&&(t===!0&&y(n).newBlockMarker!==!0||t!==!0&&!O(n)););return n}function L(e){return void 0===f().validPositions[e]?x(e):f().validPositions[e].input}function k(t,n,o,a,r){if(a&&e.isFunction(s.onBeforeWrite)){var l=s.onBeforeWrite.call(t,a,n,o,s);if(l){if(l.refreshFromBuffer){var i=l.refreshFromBuffer;N(i===!0?i:i.start,i.end,l.buffer||n),n=_(!0)}void 0!==o&&(o=void 0!==l.caret?l.caret:o)}}t.inputmask._valueSet(n.join("")),void 0===o||void 0!==a&&"blur"===a.type||$(t,o),r===!0&&(Te=!0,e(t).trigger("input"))}function x(e,t){if(t=t||y(e),void 0!==t.placeholder)return t.placeholder;if(null===t.fn){if(e>-1&&!s.keepStatic&&void 0===f().validPositions[e]){for(var n,o=A(e),a=!1,r=0;r<o.length;r++){if(n&&""!==o[r].match.def&&o[r].match.def!==n.match.def&&(void 0===o[r].alternation||o[r].alternation===n.alternation)){a=!0;break}o[r].match.optionality!==!0&&o[r].match.optionalQuantifier!==!0&&(n=o[r])}if(a)return s.placeholder.charAt(e%s.placeholder.length)}return t.def}return s.placeholder.charAt(e%s.placeholder.length)}function H(n,o,a,r){function l(){var e=!1,t=D().slice(c,P(c)).join("").indexOf(d);if(-1!==t&&!O(c)){e=!0;for(var n=D().slice(c,c+t),o=0;o<n.length;o++)if(" "!==n[o]){e=!1;break}}return e}var i=r.slice(),d="",c=0;if(v(),f().p=P(-1),!a)if(s.autoUnmask!==!0){var p=D().slice(0,P(-1)).join(""),u=i.join("").match(new RegExp("^"+t.escapeRegex(p),"g"));u&&u.length>0&&(i.splice(0,u.length*p.length),c=P(c))}else c=P(c);e.each(i,function(t,o){var r=e.Event("keypress");r.which=o.charCodeAt(0),d+=o;var i=g(void 0,!0),p=f().validPositions[i],u=b(i+1,p?p.locator.slice():void 0,i);if(!l()||a||s.autoUnmask){var m=a?t:null==u.match.fn&&u.match.optionality&&i+1<f().p?i+1:f().p;j.call(n,r,!0,!1,a,m),c=m+1,d=""}else j.call(n,r,!0,!1,!0,i+1)}),o&&k(n,_(),document.activeElement===n?P(g(0)):void 0,e.Event("checkval"))}function F(t){if(t&&void 0===t.inputmask)return t.value;var n=[],o=f().validPositions;for(var a in o)o[a].match&&null!=o[a].match.fn&&n.push(o[a].input);var r=0===n.length?null:(ve?n.reverse():n).join("");if(null!==r){var l=(ve?_().slice().reverse():_()).join("");e.isFunction(s.onUnMask)&&(r=s.onUnMask.call(t,l,r,s)||r)}return r}function $(e,t,n){function o(e){if(ve&&"number"==typeof e&&(!s.greedy||""!==s.placeholder)){var t=_().join("").length;e=t-e}return e}var a;if("number"!=typeof t)return e.setSelectionRange?(t=e.selectionStart,n=e.selectionEnd):window.getSelection?(a=window.getSelection().getRangeAt(0),(a.commonAncestorContainer.parentNode===e||a.commonAncestorContainer===e)&&(t=a.startOffset,n=a.endOffset)):document.selection&&document.selection.createRange&&(a=document.selection.createRange(),t=0-a.duplicate().moveStart("character",-1e5),n=t+a.text.length),{begin:o(t),end:o(n)};t=o(t),n=o(n),n="number"==typeof n?n:t;var r=parseInt(((e.ownerDocument.defaultView||window).getComputedStyle?(e.ownerDocument.defaultView||window).getComputedStyle(e,null):e.currentStyle).fontSize)*n;if(e.scrollLeft=r>e.scrollWidth?r:0,p||s.insertMode!==!1||t!==n||n++,e.setSelectionRange)e.selectionStart=t,e.selectionEnd=n;else if(window.getSelection){if(a=document.createRange(),void 0===e.firstChild){var l=document.createTextNode("");e.appendChild(l)}a.setStart(e.firstChild,t<e.inputmask._valueGet().length?t:e.inputmask._valueGet().length),a.setEnd(e.firstChild,n<e.inputmask._valueGet().length?n:e.inputmask._valueGet().length),a.collapse(!0);var i=window.getSelection();i.removeAllRanges(),i.addRange(a)}else e.createTextRange&&(a=e.createTextRange(),a.collapse(!0),a.moveEnd("character",n),a.moveStart("character",t),a.select())}function W(t){var n,o,a=_(),r=a.length,s=g(),l={},i=f().validPositions[s],d=void 0!==i?i.locator.slice():void 0;for(n=s+1;n<a.length;n++)o=b(n,d,n-1),d=o.locator.slice(),l[n]=e.extend(!0,{},o);var c=i&&void 0!==i.alternation?i.locator[i.alternation]:void 0;for(n=r-1;n>s&&(o=l[n],(o.match.optionality||o.match.optionalQuantifier||c&&(c!==l[n].locator[i.alternation]&&null!=o.match.fn||null===o.match.fn&&o.locator[i.alternation]&&I(o.locator[i.alternation].toString().split(","),c.toString().split(","))&&""!==A(n)[0].def))&&a[n]===x(n,o.match));n--)r--;return t?{l:r,def:l[r]?l[r].match:void 0}:r}function U(e){for(var t=W(),n=e.length-1;n>t&&!O(n);n--);return e.splice(t,n+1-t),e}function Y(t){if(e.isFunction(s.isComplete))return s.isComplete.call(ue,t,s);if("*"===s.repeat)return void 0;var n=!1,o=W(!0),a=C(o.l);if(void 0===o.def||o.def.newBlockMarker||o.def.optionality||o.def.optionalQuantifier){n=!0;for(var r=0;a>=r;r++){var l=b(r).match;if(null!==l.fn&&void 0===f().validPositions[r]&&l.optionality!==!0&&l.optionalQuantifier!==!0||null===l.fn&&t[r]!==x(r,l)){n=!1;break}}}return n}function V(e,t){return ve?e-t>1||e-t===1&&s.insertMode:t-e>1||t-e===1&&s.insertMode}function B(n){return function(o){var a=!1,r=!1;if(void 0===this.inputmask){var l=e.data(this,"_inputmask_opts");l?new t(l).mask(this):e(this).off(".inputmask")}else{if("setvalue"===o.type||!(this.disabled||this.readOnly&&!("keydown"===o.type&&o.ctrlKey&&67===o.keyCode||s.tabThrough===!1&&o.keyCode===t.keyCode.TAB))){switch(o.type){case"input":if(Te===!0||a===!0)return Te=!1,o.preventDefault();r=!1;break;case"keydown":ge=!1,a=!1,r=!0;break;case"keypress":if(ge===!0)return o.preventDefault();ge=!0;break;case"compositionstart":a=!0;break;case"compositionupdate":Te=r;break;case"compositionend":a=!1,r=!1;break;case"cut":Te=!0}return n.apply(this,arguments)}o.preventDefault()}}}function G(t){function n(t){if(e.valHooks&&(void 0===e.valHooks[t]||e.valHooks[t].inputmaskpatch!==!0)){var n=e.valHooks[t]&&e.valHooks[t].get?e.valHooks[t].get:function(e){return e.value},o=e.valHooks[t]&&e.valHooks[t].set?e.valHooks[t].set:function(e,t){return e.value=t,e};e.valHooks[t]={get:function(e){if(e.inputmask){if(e.inputmask.opts.autoUnmask)return e.inputmask.unmaskedvalue();var t=n(e),o=e.inputmask.maskset,a=o._buffer;return a=a?a.join(""):"",t!==a?t:""}return n(e)},set:function(t,n){var a,r=e(t);return a=o(t,n),t.inputmask&&r.trigger("setvalue.inputmask"),a},inputmaskpatch:!0}}}function o(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():l.call(this)!==D().join("")?document.activeElement===this&&s.clearMaskOnLostFocus?(ve?U(_()).reverse():U(_())).join(""):l.call(this):"":l.call(this)}function a(t){i.call(this,t),this.inputmask&&e(this).trigger("setvalue.inputmask")}function r(t){e(t).on("mouseenter.inputmask",B(function(t){var n=e(this),o=this,a=o.inputmask._valueGet();""!==a&&a!==_().join("")&&n.trigger("setvalue.inputmask")}))}var l,i;t.inputmask.__valueGet||(Object.getOwnPropertyDescriptor&&void 0===t.value?(l=function(){return this.textContent},i=function(e){this.textContent=e},Object.defineProperty(t,"value",{get:o,set:a})):document.__lookupGetter__&&t.__lookupGetter__("value")?(l=t.__lookupGetter__("value"),i=t.__lookupSetter__("value"),t.__defineGetter__("value",o),t.__defineSetter__("value",a)):(l=function(){return t.value},i=function(e){t.value=e},n(t.type),r(t)),t.inputmask.__valueGet=l,t.inputmask._valueGet=function(e){return ve&&e!==!0?l.call(this.el).split("").reverse().join(""):l.call(this.el)},t.inputmask.__valueSet=i,t.inputmask._valueSet=function(e,t){i.call(this.el,null===e||void 0===e?"":t!==!0&&ve?e.split("").reverse().join(""):e)})}function q(n,o,a,r){function l(){if(s.keepStatic){v(!0);var t,o=[],a=e.extend(!0,{},f().validPositions);for(t=g();t>=0;t--){var r=f().validPositions[t];if(r&&(null!=r.match.fn&&o.push(r.input),delete f().validPositions[t],void 0!==r.alternation&&r.locator[r.alternation]===b(t).locator[r.alternation]))break}if(t>-1)for(;o.length>0;){f().p=P(g());var l=e.Event("keypress");l.which=o.pop().charCodeAt(0),j.call(n,l,!0,!1,!1,f().p)}else f().validPositions=e.extend(!0,{},a)}}if((s.numericInput||ve)&&(o===t.keyCode.BACKSPACE?o=t.keyCode.DELETE:o===t.keyCode.DELETE&&(o=t.keyCode.BACKSPACE),ve)){var i=a.end;a.end=a.begin,a.begin=i}o===t.keyCode.BACKSPACE&&(a.end-a.begin<1||s.insertMode===!1)?(a.begin=C(a.begin),void 0===f().validPositions[a.begin]||f().validPositions[a.begin].input!==s.groupSeparator&&f().validPositions[a.begin].input!==s.radixPoint||a.begin--):o===t.keyCode.DELETE&&a.begin===a.end&&(a.end=O(a.end)?a.end+1:P(a.end)+1,void 0===f().validPositions[a.begin]||f().validPositions[a.begin].input!==s.groupSeparator&&f().validPositions[a.begin].input!==s.radixPoint||a.end++),h(a.begin,a.end,!1,r),r!==!0&&l();var d=g(a.begin);d<a.begin?(-1===d&&v(),f().p=P(d)):r!==!0&&(f().p=a.begin)}function Q(o){var a=this,r=e(a),l=o.keyCode,i=$(a);l===t.keyCode.BACKSPACE||l===t.keyCode.DELETE||d&&127===l||o.ctrlKey&&88===l&&!n("cut")?(o.preventDefault(),88===l&&(ce=_().join("")),q(a,l,i),k(a,_(),f().p,o,ce!==_().join("")),a.inputmask._valueGet()===D().join("")?r.trigger("cleared"):Y(_())===!0&&r.trigger("complete"),s.showTooltip&&(a.title=s.tooltip||f().mask)):l===t.keyCode.END||l===t.keyCode.PAGE_DOWN?setTimeout(function(){var e=P(g());s.insertMode||e!==w()||o.shiftKey||e--,$(a,o.shiftKey?i.begin:e,e)},0):l===t.keyCode.HOME&&!o.shiftKey||l===t.keyCode.PAGE_UP?$(a,0,o.shiftKey?i.begin:0):(s.undoOnEscape&&l===t.keyCode.ESCAPE||90===l&&o.ctrlKey)&&o.altKey!==!0?(H(a,!0,!1,ce.split("")),r.trigger("click")):l!==t.keyCode.INSERT||o.shiftKey||o.ctrlKey?s.tabThrough===!0&&l===t.keyCode.TAB?(o.shiftKey===!0?(null===y(i.begin).fn&&(i.begin=P(i.begin)),i.end=C(i.begin,!0),i.begin=C(i.end,!0)):(i.begin=P(i.begin,!0),i.end=P(i.begin,!0),i.end<w()&&i.end--),i.begin<w()&&(o.preventDefault(),$(a,i.begin,i.end))):s.insertMode!==!1||o.shiftKey||(l===t.keyCode.RIGHT?setTimeout(function(){var e=$(a);$(a,e.begin)},0):l===t.keyCode.LEFT&&setTimeout(function(){var e=$(a);$(a,ve?e.begin+1:e.begin-1)},0)):(s.insertMode=!s.insertMode,$(a,s.insertMode||i.begin!==w()?i.begin:i.begin-1)),s.onKeyDown(o,_(),$(a).begin,s),he=-1!==e.inArray(l,s.ignorables)}function j(n,o,a,r,l){var i=this,d=e(i),c=n.which||n.charCode||n.keyCode;if(!(o===!0||n.ctrlKey&&n.altKey)&&(n.ctrlKey||n.metaKey||he))return c===t.keyCode.ENTER&&ce!==_().join("")&&(ce=_().join(""),n.preventDefault(),setTimeout(function(){d.trigger("change")},0)),!0;if(c){46===c&&n.shiftKey===!1&&","===s.radixPoint&&(c=44);var p,u=o?{begin:l,end:l}:$(i),m=String.fromCharCode(c),E=V(u.begin,u.end);E&&(f().undoPositions=e.extend(!0,{},f().validPositions),q(i,t.keyCode.DELETE,u,!0),u.begin=f().p,s.insertMode||(s.insertMode=!s.insertMode,T(u.begin,r),s.insertMode=!s.insertMode),E=!s.multi),f().writeOutBuffer=!0;var g=ve&&!E?u.end:u.begin,h=R(g,m,r);if(h!==!1){if(h!==!0&&(g=void 0!==h.pos?h.pos:g,m=void 0!==h.c?h.c:m),v(!0),void 0!==h.caret)p=h.caret;else{var b=f().validPositions;p=!s.keepStatic&&(void 0!==b[g+1]&&A(g+1,b[g].locator.slice(),g).length>1||void 0!==b[g].alternation)?g+1:P(g)}f().p=p}if(a!==!1){var y=this;if(setTimeout(function(){s.onKeyValidation.call(y,h,s)},0),f().writeOutBuffer&&h!==!1){var S=_();k(i,S,o?void 0:s.numericInput?C(p):p,n,o!==!0),o!==!0&&setTimeout(function(){Y(S)===!0&&d.trigger("complete")},0)}else E&&(f().buffer=void 0,f().validPositions=f().undoPositions)}else E&&(f().buffer=void 0,f().validPositions=f().undoPositions);if(s.showTooltip&&(i.title=s.tooltip||f().mask),o&&e.isFunction(s.onBeforeWrite)){var D=s.onBeforeWrite(n,_(),p,s);if(D&&D.refreshFromBuffer){var M=D.refreshFromBuffer;N(M===!0?M:M.start,M.end,D.buffer),v(!0),D.caret&&(f().p=D.caret)}}if(n.preventDefault(),o)return h}}function z(t){var n=this,o=t.originalEvent||t,a=e(n),r=n.inputmask._valueGet(!0),l=$(n);if("propertychange"===t.type&&n.inputmask._valueGet().length<=w())return!0;if("paste"===t.type){var i=r.substr(0,l.begin),d=r.substr(l.end,r.length);i===D().slice(0,l.begin).join("")&&(i=""),d===D().slice(l.end).join("")&&(d=""),window.clipboardData&&window.clipboardData.getData?r=i+window.clipboardData.getData("Text")+d:o.clipboardData&&o.clipboardData.getData&&(r=i+o.clipboardData.getData("text/plain")+d)}var c=r;if(e.isFunction(s.onBeforePaste)){if(c=s.onBeforePaste.call(n,r,s),c===!1)return t.preventDefault(),!1;c||(c=r)}return H(n,!1,!1,ve?c.split("").reverse():c.toString().split("")),k(n,_(),void 0,t,!0),a.trigger("click"),Y(_())===!0&&a.trigger("complete"),!1}function K(t){var n=this;H(n,!0,!1,n.inputmask._valueGet().split("")),Y(_())===!0&&e(n).trigger("complete"),t.preventDefault()}function Z(e){var n=this,o=$(n),a=n._valueGet();a=a.replace(new RegExp("("+t.escapeRegex(D().join(""))+")*"),""),o.begin>a.length&&($(n,a.length),o=$(n)),_().length-a.length!==1||a.charAt(o.begin)===_()[o.begin]||a.charAt(o.begin+1)===_()[o.begin]||O(o.begin)?K.call(this,e):(e.keyCode=s.keyCode.BACKSPACE,Q.call(n,e)),e.preventDefault()}function J(e){var t=e.originalEvent||e;ce=_().join(""),""===pe||0!==t.data.indexOf(pe)}function X(t){var n=this,o=t.originalEvent||t;0===o.data.indexOf(pe)&&(v(),f().p=P(-1),Te=!0);for(var a=o.data,r=0;r<a.length;r++){var l=e.Event("keypress");l.which=a.charCodeAt(r),ge=!1,he=!1,j.call(n,l,!0,!1,!1,f().p)}setTimeout(function(){var e=f().p;k(n,_(),s.numericInput?C(e):e)},0),pe=o.data}function ee(e){}function te(t){var n=this,o=n.inputmask._valueGet();H(n,!0,!1,(e.isFunction(s.onBeforeMask)?s.onBeforeMask.call(n,o,s)||o:o).split("")),ce=_().join(""),(s.clearMaskOnLostFocus||s.clearIncomplete)&&n.inputmask._valueGet()===D().join("")&&n.inputmask._valueSet("")}function ne(e){var t=this,n=t.inputmask._valueGet();s.showMaskOnFocus&&(!s.showMaskOnHover||s.showMaskOnHover&&""===n)?t.inputmask._valueGet()!==_().join("")&&k(t,_(),P(g())):be===!1&&$(t,P(g())),s.positionCaretOnTab===!0&&setTimeout(function(){$(t,P(g()))},0),ce=_().join("")}function oe(e){var t=this;if(be=!1,s.clearMaskOnLostFocus){var n=_().slice(),o=t.inputmask._valueGet();document.activeElement!==t&&o!==t.getAttribute("placeholder")&&""!==o&&(-1===g()&&o===D().join("")?n=[]:U(n),k(t,n))}}function ae(t){function n(t){if(s.radixFocus&&""!==s.radixPoint){var n=f().validPositions;if(void 0===n[t]||n[t].input===x(t)){if(t<P(-1))return!0;var o=e.inArray(s.radixPoint,_());if(-1!==o){for(var a in n)if(a>o&&n[a].input!==x(a))return!1;return!0}}}return!1}var o=this;if(document.activeElement===o){var a=$(o);if(a.begin===a.end)if(n(a.begin))$(o,e.inArray(s.radixPoint,_()));else{var r=a.begin,l=g(r),i=P(l);i>r?$(o,O(r)||O(r-1)?r:P(r)):$(o,s.numericInput?0:i)}}}function re(e){var t=this;setTimeout(function(){$(t,0,P(g()))},0)}function se(n){var o=this,a=e(o),r=$(o),l=n.originalEvent||n,i=window.clipboardData||l.clipboardData,d=ve?_().slice(r.end,r.begin):_().slice(r.begin,r.end);i.setData("text",ve?d.reverse().join(""):d.join("")),document.execCommand&&document.execCommand("copy"),q(o,t.keyCode.DELETE,r),k(o,_(),f().p,n,ce!==_().join("")),o.inputmask._valueGet()===D().join("")&&a.trigger("cleared"),s.showTooltip&&(o.title=s.tooltip||f().mask)}function le(t){var n=e(this),o=this;if(o.inputmask){var a=o.inputmask._valueGet(),r=_().slice();ce!==r.join("")&&setTimeout(function(){n.trigger("change"),ce=r.join("")},0),""!==a&&(s.clearMaskOnLostFocus&&(-1===g()&&a===D().join("")?r=[]:U(r)),Y(r)===!1&&(setTimeout(function(){n.trigger("incomplete")},0),s.clearIncomplete&&(v(),r=s.clearMaskOnLostFocus?[]:D().slice())),k(o,r,void 0,t))}}function ie(e){var t=this;be=!0,document.activeElement!==t&&s.showMaskOnHover&&t.inputmask._valueGet()!==_().join("")&&k(t,_())}function de(t){if(ue=t,me=e(ue),s.showTooltip&&(ue.title=s.tooltip||f().mask),("rtl"===ue.dir||s.rightAlign)&&(ue.style.textAlign="right"),("rtl"===ue.dir||s.numericInput)&&(ue.dir="ltr",ue.removeAttribute("dir"),ue.inputmask.isRTL=!0,ve=!0),me.off(".inputmask"),G(ue),("INPUT"===ue.tagName&&o(ue.getAttribute("type"))||ue.isContentEditable)&&(e(ue.form).on("submit",function(){ce!==_().join("")&&me.trigger("change"),s.clearMaskOnLostFocus&&-1===g()&&ue.inputmask._valueGet&&ue.inputmask._valueGet()===D().join("")&&ue.inputmask._valueSet(""),s.removeMaskOnSubmit&&(ue.inputmask._valueSet(ue.inputmask.unmaskedvalue(),!0),setTimeout(function(){k(ue,_())},0))}).on("reset",function(){setTimeout(function(){me.trigger("setvalue.inputmask")},0)}),me.on("mouseenter.inputmask",B(ie)).on("blur.inputmask",B(le)).on("focus.inputmask",B(ne)).on("mouseleave.inputmask",B(oe)).on("click.inputmask",B(ae)).on("dblclick.inputmask",B(re)).on(E+".inputmask dragdrop.inputmask drop.inputmask",B(z)).on("cut.inputmask",B(se)).on("complete.inputmask",B(s.oncomplete)).on("incomplete.inputmask",B(s.onincomplete)).on("cleared.inputmask",B(s.oncleared)).on("keydown.inputmask",B(Q)).on("keypress.inputmask",B(j)),u||me.on("compositionstart.inputmask",B(J)).on("compositionupdate.inputmask",B(X)).on("compositionend.inputmask",B(ee)),"paste"===E&&me.on("input.inputmask",B(K)),(c||u||p||m)&&(me.off("input.inputmask"),me.on("input.inputmask",B(Z)))),me.on("setvalue.inputmask",B(te)),""!==ue.inputmask._valueGet()||s.clearMaskOnLostFocus===!1){var n=e.isFunction(s.onBeforeMask)?s.onBeforeMask.call(ue,ue.inputmask._valueGet(),s)||ue.inputmask._valueGet():ue.inputmask._valueGet();H(ue,!0,!1,n.split(""));var a=_().slice();ce=a.join(""),Y(a)===!1&&s.clearIncomplete&&v(),s.clearMaskOnLostFocus&&(a.join("")===D().join("")?a=[]:U(a)),k(ue,a),document.activeElement===ue&&$(ue,P(g()))}}var ce,pe,ue,me,Ee,fe,ve=!1,ge=!1,Te=!1,he=!1,be=!0;if(void 0!==a)switch(a.action){case"isComplete":return ue=a.el,Y(_());case"unmaskedvalue":return ue=a.el,void 0!==ue&&void 0!==ue.inputmask?(r=ue.inputmask.maskset,s=ue.inputmask.opts,ve=ue.inputmask.isRTL,fe=ve?ue.inputmask._valueGet().split("").reverse().join(""):ue.inputmask._valueGet()):fe=a.value,s.numericInput&&(ve=!0),fe=(e.isFunction(s.onBeforeMask)?s.onBeforeMask(fe,s)||fe:fe).split(""),H(void 0,!1,!1,ve?fe.reverse():fe),e.isFunction(s.onBeforeWrite)&&s.onBeforeWrite(void 0,_(),0,s),F(ue);case"mask":ue=a.el,r=ue.inputmask.maskset,s=ue.inputmask.opts,ve=ue.inputmask.isRTL,ce=_().join(""),de(ue);break;case"format":return s.numericInput&&(ve=!0),fe=(e.isFunction(s.onBeforeMask)?s.onBeforeMask(a.value,s)||a.value:a.value).split(""),H(void 0,!1,!1,ve?fe.reverse():fe),e.isFunction(s.onBeforeWrite)&&s.onBeforeWrite(void 0,_(),0,s),a.metadata?{value:ve?_().slice().reverse().join(""):_().join(""),metadata:l({action:"getmetadata"},r,s)}:ve?_().slice().reverse().join(""):_().join("");case"isValid":s.numericInput&&(ve=!0),fe=a.value.split(""),H(void 0,!1,!0,ve?fe.reverse():fe);for(var ye=_(),Se=W(),Ae=ye.length-1;Ae>Se&&!O(Ae);Ae--);return ye.splice(Se,Ae+1-Se),Y(ye)&&a.value===ye.join("");case"getemptymask":return D();case"remove":ue=a.el,me=e(ue),r=ue.inputmask.maskset,s=ue.inputmask.opts,ue.inputmask._valueSet(F(ue)),me.off(".inputmask");var De;Object.getOwnPropertyDescriptor&&(De=Object.getOwnPropertyDescriptor(ue,"value")),De&&De.get?ue.inputmask.__valueGet&&Object.defineProperty(ue,"value",{get:ue.inputmask.__valueGet,set:ue.inputmask.__valueSet}):document.__lookupGetter__&&ue.__lookupGetter__("value")&&ue.inputmask.__valueGet&&(ue.__defineGetter__("value",ue.inputmask.__valueGet),ue.__defineSetter__("value",ue.inputmask.__valueSet)),ue.inputmask=void 0;break;case"getmetadata":if(e.isArray(r.metadata)){for(var _e,Ne=g(),Me=Ne;Me>=0;Me--)if(f().validPositions[Me]&&void 0!==f().validPositions[Me].alternation){_e=f().validPositions[Me].alternation;break}return void 0!==_e?r.metadata[f().validPositions[Ne].locator[_e]]:r.metadata[0]}return r.metadata}}t.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:e.noop,onincomplete:e.noop,oncleared:e.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:e.noop,onBeforeMask:null,onBeforePaste:function(t,n){return e.isFunction(n.onBeforeMask)?n.onBeforeMask(t,n):t},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,
onKeyValidation:e.noop,skipOptionalPartCharacter:" ",showTooltip:!1,tooltip:void 0,numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",groupSeparator:"",radixFocus:!1,nojumps:!1,nojumpsThreshold:0,keepStatic:null,positionCaretOnTab:!1,tabThrough:!1,supportsInputType:[],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:e.noop,postValidation:null},masksCache:{},mask:function(n){var o=this;return"string"==typeof n&&(n=document.querySelectorAll(n)),n=n.nodeName?[n]:n,e.each(n,function(n,a){var i=e.extend(!0,{},o.opts);r(a,i,e.extend(!0,{},o.userOptions));var d=s(i,o.noMasksCache);void 0!==d&&(void 0!==a.inputmask&&a.inputmask.remove(),a.inputmask=new t,a.inputmask.opts=i,a.inputmask.noMasksCache=o.noMasksCache,a.inputmask.userOptions=e.extend(!0,{},o.userOptions),a.inputmask.el=a,a.inputmask.maskset=d,a.inputmask.isRTL=!1,e.data(a,"_inputmask_opts",i),l({action:"mask",el:a}))}),n?n[0].inputmask||this:this},option:function(t){return"string"==typeof t?this.opts[t]:"object"==typeof t?(e.extend(this.opts,t),e.extend(this.userOptions,t),this.el&&(void 0!==t.mask||void 0!==t.alias?this.mask(this.el):(e.data(this.el,"_inputmask_opts",this.opts),l({action:"mask",el:this.el}))),this):void 0},unmaskedvalue:function(e){return l({action:"unmaskedvalue",el:this.el,value:e},this.el&&this.el.inputmask?this.el.inputmask.maskset:s(this.opts,this.noMasksCache),this.opts)},remove:function(){return this.el?(l({action:"remove",el:this.el}),this.el.inputmask=void 0,this.el):void 0},getemptymask:function(){return l({action:"getemptymask"},this.maskset||s(this.opts,this.noMasksCache),this.opts)},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return l({action:"isComplete",el:this.el},this.maskset||s(this.opts,this.noMasksCache),this.opts)},getmetadata:function(){return l({action:"getmetadata"},this.maskset||s(this.opts,this.noMasksCache),this.opts)},isValid:function(e){return l({action:"isValid",value:e},this.maskset||s(this.opts,this.noMasksCache),this.opts)},format:function(e,t){return l({action:"format",value:e,metadata:t},this.maskset||s(this.opts,this.noMasksCache),this.opts)}},t.extendDefaults=function(n){e.extend(!0,t.prototype.defaults,n)},t.extendDefinitions=function(n){e.extend(!0,t.prototype.defaults.definitions,n)},t.extendAliases=function(n){e.extend(!0,t.prototype.defaults.aliases,n)},t.format=function(e,n,o){return t(n).format(e,o)},t.unmask=function(e,n){return t(n).unmaskedvalue(e)},t.isValid=function(e,n){return t(n).isValid(e)},t.remove=function(t){e.each(t,function(e,t){t.inputmask&&t.inputmask.remove()})},t.escapeRegex=function(e){var t=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return e.replace(new RegExp("(\\"+t.join("|\\")+")","gim"),"\\$1")},t.keyCode={ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91};var i=navigator.userAgent,d=null!==i.match(new RegExp("iphone","i")),c=null!==i.match(new RegExp("android.*safari.*","i")),p=null!==i.match(new RegExp("android.*chrome.*","i")),u=null!==i.match(new RegExp("android.*firefox.*","i")),m=/Kindle/i.test(i)||/Silk/i.test(i)||/KFTT/i.test(i)||/KFOT/i.test(i)||/KFJWA/i.test(i)||/KFJWI/i.test(i)||/KFSOWI/i.test(i)||/KFTHWA/i.test(i)||/KFTHWI/i.test(i)||/KFAPWA/i.test(i)||/KFAPWI/i.test(i),E=n("paste")?"paste":n("input")?"input":"propertychange";return window.Inputmask=t,t}(jQuery),function(e,t){return void 0===e.fn.inputmask&&(e.fn.inputmask=function(n,o){var a,r;if(o=o||{},"string"==typeof n)switch(n){case"mask":return a=new t(o),this.each(function(){a.mask(this)});case"unmaskedvalue":return r=this.jquery&&this.length>0?this[0]:this,r.inputmask?r.inputmask.unmaskedvalue():e(r).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return r=this.jquery&&this.length>0?this[0]:this,r.inputmask?r.inputmask.getemptymask():"";case"hasMaskedValue":return r=this.jquery&&this.length>0?this[0]:this,r.inputmask?r.inputmask.hasMaskedValue():!1;case"isComplete":return r=this.jquery&&this.length>0?this[0]:this,r.inputmask?r.inputmask.isComplete():!0;case"getmetadata":return r=this.jquery&&this.length>0?this[0]:this,r.inputmask?r.inputmask.getmetadata():void 0;case"setvalue":r=this.jquery&&this.length>0?this[0]:this,e(r).val(o),void 0!==r.inputmask&&e(r).triggerHandler("setvalue.inputmask");break;case"option":if("string"!=typeof o)return this.each(function(){return void 0!==this.inputmask?this.inputmask.option(o):void 0});if(r=this.jquery&&this.length>0?this[0]:this,void 0!==r.inputmask)return r.inputmask.option(o);break;default:return o.alias=n,a=new t(o),this.each(function(){a.mask(this)})}else{if("object"==typeof n)return a=new t(n),this.each(void 0===n.mask&&void 0===n.alias?function(){return void 0!==this.inputmask?this.inputmask.option(n):void a.mask(this)}:function(){a.mask(this)});if(void 0===n)return this.each(function(){a=new t(o),a.mask(this)})}}),e.fn.inputmask}(jQuery,Inputmask),function(e,t){return t.extendDefinitions({h:{validator:"[01][0-9]|2[0-3]",cardinality:2,prevalidator:[{validator:"[0-2]",cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:"[0-5]",cardinality:1}]},d:{validator:"0[1-9]|[12][0-9]|3[01]",cardinality:2,prevalidator:[{validator:"[0-3]",cardinality:1}]},m:{validator:"0[1-9]|1[012]",cardinality:2,prevalidator:[{validator:"[01]",cardinality:1}]},y:{validator:"(19|20)\\d{2}",cardinality:4,prevalidator:[{validator:"[12]",cardinality:1},{validator:"(19|20)",cardinality:2},{validator:"(19|20)\\d",cardinality:3}]}}),t.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+n+"[01])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|[12][0-9])"+n+"(0[1-9]|1[012]))|(30"+n+"(0[13-9]|1[012]))|(31"+n+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(e,t,n){if(isNaN(e))return!1;var o=parseInt(e.concat(t.toString().slice(e.length))),a=parseInt(e.concat(n.toString().slice(e.length)));return(isNaN(o)?!1:o>=t&&n>=o)||(isNaN(a)?!1:a>=t&&n>=a)},determinebaseyear:function(e,t,n){var o=(new Date).getFullYear();if(e>o)return e;if(o>t){for(var a=t.toString().slice(0,2),r=t.toString().slice(2,4);a+n>t;)a--;var s=a+r;return e>s?e:s}return o},onKeyDown:function(n,o,a,r){var s=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var l=new Date;s.val(l.getDate().toString()+(l.getMonth()+1).toString()+l.getFullYear().toString()),s.trigger("setvalue.inputmask")}},getFrontValue:function(e,t,n){for(var o=0,a=0,r=0;r<e.length&&"2"!==e.charAt(r);r++){var s=n.definitions[e.charAt(r)];s?(o+=a,a=s.cardinality):a++}return t.join("").substr(o,a)},definitions:{1:{validator:function(e,t,n,o,a){var r=a.regex.val1.test(e);return o||r||e.charAt(1)!==a.separator&&-1==="-./".indexOf(e.charAt(1))||!(r=a.regex.val1.test("0"+e.charAt(0)))?r:(t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)})},cardinality:2,prevalidator:[{validator:function(e,t,n,o,a){var r=e;isNaN(t.buffer[n+1])||(r+=t.buffer[n+1]);var s=1===r.length?a.regex.val1pre.test(r):a.regex.val1.test(r);if(!o&&!s){if(s=a.regex.val1.test(e+"0"))return t.buffer[n]=e,t.buffer[++n]="0",{pos:n,c:"0"};if(s=a.regex.val1.test("0"+e))return t.buffer[n]="0",n++,{pos:n}}return s},cardinality:1}]},2:{validator:function(e,t,n,o,a){var r=a.getFrontValue(t.mask,t.buffer,a);-1!==r.indexOf(a.placeholder[0])&&(r="01"+a.separator);var s=a.regex.val2(a.separator).test(r+e);if(!o&&!s&&(e.charAt(1)===a.separator||-1!=="-./".indexOf(e.charAt(1)))&&(s=a.regex.val2(a.separator).test(r+"0"+e.charAt(0))))return t.buffer[n-1]="0",{refreshFromBuffer:{start:n-1,end:n},pos:n,c:e.charAt(0)};if(a.mask.indexOf("2")===a.mask.length-1&&s){var l=t.buffer.join("").substr(4,4)+e;if(l!==a.leapday)return!0;var i=parseInt(t.buffer.join("").substr(0,4),10);return i%4===0?i%100===0?i%400===0?!0:!1:!0:!1}return s},cardinality:2,prevalidator:[{validator:function(e,t,n,o,a){isNaN(t.buffer[n+1])||(e+=t.buffer[n+1]);var r=a.getFrontValue(t.mask,t.buffer,a);-1!==r.indexOf(a.placeholder[0])&&(r="01"+a.separator);var s=1===e.length?a.regex.val2pre(a.separator).test(r+e):a.regex.val2(a.separator).test(r+e);return o||s||!(s=a.regex.val2(a.separator).test(r+"0"+e))?s:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},y:{validator:function(e,t,n,o,a){if(a.isInYearRange(e,a.yearrange.minyear,a.yearrange.maxyear)){var r=t.buffer.join("").substr(0,6);if(r!==a.leapday)return!0;var s=parseInt(e,10);return s%4===0?s%100===0?s%400===0?!0:!1:!0:!1}return!1},cardinality:4,prevalidator:[{validator:function(e,t,n,o,a){var r=a.isInYearRange(e,a.yearrange.minyear,a.yearrange.maxyear);if(!o&&!r){var s=a.determinebaseyear(a.yearrange.minyear,a.yearrange.maxyear,e+"0").toString().slice(0,1);if(r=a.isInYearRange(s+e,a.yearrange.minyear,a.yearrange.maxyear))return t.buffer[n++]=s.charAt(0),{pos:n};if(s=a.determinebaseyear(a.yearrange.minyear,a.yearrange.maxyear,e+"0").toString().slice(0,2),r=a.isInYearRange(s+e,a.yearrange.minyear,a.yearrange.maxyear))return t.buffer[n++]=s.charAt(0),t.buffer[n++]=s.charAt(1),{pos:n}}return r},cardinality:1},{validator:function(e,t,n,o,a){var r=a.isInYearRange(e,a.yearrange.minyear,a.yearrange.maxyear);if(!o&&!r){var s=a.determinebaseyear(a.yearrange.minyear,a.yearrange.maxyear,e).toString().slice(0,2);if(r=a.isInYearRange(e[0]+s[1]+e[1],a.yearrange.minyear,a.yearrange.maxyear))return t.buffer[n++]=s.charAt(1),{pos:n};if(s=a.determinebaseyear(a.yearrange.minyear,a.yearrange.maxyear,e).toString().slice(0,2),a.isInYearRange(s+e,a.yearrange.minyear,a.yearrange.maxyear)){var l=t.buffer.join("").substr(0,6);if(l!==a.leapday)r=!0;else{var i=parseInt(e,10);r=i%4===0?i%100===0?i%400===0?!0:!1:!0:!1}}else r=!1;if(r)return t.buffer[n-1]=s.charAt(0),t.buffer[n++]=s.charAt(1),t.buffer[n++]=e.charAt(0),{refreshFromBuffer:{start:n-3,end:n},pos:n}}return r},cardinality:2},{validator:function(e,t,n,o,a){return a.isInYearRange(e,a.yearrange.minyear,a.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,o,a,r){var s=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var l=new Date;s.val((l.getMonth()+1).toString()+l.getDate().toString()+l.getFullYear().toString()),s.trigger("setvalue.inputmask")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(n,o,a,r){var s=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var l=new Date;s.val(l.getFullYear().toString()+(l.getMonth()+1).toString()+l.getDate().toString()),s.trigger("setvalue.inputmask")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(e,t,n,o,a){if("24"===a.hourFormat&&24===parseInt(e,10))return t.buffer[n-1]="0",t.buffer[n]="0",{refreshFromBuffer:{start:n-1,end:n},c:"0"};var r=a.regex.hrs.test(e);if(!o&&!r&&(e.charAt(1)===a.timeseparator||-1!=="-.:".indexOf(e.charAt(1)))&&(r=a.regex.hrs.test("0"+e.charAt(0))))return t.buffer[n-1]="0",t.buffer[n]=e.charAt(0),n++,{refreshFromBuffer:{start:n-2,end:n},pos:n,c:a.timeseparator};if(r&&"24"!==a.hourFormat&&a.regex.hrs24.test(e)){var s=parseInt(e,10);return 24===s?(t.buffer[n+5]="a",t.buffer[n+6]="m"):(t.buffer[n+5]="p",t.buffer[n+6]="m"),s-=12,10>s?(t.buffer[n]=s.toString(),t.buffer[n-1]="0"):(t.buffer[n]=s.toString().charAt(1),t.buffer[n-1]=s.toString().charAt(0)),{refreshFromBuffer:{start:n-1,end:n+6},c:t.buffer[n]}}return r},cardinality:2,prevalidator:[{validator:function(e,t,n,o,a){var r=a.regex.hrspre.test(e);return o||r||!(r=a.regex.hrs.test("0"+e))?r:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(e,t,n,o,a){var r=a.regex.mspre.test(e);return o||r||!(r=a.regex.ms.test("0"+e))?r:(t.buffer[n]="0",n++,{pos:n})},cardinality:1}]},t:{validator:function(e,t,n,o,a){return a.regex.ampm.test(e+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[13-9]|1[012])"+n+"[0-3])|(02"+n+"[0-2])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+n+"30)|((0[13578]|1[02])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(n,o,a,r){var s=e(this);if(n.ctrlKey&&n.keyCode===t.keyCode.RIGHT){var l=new Date;s.val((l.getMonth()+1).toString()+l.getDate().toString()+l.getFullYear().toString()),s.trigger("setvalue.inputmask")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"[0-3])")},val2:function(e){var n=t.escapeRegex.call(this,e);return new RegExp("((0[1-9]|1[012])"+n+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+n+"30)|((0[1-6])"+n+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0}}),t}(jQuery,Inputmask),function(e,t){return t.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),t.extendAliases({url:{mask:"ir",placeholder:"",separator:"",defaultPrefix:"http://",regex:{urlpre1:new RegExp("[fh]"),urlpre2:new RegExp("(ft|ht)"),urlpre3:new RegExp("(ftp|htt)"),urlpre4:new RegExp("(ftp:|http|ftps)"),urlpre5:new RegExp("(ftp:/|ftps:|http:|https)"),urlpre6:new RegExp("(ftp://|ftps:/|http:/|https:)"),urlpre7:new RegExp("(ftp://|ftps://|http://|https:/)"),urlpre8:new RegExp("(ftp://|ftps://|http://|https://)")},definitions:{i:{validator:function(e,t,n,o,a){return!0},cardinality:8,prevalidator:function(){for(var e=[],t=8,n=0;t>n;n++)e[n]=function(){var e=n;return{validator:function(t,n,o,a,r){if(r.regex["urlpre"+(e+1)]){var s,l=t;e+1-t.length>0&&(l=n.buffer.join("").substring(0,e+1-t.length)+""+l);var i=r.regex["urlpre"+(e+1)].test(l);if(!a&&!i){for(o-=e,s=0;s<r.defaultPrefix.length;s++)n.buffer[o]=r.defaultPrefix[s],o++;for(s=0;s<l.length-1;s++)n.buffer[o]=l[s],o++;return{pos:o}}return i}return!1},cardinality:e}}();return e}()},r:{validator:".",cardinality:50}},insertMode:!1,autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(e,t,n,o,a){return n-1>-1&&"."!==t.buffer[n-1]?(e=t.buffer[n-1]+e,e=n-2>-1&&"."!==t.buffer[n-2]?t.buffer[n-2]+e:"0"+e):e="00"+e,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(e)},cardinality:1}},onUnMask:function(e,t,n){return e}},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,64}]@*{1,64}[.*{2,64}][.*{2,6}][.*{1,2}]",greedy:!1,onBeforePaste:function(e,t){return e=e.toLowerCase(),e.replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"}},onUnMask:function(e,t,n){return e}},mac:{mask:"##:##:##:##:##:##"}}),t}(jQuery,Inputmask),function(e,t){return t.extendAliases({numeric:{mask:function(e){function t(t){for(var n="",o=0;o<t.length;o++)n+=e.definitions[t.charAt(o)]?"\\"+t.charAt(o):t.charAt(o);return n}if(0!==e.repeat&&isNaN(e.integerDigits)&&(e.integerDigits=e.repeat),e.repeat=0,e.groupSeparator===e.radixPoint&&(e.groupSeparator="."===e.radixPoint?",":","===e.radixPoint?".":"")," "===e.groupSeparator&&(e.skipOptionalPartCharacter=void 0),e.autoGroup=e.autoGroup&&""!==e.groupSeparator,e.autoGroup&&("string"==typeof e.groupSize&&isFinite(e.groupSize)&&(e.groupSize=parseInt(e.groupSize)),isFinite(e.integerDigits))){var n=Math.floor(e.integerDigits/e.groupSize),o=e.integerDigits%e.groupSize;e.integerDigits=parseInt(e.integerDigits)+(0===o?n-1:n),e.integerDigits<1&&(e.integerDigits="*")}e.placeholder.length>1&&(e.placeholder=e.placeholder.charAt(0)),e.radixFocus=e.radixFocus&&""!==e.placeholder&&e.integerOptional===!0,e.definitions[";"]=e.definitions["~"],e.definitions[";"].definitionSymbol="~",e.numericInput===!0&&(e.radixFocus=!1,e.digitsOptional=!1,isNaN(e.digits)&&(e.digits=2),e.decimalProtect=!1);var a=t(e.prefix);return a+="[+]",a+=e.integerOptional===!0?"~{1,"+e.integerDigits+"}":"~{"+e.integerDigits+"}",void 0!==e.digits&&(isNaN(e.digits)||parseInt(e.digits)>0)&&(a+=e.digitsOptional?"["+(e.decimalProtect?":":e.radixPoint)+";{1,"+e.digits+"}]":(e.decimalProtect?":":e.radixPoint)+";{"+e.digits+"}"),""!==e.negationSymbol.back&&(a+="[-]"),a+=t(e.suffix),e.greedy=!1,a},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,radixPoint:".",radixFocus:!0,groupSize:3,groupSeparator:"",autoGroup:!1,allowPlus:!0,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,postFormat:function(n,o,a,r){r.numericInput===!0&&(n=n.reverse(),isFinite(o)&&(o=n.join("").length-o-1));var s,l,i=!1;n.length>=r.suffix.length&&n.join("").indexOf(r.suffix)===n.length-r.suffix.length&&(n.length=n.length-r.suffix.length,i=!0),o=o>=n.length?n.length-1:o<r.prefix.length?r.prefix.length:o;var d=!1,c=n[o];if(""===r.groupSeparator||r.numericInput!==!0&&-1!==e.inArray(r.radixPoint,n)&&o>e.inArray(r.radixPoint,n)||new RegExp("["+t.escapeRegex(r.negationSymbol.front)+"+]").test(c)){if(i)for(s=0,l=r.suffix.length;l>s;s++)n.push(r.suffix.charAt(s));return{pos:o}}var p=n.slice();c===r.groupSeparator&&(p.splice(o--,1),c=p[o]),a?c!==r.radixPoint&&(p[o]="?"):p.splice(o,0,"?");var u=p.join(""),m=u;if(u.length>0&&r.autoGroup||a&&-1!==u.indexOf(r.groupSeparator)){var E=t.escapeRegex(r.groupSeparator);d=0===u.indexOf(r.groupSeparator),u=u.replace(new RegExp(E,"g"),"");var f=u.split(r.radixPoint);if(u=""===r.radixPoint?u:f[0],u!==r.prefix+"?0"&&u.length>=r.groupSize+r.prefix.length)for(var v=new RegExp("([-+]?[\\d?]+)([\\d?]{"+r.groupSize+"})");v.test(u);)u=u.replace(v,"$1"+r.groupSeparator+"$2"),u=u.replace(r.groupSeparator+r.groupSeparator,r.groupSeparator);""!==r.radixPoint&&f.length>1&&(u+=r.radixPoint+f[1])}for(d=m!==u,n.length=u.length,s=0,l=u.length;l>s;s++)n[s]=u.charAt(s);var g=e.inArray("?",n);if(-1===g&&c===r.radixPoint&&(g=e.inArray(r.radixPoint,n)),a?n[g]=c:n.splice(g,1),!d&&i)for(s=0,l=r.suffix.length;l>s;s++)n.push(r.suffix.charAt(s));return g=r.numericInput&&isFinite(o)?n.join("").length-g-1:g,r.numericInput&&(n=n.reverse(),e.inArray(r.radixPoint,n)<g&&n.join("").length-r.suffix.length!==g&&(g-=1)),{pos:g,refreshFromBuffer:d,buffer:n}},onBeforeWrite:function(n,o,a,r){if(n&&("blur"===n.type||"checkval"===n.type)){var s=o.join(""),l=s.replace(r.prefix,"");if(l=l.replace(r.suffix,""),l=l.replace(new RegExp(t.escapeRegex(r.groupSeparator),"g"),""),","===r.radixPoint&&(l=l.replace(t.escapeRegex(r.radixPoint),".")),isFinite(l)&&isFinite(r.min)&&parseFloat(l)<parseFloat(r.min))return e.extend(!0,{refreshFromBuffer:!0,buffer:(r.prefix+r.min).split("")},r.postFormat((r.prefix+r.min).split(""),0,!0,r));if(r.numericInput!==!0){var i=""!==r.radixPoint?o.join("").split(r.radixPoint):[o.join("")],d=i[0].match(r.regex.integerPart(r)),c=2===i.length?i[1].match(r.regex.integerNPart(r)):void 0;if(d){d[0]!==r.negationSymbol.front+"0"&&d[0]!==r.negationSymbol.front&&"+"!==d[0]||void 0!==c&&!c[0].match(/^0+$/)||o.splice(d.index,1);var p=e.inArray(r.radixPoint,o);if(-1!==p){if(isFinite(r.digits)&&!r.digitsOptional){for(var u=1;u<=r.digits;u++)(void 0===o[p+u]||o[p+u]===r.placeholder.charAt(0))&&(o[p+u]="0");return{refreshFromBuffer:s!==o.join(""),buffer:o}}if(p===o.length-r.suffix.length-1)return o.splice(p,1),{refreshFromBuffer:!0,buffer:o}}}}}if(r.autoGroup){var m=r.postFormat(o,r.numericInput?a:a-1,!0,r);return m.caret=a<=r.prefix.length?m.pos:m.pos+1,m}},regex:{integerPart:function(e){return new RegExp("["+t.escapeRegex(e.negationSymbol.front)+"+]?\\d+")},integerNPart:function(e){return new RegExp("[\\d"+t.escapeRegex(e.groupSeparator)+"]+")}},signHandler:function(e,t,n,o,a){if(!o&&a.allowMinus&&"-"===e||a.allowPlus&&"+"===e){var r=t.buffer.join("").match(a.regex.integerPart(a));if(r&&r[0].length>0)return t.buffer[r.index]===("-"===e?"+":a.negationSymbol.front)?"-"===e?""!==a.negationSymbol.back?{pos:r.index,c:a.negationSymbol.front,remove:r.index,caret:n,insert:{pos:t.buffer.length-a.suffix.length-1,c:a.negationSymbol.back}}:{pos:r.index,c:a.negationSymbol.front,remove:r.index,caret:n}:""!==a.negationSymbol.back?{pos:r.index,c:"+",remove:[r.index,t.buffer.length-a.suffix.length-1],caret:n}:{pos:r.index,c:"+",remove:r.index,caret:n}:t.buffer[r.index]===("-"===e?a.negationSymbol.front:"+")?"-"===e&&""!==a.negationSymbol.back?{remove:[r.index,t.buffer.length-a.suffix.length-1],caret:n-1}:{remove:r.index,caret:n-1}:"-"===e?""!==a.negationSymbol.back?{pos:r.index,c:a.negationSymbol.front,caret:n+1,insert:{pos:t.buffer.length-a.suffix.length,c:a.negationSymbol.back}}:{pos:r.index,c:a.negationSymbol.front,caret:n+1}:{pos:r.index,c:e,caret:n+1}}return!1},radixHandler:function(t,n,o,a,r){if(!a&&(-1!==e.inArray(t,[",","."])&&(t=r.radixPoint),t===r.radixPoint&&void 0!==r.digits&&(isNaN(r.digits)||parseInt(r.digits)>0))){var s=e.inArray(r.radixPoint,n.buffer),l=n.buffer.join("").match(r.regex.integerPart(r));if(-1!==s&&n.validPositions[s])return n.validPositions[s-1]?{caret:s+1}:{pos:l.index,c:l[0],caret:s+1};if(!l||"0"===l[0]&&l.index+1!==o)return n.buffer[l?l.index:o]="0",{pos:(l?l.index:o)+1,c:r.radixPoint}}return!1},leadingZeroHandler:function(t,n,o,a,r){if(r.numericInput===!0){if("0"===n.buffer[n.buffer.length-r.prefix.length-1])return{pos:o,remove:n.buffer.length-r.prefix.length-1}}else{var s=n.buffer.join("").match(r.regex.integerNPart(r)),l=e.inArray(r.radixPoint,n.buffer);if(s&&!a&&(-1===l||l>=o))if(0===s[0].indexOf("0")){o<r.prefix.length&&(o=s.index);var i=e.inArray(r.radixPoint,n._buffer),d=n._buffer&&n.buffer.slice(l).join("")===n._buffer.slice(i).join("")||0===parseInt(n.buffer.slice(l+1).join("")),c=n._buffer&&n.buffer.slice(s.index,l).join("")===n._buffer.slice(r.prefix.length,i).join("")||"0"===n.buffer.slice(s.index,l).join("");if(-1===l||d&&c)return n.buffer.splice(s.index,1),o=o>s.index?o-1:s.index,{pos:o,remove:s.index};if(s.index+1===o||"0"===t)return n.buffer.splice(s.index,1),o=s.index,{pos:o,remove:s.index}}else if("0"===t&&o<=s.index&&s[0]!==r.groupSeparator)return!1}return!0},postValidation:function(n,o){var a=!0,r=n.join(""),s=r.replace(o.prefix,"");return s=s.replace(o.suffix,""),s=s.replace(new RegExp(t.escapeRegex(o.groupSeparator),"g"),""),","===o.radixPoint&&(s=s.replace(t.escapeRegex(o.radixPoint),".")),s=s.replace(new RegExp("^"+t.escapeRegex(o.negationSymbol.front)),"-"),s=s.replace(new RegExp(t.escapeRegex(o.negationSymbol.back)+"$"),""),s=s===o.negationSymbol.front?s+"0":s,isFinite(s)&&(null!==o.max&&isFinite(o.max)&&(a=parseFloat(s)<=parseFloat(o.max)),a&&null!==o.min&&isFinite(o.min)&&(0>=s||s.toString().length>=o.min.toString().length)&&(a=parseFloat(s)>=parseFloat(o.min),a||(a=e.extend(!0,{refreshFromBuffer:!0,buffer:(o.prefix+o.min).split("")},o.postFormat((o.prefix+o.min).split(""),0,!0,o)),a.refreshFromBuffer=!0))),a},definitions:{"~":{validator:function(n,o,a,r,s){var l=s.signHandler(n,o,a,r,s);if(!l&&(l=s.radixHandler(n,o,a,r,s),!l&&(l=r?new RegExp("[0-9"+t.escapeRegex(s.groupSeparator)+"]").test(n):new RegExp("[0-9]").test(n),l===!0&&(l=s.leadingZeroHandler(n,o,a,r,s),l===!0)))){var i=e.inArray(s.radixPoint,o.buffer);l=-1!==i&&s.digitsOptional===!1&&s.numericInput!==!0&&a>i&&!r?{pos:a,remove:a}:{pos:a}}return l},cardinality:1,prevalidator:null},"+":{validator:function(e,t,n,o,a){var r=a.signHandler(e,t,n,o,a);return!r&&(o&&a.allowMinus&&e===a.negationSymbol.front||a.allowMinus&&"-"===e||a.allowPlus&&"+"===e)&&(r="-"===e?""!==a.negationSymbol.back?{pos:n,c:"-"===e?a.negationSymbol.front:"+",caret:n+1,insert:{pos:t.buffer.length,c:a.negationSymbol.back}}:{pos:n,c:"-"===e?a.negationSymbol.front:"+",caret:n+1}:!0),r},cardinality:1,prevalidator:null,placeholder:""},"-":{validator:function(e,t,n,o,a){var r=a.signHandler(e,t,n,o,a);return!r&&o&&a.allowMinus&&e===a.negationSymbol.back&&(r=!0),r},cardinality:1,prevalidator:null,placeholder:""},":":{validator:function(e,n,o,a,r){var s=r.signHandler(e,n,o,a,r);if(!s){var l="["+t.escapeRegex(r.radixPoint)+",\\.]";s=new RegExp(l).test(e),s&&n.validPositions[o]&&n.validPositions[o].match.placeholder===r.radixPoint&&(s={caret:o+1})}return s?{c:r.radixPoint}:s},cardinality:1,prevalidator:null,placeholder:function(e){return e.radixPoint}}},onUnMask:function(e,n,o){var a=e.replace(o.prefix,"");return a=a.replace(o.suffix,""),a=a.replace(new RegExp(t.escapeRegex(o.groupSeparator),"g"),""),o.unmaskAsNumber?(""!==o.radixPoint&&-1!==a.indexOf(o.radixPoint)&&(a=a.replace(t.escapeRegex.call(this,o.radixPoint),".")),Number(a)):a},isComplete:function(e,n){var o=e.join(""),a=e.slice();if(n.postFormat(a,0,!0,n),a.join("")!==o)return!1;var r=o.replace(n.prefix,"");return r=r.replace(n.suffix,""),r=r.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),""),","===n.radixPoint&&(r=r.replace(t.escapeRegex(n.radixPoint),".")),isFinite(r)},onBeforeMask:function(e,n){if(""!==n.radixPoint&&isFinite(e))e=e.toString().replace(".",n.radixPoint);else{var o=e.match(/,/g),a=e.match(/\./g);a&&o?a.length>o.length?(e=e.replace(/\./g,""),e=e.replace(",",n.radixPoint)):o.length>a.length?(e=e.replace(/,/g,""),e=e.replace(".",n.radixPoint)):e=e.indexOf(".")<e.indexOf(",")?e.replace(/\./g,""):e=e.replace(/,/g,""):e=e.replace(new RegExp(t.escapeRegex(n.groupSeparator),"g"),"")}if(0===n.digits&&(-1!==e.indexOf(".")?e=e.substring(0,e.indexOf(".")):-1!==e.indexOf(",")&&(e=e.substring(0,e.indexOf(",")))),""!==n.radixPoint&&isFinite(n.digits)&&-1!==e.indexOf(n.radixPoint)){var r=e.split(n.radixPoint),s=r[1].match(new RegExp("\\d*"))[0];if(parseInt(n.digits)<s.toString().length){var l=Math.pow(10,parseInt(n.digits));e=e.replace(t.escapeRegex(n.radixPoint),"."),e=Math.round(parseFloat(e)*l)/l,e=e.toString().replace(".",n.radixPoint)}}return e.toString()},canClearPosition:function(n,o,a,r,s){var l=n.validPositions[o].input,i=l!==s.radixPoint||null!==n.validPositions[o].match.fn&&s.decimalProtect===!1||isFinite(l)||o===a||l===s.groupSeparator||l===s.negationSymbol.front||l===s.negationSymbol.back;if(i&&isFinite(l)){var d,c=e.inArray(s.radixPoint,n.buffer),p=!1;if(void 0===n.validPositions[c]&&(n.validPositions[c]={input:s.radixPoint},p=!0),!r&&n.buffer){d=n.buffer.join("").substr(0,o).match(s.regex.integerNPart(s));var u=o+1,m=null==d||0===parseInt(d[0].replace(new RegExp(t.escapeRegex(s.groupSeparator),"g"),""));if(m)for(;n.validPositions[u]&&(n.validPositions[u].input===s.groupSeparator||"0"===n.validPositions[u].input);)delete n.validPositions[u],u++}var E=[];for(var f in n.validPositions)void 0!==n.validPositions[f].input&&E.push(n.validPositions[f].input);if(p&&delete n.validPositions[c],c>0){var v=E.join("");if(d=v.match(s.regex.integerNPart(s)))if(c>=o)if(0===d[0].indexOf("0"))i=d.index!==o||"0"===s.placeholder;else{var g=parseInt(d[0].replace(new RegExp(t.escapeRegex(s.groupSeparator),"g"),"")),T=parseInt(v.split(s.radixPoint)[1]);10>g&&n.validPositions[o]&&("0"!==s.placeholder||T>0)&&(n.validPositions[o].input="0",n.p=s.prefix.length+1,i=!1)}else 0===d[0].indexOf("0")&&3===v.length&&(n.validPositions={},i=!1)}}return i},onKeyDown:function(n,o,a,r){var s=e(this);if(n.ctrlKey)switch(n.keyCode){case t.keyCode.UP:s.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(r.step)),s.trigger("setvalue.inputmask");break;case t.keyCode.DOWN:s.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(r.step)),s.trigger("setvalue.inputmask")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowPlus:!1,allowMinus:!1}}),t}(jQuery,Inputmask),function(e,t){return t.extendAliases({phone:{url:"phone-codes/phone-codes.js",countrycode:"",mask:function(t){t.definitions["#"]=t.definitions[9];var n=[];return e.ajax({url:t.url,async:!1,dataType:"json",success:function(e){n=e},error:function(e,n,o){alert(o+" - "+t.url)}}),n=n.sort(function(e,t){return(e.mask||e)<(t.mask||t)?-1:1})},keepStatic:!1,nojumps:!0,nojumpsThreshold:1,onBeforeMask:function(e,t){var n=e.replace(/^0/g,"");return(n.indexOf(t.countrycode)>1||-1===n.indexOf(t.countrycode))&&(n="+"+t.countrycode+n),n}},phonebe:{alias:"phone",url:"phone-codes/phone-be.js",countrycode:"32",nojumpsThreshold:4}}),t}(jQuery,Inputmask),function(e,t){return t.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(e,t){return new RegExp(t.regex).test(e.join(""))},definitions:{r:{validator:function(t,n,o,a,r){function s(e,t){this.matches=[],this.isGroup=e||!1,this.isQuantifier=t||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function l(){var e,t,n=new s,o=[];for(r.regexTokens=[];e=r.tokenizer.exec(r.regex);)switch(t=e[0],t.charAt(0)){case"(":o.push(new s(!0));break;case")":d=o.pop(),o.length>0?o[o.length-1].matches.push(d):n.matches.push(d);break;

case"{":case"+":case"*":var a=new s(!1,!0);t=t.replace(/[{}]/g,"");var l=t.split(","),i=isNaN(l[0])?l[0]:parseInt(l[0]),c=1===l.length?i:isNaN(l[1])?l[1]:parseInt(l[1]);if(a.quantifier={min:i,max:c},o.length>0){var p=o[o.length-1].matches;e=p.pop(),e.isGroup||(d=new s(!0),d.matches.push(e),e=d),p.push(e),p.push(a)}else e=n.matches.pop(),e.isGroup||(d=new s(!0),d.matches.push(e),e=d),n.matches.push(e),n.matches.push(a);break;default:o.length>0?o[o.length-1].matches.push(t):n.matches.push(t)}n.matches.length>0&&r.regexTokens.push(n)}function i(t,n){var o=!1;n&&(p+="(",m++);for(var a=0;a<t.matches.length;a++){var r=t.matches[a];if(r.isGroup===!0)o=i(r,!0);else if(r.isQuantifier===!0){var s=e.inArray(r,t.matches),l=t.matches[s-1],d=p;if(isNaN(r.quantifier.max)){for(;r.repeaterPart&&r.repeaterPart!==p&&r.repeaterPart.length>p.length&&!(o=i(l,!0)););o=o||i(l,!0),o&&(r.repeaterPart=p),p=d+r.quantifier.max}else{for(var c=0,u=r.quantifier.max-1;u>c&&!(o=i(l,!0));c++);p=d+"{"+r.quantifier.min+","+r.quantifier.max+"}"}}else if(void 0!==r.matches)for(var f=0;f<r.length&&!(o=i(r[f],n));f++);else{var v;if("["==r.charAt(0)){v=p,v+=r;for(var g=0;m>g;g++)v+=")";var T=new RegExp("^("+v+")$");o=T.test(E)}else for(var h=0,b=r.length;b>h;h++)if("\\"!==r.charAt(h)){v=p,v+=r.substr(0,h+1),v=v.replace(/\|$/,"");for(var g=0;m>g;g++)v+=")";var T=new RegExp("^("+v+")$");if(o=T.test(E))break}p+=r}if(o)break}return n&&(p+=")",m--),o}var d,c=n.buffer.slice(),p="",u=!1,m=0;null===r.regexTokens&&l(),c.splice(o,0,t);for(var E=c.join(""),f=0;f<r.regexTokens.length;f++){var v=r.regexTokens[f];if(u=i(v,v.isGroup))break}return u},cardinality:1}}}}),t}(jQuery,Inputmask),function(){"use strict";var e=angular.module("app",["ngResource","ui.router","ngCookies","ui.mask","ui.bootstrap","isteven-multi-select","ngInputModified","ui.validate","angular.filter","xeditable","checklist-model","ngFileUpload","STNResource","ui.bootstrap.datetimepicker","STNControllers","LogInOutController","ModalControllers","SettingsControllers"]);e.run(["$rootScope","$uibModalStack",function(e,t){e.$on("$stateChangeStart",function(e,n,o,a,r){$("#ui-view").html(""),$(".page-loading").removeClass("hidden"),t.dismissAll(),"/"==n.url&&$("#userNameFocus").focus()}),e.$on("$stateChangeSuccess",function(){$(".page-loading").addClass("hidden")}),e.$on("$stateChangeError",function(e,t,n,o,a,r){$(".page-loading").addClass("hidden"),alert("Error occurred: Status"+r.status+", "+r.statusText+". The following request was unsuccessful: "+r.config.url+" Please refresh and try again.")})}]),e.config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/"),e.state("entry",{url:"/",templateUrl:"component/main/mainView.html",controller:"mainCtrl"}).state("home",{url:"/Home",templateUrl:"component/home/homeBase.html",controller:"homeCtrl"}).state("map",{url:"/Map",templateUrl:"component/map/map.html",controller:"mapCtrl"}).state("fileUpload",{url:"/File",templateUrl:"component/file/file.html",controller:"fileUploadCtrl",resolve:{ft:"FILE_TYPE",fileTypeList:function(e){return e.getAll().$promise},a:"AGENCY",agencyList:function(e){return e.getAll().$promise}}}).state("approval",{url:"/Approval",templateUrl:"component/approval/approval.html",controller:"approvalCtrl",resolve:{s:"STATE",stateList:function(e){return e.getAll().$promise},i:"INSTRUMENT",instrumentList:function(e){return e.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(e){return e.getAll().$promise}}}).state("siteSearch",{url:"/SiteSearch",templateUrl:"component/siteSearch/siteSearch.html",controller:"siteSearchCtrl",resolve:{s:"STATE",stateList:function(e){return e.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(e){return e.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(e){return e.getAll().$promise}}}).state("reporting",{url:"/Reporting","abstract":!0,templateUrl:"component/reporting/reporting.html",controller:"reportingCtrl",resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},state:"STATE",allStates:function(e){return e.getAll().$promise},r:"REPORT",allReports:function(e){return e.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(e){return e.getAll().$promise},es:"EVENT_STATUS",allEventStatus:function(e){return e.getAll().$promise},ag:"AGENCY",allAgencies:function(e){return e.getAll().$promise},incompleteReports:function(e,t){var n=t.get("mID");return e.getMemberReports({memberId:n}).$promise}}}).state("reporting.reportDash",{url:"/Dashboard",templateUrl:"component/reporting/reportingDashboard.html",controller:"reportingDashCtrl",resolve:{r:"REPORT",allReportsAgain:function(e){return e.getAll().$promise}}}).state("reporting.submitReport",{url:"/SubmitReport",templateUrl:"component/reporting/submitReport.html",controller:"submitReportCtrl"}).state("reporting.generateReport",{url:"/GenerateReport",templateUrl:"component/reporting/generateReport.html"}).state("settings",{url:"/Settings",templateUrl:"component/settings/settings.html",controller:"settingsCtrl"}).state("members",{url:"/Members","abstract":!0,templateUrl:"component/member/memberHolderView.html",controller:"memberCtrl",resolve:{r:"ROLE",allRoles:function(e){return e.getAll().$promise},a:"AGENCY",allAgencies:function(e){return e.getAll().$promise}}}).state("members.MembersList",{url:"/MembersList",templateUrl:"component/member/membersList.html"}).state("members.MemberInfo",{url:"/memberInfo/:id",templateUrl:"component/member/memberInfo.html",controller:"memberInfoCtrl",resolve:{m:"MEMBER",thisMember:function(e,t,n,o){var a=t.id;return a>0?(n.defaults.headers.common.Authorization="Basic "+o.get("STNCreds"),n.defaults.headers.common.Accept="application/json",e.query({id:a}).$promise):void 0}}}).state("events",{url:"/Events","abstract":!0,templateUrl:"component/event/eventHolderView.html",controller:"eventCtrl",resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(e){return e.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(e){return e.getAll().$promise}}}).state("events.EventsList",{url:"/EventsList",templateUrl:"component/event/eventsList.html"}).state("events.EventInfo",{url:"/eventInfo/:id",templateUrl:"component/event/eventInfo.html",controller:"eventInfoCtrl",resolve:{e:"EVENT",thisEvent:function(e,t){var n=t.id;return n>0?e.query({id:n}).$promise:void 0}}}).state("resources",{url:"/Resources","abstract":!0,templateUrl:"component/resources/resourcesHolderView.html",controller:"resourcesCtrl",resolve:{state:"STATE",allStates:function(e){return e.getAll().$promise},ag:"AGENCY",allAgencies:function(e){return e.getAll().$promise},c:"CONTACT_TYPE",allContactTypes:function(e){return e.getAll().$promise},d:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(e){return e.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(e){return e.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(e){return e.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(e){return e.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(e){return e.getAll().$promise},hd:"HORIZONTAL_DATUM",allHorDatums:function(e){return e.getAll().$promise},ht:"HOUSING_TYPE",allHouseTypes:function(e){return e.getAll().$promise},hq:"HWM_QUALITY",allHWMqualities:function(e){return e.getAll().$promise},hwmT:"HWM_TYPE",allHWMtypes:function(e){return e.getAll().$promise},icc:"INST_COLL_CONDITION",allInstCollectConditions:function(e){return e.getAll().$promise},m:"MARKER",allMarkers:function(e){return e.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(e){return e.getAll().$promise},opq:"OP_QUALITY",allObjPtQualities:function(e){return e.getAll().$promise},opt:"OP_TYPE",allObjPtTypes:function(e){return e.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(e){return e.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeploymentTypes:function(e){return e.getAll().$promise},sstat:"STATUS_TYPE",allStatusTypes:function(e){return e.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(e){return e.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(e){return e.getAll().$promise},vcm:"VERTICAL_COLL_METHOD",allVerticalCollMethods:function(e){return e.getAll().$promise},vd:"VERTICAL_DATUM",allVerticalDatums:function(e){return e.getAll().$promise}}}).state("resources.ResourcesList",{url:"/ResourcesList",templateUrl:"component/resources/resourcesList.html"}).state("resources.ResourcesList.agency",{url:"/Agencies",templateUrl:"component/resources/agency.html"}).state("resources.ResourcesList.ContactType",{url:"/ContactTypes",templateUrl:"component/resources/contactType.html"}).state("resources.ResourcesList.DepPriority",{url:"/DeploymentPriorities",templateUrl:"component/resources/deploymentPriority.html"}).state("resources.ResourcesList.EventStatus",{url:"/EventStatus",templateUrl:"component/resources/eventStatus.html"}).state("resources.ResourcesList.EventType",{url:"/EventTypes",templateUrl:"component/resources/eventType.html"}).state("resources.ResourcesList.FileType",{url:"/FileTypes",templateUrl:"component/resources/fileType.html"}).state("resources.ResourcesList.HorCollMethd",{url:"/HorizontalCollMethods",templateUrl:"component/resources/horizontalCollectionMethod.html"}).state("resources.ResourcesList.HorDatum",{url:"/HorizontalDatums",templateUrl:"component/resources/horizontalDatum.html"}).state("resources.ResourcesList.HousingType",{url:"/HousingTypes",templateUrl:"component/resources/housingType.html"}).state("resources.ResourcesList.HWMQual",{url:"/HWMQualities",templateUrl:"component/resources/hwmQuality.html"}).state("resources.ResourcesList.HWMType",{url:"/HWMTypes",templateUrl:"component/resources/hwmType.html"}).state("resources.ResourcesList.InstrCollCondition",{url:"/InstrCollConditions",templateUrl:"component/resources/instrumentCollectionCondition.html"}).state("resources.ResourcesList.Marker",{url:"/Markers",templateUrl:"component/resources/marker.html"}).state("resources.ResourcesList.NetworkNames",{url:"/NetworkNames",templateUrl:"component/resources/networkNames.html"}).state("resources.ResourcesList.OPquality",{url:"/ObjPointQualities",templateUrl:"component/resources/objectivePointQuality.html"}).state("resources.ResourcesList.OPType",{url:"/ObjPointType",templateUrl:"component/resources/objectivePointType.html"}).state("resources.ResourcesList.SensorBrand",{url:"/SensorBrands",templateUrl:"component/resources/sensorBrand.html"}).state("resources.ResourcesList.SenDepType",{url:"/SensorDeploymentTypes",templateUrl:"component/resources/deploymentType.html"}).state("resources.ResourcesList.StatusType",{url:"/StatusTypes",templateUrl:"component/resources/statusType.html"}).state("resources.ResourcesList.SensorType",{url:"/SensorTypes",templateUrl:"component/resources/sensorType.html"}).state("resources.ResourcesList.NetworkType",{url:"/NetworkTypes",templateUrl:"component/resources/networkType.html"}).state("resources.ResourcesList.VertCollMethod",{url:"/VerticalCollMethods",templateUrl:"component/resources/verticalCollectionMethod.html"}).state("resources.ResourcesList.VertDatum",{url:"/VerticalDatums",templateUrl:"component/resources/verticalDatum.html"}).state("site",{url:"/Site/:id","abstract":!0,templateUrl:"component/site/site.html",controller:function(e,t){e.siteID=t.id},resolve:{s:"SITE",thisSite:function(e,t){return t.id>0?e.query({id:t.id}).$promise:void 0},thisSiteNetworkNames:function(e,t){return t.id>0?e.getSiteNetworkNames({id:t.id}).$promise:void 0},thisSiteNetworkTypes:function(e,t){return t.id>0?e.getSiteNetworkTypes({id:t.id}).$promise:void 0},thisSiteHousings:function(e,t){return t.id>0?e.getSiteHousings({id:t.id}).$promise:void 0},thisSiteOPs:function(e,t){return t.id>0?e.getSiteOPs({id:t.id}).$promise:void 0},thisSiteSensors:function(e,t){return t.id>0?e.getSiteSensors({id:t.id}).$promise:void 0},thisSiteHWMs:function(e,t){return t.id>0?e.getSiteHWMs({id:t.id}).$promise:void 0},thisSiteFiles:function(e,t){return t.id>0?e.getSiteFiles({id:t.id}).$promise:void 0},thisSitePeaks:function(e,t){return t.id>0?e.getSitePeaks({id:t.id}).$promise:void 0},hd:"HORIZONTAL_DATUM",allHorDatums:function(e){return e.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(e){return e.getAll().$promise},st:"STATE",allStates:function(e){return e.getAll().$promise},c:"COUNTIES",allCounties:function(e){return e.getAll().$promise},ht:"HOUSING_TYPE",allHousingTypes:function(e){return e.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(e){return e.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(e){return e.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(e){return e.getAll().$promise},sd:"SENSOR_DEPLOYMENT",allSensDeps:function(e){return e.getAll().$promise},dp:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(e){return e.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(e){return e.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(e){return e.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(e){return e.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(e){return e.getAll().$promise},e:"EVENT",allEvents:function(e){return e.getAll().$promise},sent:"SENSOR_TYPE",allSensorTypes:function(e){return e.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(e){return e.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(e){return e.getAll().$promise},hq:"HWM_QUALITY",allHWMQualities:function(e){return e.getAll().$promise},m:"MARKER",allMarkers:function(e){return e.getAll().$promise}}}).state("site.dashboard",{url:"/SiteDashboard",views:{siteNo:{controller:function(e,t,n){void 0!==n&&(e.SiteNo=n.SITE_NO),e.$watch(function(){return t.get("SessionEventName")},function(n){e.sessionEvent=null!==t.get("SessionEventName")&&void 0!==t.get("SessionEventName")?t.get("SessionEventName"):"All Events"})},template:'<div><h2 style="margin-top:0">Site {{SiteNo}} - For {{sessionEvent}}</h2></div><hr />'},aSite:{controller:"siteCtrl",templateUrl:"component/site/siteInfoView.html"},op:{controller:"objectivePointCtrl",templateUrl:"component/objectivePoint/objectivePointList.html"},sensor:{controller:"sensorCtrl",templateUrl:"component/sensor/sensorList.html"},hwm:{controller:"hwmCtrl",templateUrl:"component/hwm/hwmList.html"},file:{controller:"fileCtrl",templateUrl:"component/file/fileList.html"},peak:{controller:"peakCtrl",templateUrl:"component/peak/peakList.html"}}}).state("quickHWM",{url:"/QuickHWM",templateUrl:"component/hwm/quickHWM.html",controller:"quickHWMCtrl",resolve:{hd:"HORIZONTAL_DATUM",allHorDatums:function(e){return e.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(e){return e.getAll().$promise},st:"STATE",allStates:function(e){return e.getAll().$promise},c:"COUNTIES",allCounties:function(e){return e.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(e){return e.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(e){return e.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(e){return e.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(e){return e.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(e){return e.getAll().$promise},hq:"HWM_QUALITY",allHWMQualities:function(e){return e.getAll().$promise},m:"MARKER",allMarkers:function(e){return e.getAll().$promise}}})}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("event/eventHolderView.html","<div ui-view></div>")}])}(),function(e){try{e=angular.module("app")}catch(t){e=angular.module("app",[])}e.run(["$templateCache",function(e){e.put("approval/approval.html",'<h3>Pending Approval - For {{sessionEvent}}</h3><hr><div>Choose what you want to approve. Search by one or more parameters</div><br><form name="approvalForm"><div class="row"><label class="col-md-1 control-label" for="EVENT">Event:</label><div class="col-md-3">{{sessionEvent}}</div><label class="col-md-1 control-label" for="STATE">States:</label><div class="col-md-3"><select class="form-control" id="STATE_ABBREV" name="STATE_ABBREV" ng-model="ChosenState.id" ng-options="s.STATE_ABBREV as s.STATE_NAME for s in allStates"><option value=""></option></select></div><label class="col-md-1 control-label" for="MEMBER">Members:</label><div class="col-md-3"><select class="form-control" id="MEMBER_ID" name="MEMBER_ID" ng-model="ChosenMember.id" ng-options="m.MEMBER_ID as (m.LNAME || \'\') + \', \' + (m.FNAME || \'\') for m in allMembers | orderBy: \'LNAME\'"><option value=""></option></select></div></div><br><div class="row"><div class="span6" style="text-align:center"><button class="btn btn-primary large" ng-click="search()">Search</button></div></div></form><div ng-if="showHWMbox" class="col-md-5 panel panel-default" style="padding:0;margin:1em"><div class="panel-heading"><h3 class="panel-title">Unapproved Site HWMs</h3></div><div class="panel-body"><div ng-show="unApprovedHWMs.length > 0"><ul><li style="list-style:none" ng-repeat="h in unApprovedHWMs"><span>{{h.SITE_NO}}: {{h.HWM_ID}} ({{h.ELEV_FT}} ft.)</span></li></ul></div><div ng-show="unApprovedHWMs.length == 0"><span>No HWMs returned from query.</span></div></div></div><div ng-if="showDFbox" class="col-md-5 panel panel-default pull-right" style="padding:0;margin:1em"><div class="panel-heading"><h3 class="panel-title">Unapproved Instrument Data Files</h3></div><div class="panel-body"><div ng-show="unApprovedDFs.length > 0"><ul><li style="list-style:none" ng-repeat="d in unApprovedDFs track by $index"><span>{{d.stringToShow}}</span></li></ul></div><div ng-show="unApprovedDFs.length == 0"><span>No Data Files returned from query.</span></div></div></div>')}])}();
//# sourceMappingURL=data:application/json;base64,
